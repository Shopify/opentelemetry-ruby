// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/agent/common/v1/common.proto

#ifndef PROTOBUF_INCLUDED_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto
#define PROTOBUF_INCLUDED_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto();
namespace opencensus {
namespace proto {
namespace agent {
namespace common {
namespace v1 {
class LibraryInfo;
class LibraryInfoDefaultTypeInternal;
extern LibraryInfoDefaultTypeInternal _LibraryInfo_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Node_AttributesEntry_DoNotUse;
class Node_AttributesEntry_DoNotUseDefaultTypeInternal;
extern Node_AttributesEntry_DoNotUseDefaultTypeInternal _Node_AttributesEntry_DoNotUse_default_instance_;
class ProcessIdentifier;
class ProcessIdentifierDefaultTypeInternal;
extern ProcessIdentifierDefaultTypeInternal _ProcessIdentifier_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace agent
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> ::opencensus::proto::agent::common::v1::LibraryInfo* Arena::CreateMaybeMessage<::opencensus::proto::agent::common::v1::LibraryInfo>(Arena*);
template<> ::opencensus::proto::agent::common::v1::Node* Arena::CreateMaybeMessage<::opencensus::proto::agent::common::v1::Node>(Arena*);
template<> ::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse>(Arena*);
template<> ::opencensus::proto::agent::common::v1::ProcessIdentifier* Arena::CreateMaybeMessage<::opencensus::proto::agent::common::v1::ProcessIdentifier>(Arena*);
template<> ::opencensus::proto::agent::common::v1::ServiceInfo* Arena::CreateMaybeMessage<::opencensus::proto::agent::common::v1::ServiceInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace opencensus {
namespace proto {
namespace agent {
namespace common {
namespace v1 {

enum LibraryInfo_Language {
  LibraryInfo_Language_LANGUAGE_UNSPECIFIED = 0,
  LibraryInfo_Language_CPP = 1,
  LibraryInfo_Language_C_SHARP = 2,
  LibraryInfo_Language_ERLANG = 3,
  LibraryInfo_Language_GO_LANG = 4,
  LibraryInfo_Language_JAVA = 5,
  LibraryInfo_Language_NODE_JS = 6,
  LibraryInfo_Language_PHP = 7,
  LibraryInfo_Language_PYTHON = 8,
  LibraryInfo_Language_RUBY = 9,
  LibraryInfo_Language_WEB_JS = 10,
  LibraryInfo_Language_LibraryInfo_Language_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LibraryInfo_Language_LibraryInfo_Language_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LibraryInfo_Language_IsValid(int value);
const LibraryInfo_Language LibraryInfo_Language_Language_MIN = LibraryInfo_Language_LANGUAGE_UNSPECIFIED;
const LibraryInfo_Language LibraryInfo_Language_Language_MAX = LibraryInfo_Language_WEB_JS;
const int LibraryInfo_Language_Language_ARRAYSIZE = LibraryInfo_Language_Language_MAX + 1;

const ::google::protobuf::EnumDescriptor* LibraryInfo_Language_descriptor();
inline const ::std::string& LibraryInfo_Language_Name(LibraryInfo_Language value) {
  return ::google::protobuf::internal::NameOfEnum(
    LibraryInfo_Language_descriptor(), value);
}
inline bool LibraryInfo_Language_Parse(
    const ::std::string& name, LibraryInfo_Language* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LibraryInfo_Language>(
    LibraryInfo_Language_descriptor(), name, value);
}
// ===================================================================

class Node_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Node_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Node_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Node_AttributesEntry_DoNotUse();
  Node_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Node_AttributesEntry_DoNotUse& other);
  static const Node_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Node_AttributesEntry_DoNotUse*>(&_Node_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Node :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.common.v1.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 4;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  const ::opencensus::proto::agent::common::v1::ProcessIdentifier& identifier() const;
  ::opencensus::proto::agent::common::v1::ProcessIdentifier* release_identifier();
  ::opencensus::proto::agent::common::v1::ProcessIdentifier* mutable_identifier();
  void set_allocated_identifier(::opencensus::proto::agent::common::v1::ProcessIdentifier* identifier);

  // .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;
  bool has_library_info() const;
  void clear_library_info();
  static const int kLibraryInfoFieldNumber = 2;
  const ::opencensus::proto::agent::common::v1::LibraryInfo& library_info() const;
  ::opencensus::proto::agent::common::v1::LibraryInfo* release_library_info();
  ::opencensus::proto::agent::common::v1::LibraryInfo* mutable_library_info();
  void set_allocated_library_info(::opencensus::proto::agent::common::v1::LibraryInfo* library_info);

  // .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;
  bool has_service_info() const;
  void clear_service_info();
  static const int kServiceInfoFieldNumber = 3;
  const ::opencensus::proto::agent::common::v1::ServiceInfo& service_info() const;
  ::opencensus::proto::agent::common::v1::ServiceInfo* release_service_info();
  ::opencensus::proto::agent::common::v1::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::opencensus::proto::agent::common::v1::ServiceInfo* service_info);

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.common.v1.Node)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Node_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::opencensus::proto::agent::common::v1::ProcessIdentifier* identifier_;
  ::opencensus::proto::agent::common::v1::LibraryInfo* library_info_;
  ::opencensus::proto::agent::common::v1::ServiceInfo* service_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ProcessIdentifier :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.common.v1.ProcessIdentifier) */ {
 public:
  ProcessIdentifier();
  virtual ~ProcessIdentifier();

  ProcessIdentifier(const ProcessIdentifier& from);

  inline ProcessIdentifier& operator=(const ProcessIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessIdentifier(ProcessIdentifier&& from) noexcept
    : ProcessIdentifier() {
    *this = ::std::move(from);
  }

  inline ProcessIdentifier& operator=(ProcessIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProcessIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessIdentifier* internal_default_instance() {
    return reinterpret_cast<const ProcessIdentifier*>(
               &_ProcessIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProcessIdentifier* other);
  friend void swap(ProcessIdentifier& a, ProcessIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessIdentifier* New() const final {
    return CreateMaybeMessage<ProcessIdentifier>(nullptr);
  }

  ProcessIdentifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessIdentifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessIdentifier& from);
  void MergeFrom(const ProcessIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessIdentifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_name = 1;
  void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // .google.protobuf.Timestamp start_timestamp = 3;
  bool has_start_timestamp() const;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 3;
  const ::google::protobuf::Timestamp& start_timestamp() const;
  ::google::protobuf::Timestamp* release_start_timestamp();
  ::google::protobuf::Timestamp* mutable_start_timestamp();
  void set_allocated_start_timestamp(::google::protobuf::Timestamp* start_timestamp);

  // uint32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.common.v1.ProcessIdentifier)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::google::protobuf::Timestamp* start_timestamp_;
  ::google::protobuf::uint32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class LibraryInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.common.v1.LibraryInfo) */ {
 public:
  LibraryInfo();
  virtual ~LibraryInfo();

  LibraryInfo(const LibraryInfo& from);

  inline LibraryInfo& operator=(const LibraryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LibraryInfo(LibraryInfo&& from) noexcept
    : LibraryInfo() {
    *this = ::std::move(from);
  }

  inline LibraryInfo& operator=(LibraryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LibraryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LibraryInfo* internal_default_instance() {
    return reinterpret_cast<const LibraryInfo*>(
               &_LibraryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LibraryInfo* other);
  friend void swap(LibraryInfo& a, LibraryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LibraryInfo* New() const final {
    return CreateMaybeMessage<LibraryInfo>(nullptr);
  }

  LibraryInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LibraryInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LibraryInfo& from);
  void MergeFrom(const LibraryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LibraryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LibraryInfo_Language Language;
  static const Language LANGUAGE_UNSPECIFIED =
    LibraryInfo_Language_LANGUAGE_UNSPECIFIED;
  static const Language CPP =
    LibraryInfo_Language_CPP;
  static const Language C_SHARP =
    LibraryInfo_Language_C_SHARP;
  static const Language ERLANG =
    LibraryInfo_Language_ERLANG;
  static const Language GO_LANG =
    LibraryInfo_Language_GO_LANG;
  static const Language JAVA =
    LibraryInfo_Language_JAVA;
  static const Language NODE_JS =
    LibraryInfo_Language_NODE_JS;
  static const Language PHP =
    LibraryInfo_Language_PHP;
  static const Language PYTHON =
    LibraryInfo_Language_PYTHON;
  static const Language RUBY =
    LibraryInfo_Language_RUBY;
  static const Language WEB_JS =
    LibraryInfo_Language_WEB_JS;
  static inline bool Language_IsValid(int value) {
    return LibraryInfo_Language_IsValid(value);
  }
  static const Language Language_MIN =
    LibraryInfo_Language_Language_MIN;
  static const Language Language_MAX =
    LibraryInfo_Language_Language_MAX;
  static const int Language_ARRAYSIZE =
    LibraryInfo_Language_Language_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Language_descriptor() {
    return LibraryInfo_Language_descriptor();
  }
  static inline const ::std::string& Language_Name(Language value) {
    return LibraryInfo_Language_Name(value);
  }
  static inline bool Language_Parse(const ::std::string& name,
      Language* value) {
    return LibraryInfo_Language_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string exporter_version = 2;
  void clear_exporter_version();
  static const int kExporterVersionFieldNumber = 2;
  const ::std::string& exporter_version() const;
  void set_exporter_version(const ::std::string& value);
  #if LANG_CXX11
  void set_exporter_version(::std::string&& value);
  #endif
  void set_exporter_version(const char* value);
  void set_exporter_version(const char* value, size_t size);
  ::std::string* mutable_exporter_version();
  ::std::string* release_exporter_version();
  void set_allocated_exporter_version(::std::string* exporter_version);

  // string core_library_version = 3;
  void clear_core_library_version();
  static const int kCoreLibraryVersionFieldNumber = 3;
  const ::std::string& core_library_version() const;
  void set_core_library_version(const ::std::string& value);
  #if LANG_CXX11
  void set_core_library_version(::std::string&& value);
  #endif
  void set_core_library_version(const char* value);
  void set_core_library_version(const char* value, size_t size);
  ::std::string* mutable_core_library_version();
  ::std::string* release_core_library_version();
  void set_allocated_core_library_version(::std::string* core_library_version);

  // .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;
  void clear_language();
  static const int kLanguageFieldNumber = 1;
  ::opencensus::proto::agent::common::v1::LibraryInfo_Language language() const;
  void set_language(::opencensus::proto::agent::common::v1::LibraryInfo_Language value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.common.v1.LibraryInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exporter_version_;
  ::google::protobuf::internal::ArenaStringPtr core_library_version_;
  int language_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ServiceInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.common.v1.ServiceInfo) */ {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServiceInfo* other);
  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(nullptr);
  }

  ServiceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.common.v1.ServiceInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Node

// .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;
inline bool Node::has_identifier() const {
  return this != internal_default_instance() && identifier_ != nullptr;
}
inline void Node::clear_identifier() {
  if (GetArenaNoVirtual() == nullptr && identifier_ != nullptr) {
    delete identifier_;
  }
  identifier_ = nullptr;
}
inline const ::opencensus::proto::agent::common::v1::ProcessIdentifier& Node::identifier() const {
  const ::opencensus::proto::agent::common::v1::ProcessIdentifier* p = identifier_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.Node.identifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::agent::common::v1::ProcessIdentifier*>(
      &::opencensus::proto::agent::common::v1::_ProcessIdentifier_default_instance_);
}
inline ::opencensus::proto::agent::common::v1::ProcessIdentifier* Node::release_identifier() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.Node.identifier)
  
  ::opencensus::proto::agent::common::v1::ProcessIdentifier* temp = identifier_;
  identifier_ = nullptr;
  return temp;
}
inline ::opencensus::proto::agent::common::v1::ProcessIdentifier* Node::mutable_identifier() {
  
  if (identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::agent::common::v1::ProcessIdentifier>(GetArenaNoVirtual());
    identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.Node.identifier)
  return identifier_;
}
inline void Node::set_allocated_identifier(::opencensus::proto::agent::common::v1::ProcessIdentifier* identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete identifier_;
  }
  if (identifier) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    
  } else {
    
  }
  identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.Node.identifier)
}

// .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;
inline bool Node::has_library_info() const {
  return this != internal_default_instance() && library_info_ != nullptr;
}
inline void Node::clear_library_info() {
  if (GetArenaNoVirtual() == nullptr && library_info_ != nullptr) {
    delete library_info_;
  }
  library_info_ = nullptr;
}
inline const ::opencensus::proto::agent::common::v1::LibraryInfo& Node::library_info() const {
  const ::opencensus::proto::agent::common::v1::LibraryInfo* p = library_info_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.Node.library_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::agent::common::v1::LibraryInfo*>(
      &::opencensus::proto::agent::common::v1::_LibraryInfo_default_instance_);
}
inline ::opencensus::proto::agent::common::v1::LibraryInfo* Node::release_library_info() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.Node.library_info)
  
  ::opencensus::proto::agent::common::v1::LibraryInfo* temp = library_info_;
  library_info_ = nullptr;
  return temp;
}
inline ::opencensus::proto::agent::common::v1::LibraryInfo* Node::mutable_library_info() {
  
  if (library_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::agent::common::v1::LibraryInfo>(GetArenaNoVirtual());
    library_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.Node.library_info)
  return library_info_;
}
inline void Node::set_allocated_library_info(::opencensus::proto::agent::common::v1::LibraryInfo* library_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete library_info_;
  }
  if (library_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      library_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, library_info, submessage_arena);
    }
    
  } else {
    
  }
  library_info_ = library_info;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.Node.library_info)
}

// .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;
inline bool Node::has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline void Node::clear_service_info() {
  if (GetArenaNoVirtual() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::opencensus::proto::agent::common::v1::ServiceInfo& Node::service_info() const {
  const ::opencensus::proto::agent::common::v1::ServiceInfo* p = service_info_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.Node.service_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::agent::common::v1::ServiceInfo*>(
      &::opencensus::proto::agent::common::v1::_ServiceInfo_default_instance_);
}
inline ::opencensus::proto::agent::common::v1::ServiceInfo* Node::release_service_info() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.Node.service_info)
  
  ::opencensus::proto::agent::common::v1::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::opencensus::proto::agent::common::v1::ServiceInfo* Node::mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::agent::common::v1::ServiceInfo>(GetArenaNoVirtual());
    service_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.Node.service_info)
  return service_info_;
}
inline void Node::set_allocated_service_info(::opencensus::proto::agent::common::v1::ServiceInfo* service_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.Node.service_info)
}

// map<string, string> attributes = 4;
inline int Node::attributes_size() const {
  return attributes_.size();
}
inline void Node::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::attributes() const {
  // @@protoc_insertion_point(field_map:opencensus.proto.agent.common.v1.Node.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:opencensus.proto.agent.common.v1.Node.attributes)
  return attributes_.MutableMap();
}

// -------------------------------------------------------------------

// ProcessIdentifier

// string host_name = 1;
inline void ProcessIdentifier::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessIdentifier::host_name() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
  return host_name_.GetNoArena();
}
inline void ProcessIdentifier::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
}
#if LANG_CXX11
inline void ProcessIdentifier::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
}
#endif
inline void ProcessIdentifier::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
}
inline void ProcessIdentifier::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
}
inline ::std::string* ProcessIdentifier::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessIdentifier::release_host_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessIdentifier::set_allocated_host_name(::std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.ProcessIdentifier.host_name)
}

// uint32 pid = 2;
inline void ProcessIdentifier::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 ProcessIdentifier::pid() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.ProcessIdentifier.pid)
  return pid_;
}
inline void ProcessIdentifier::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.agent.common.v1.ProcessIdentifier.pid)
}

// .google.protobuf.Timestamp start_timestamp = 3;
inline bool ProcessIdentifier::has_start_timestamp() const {
  return this != internal_default_instance() && start_timestamp_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ProcessIdentifier::start_timestamp() const {
  const ::google::protobuf::Timestamp* p = start_timestamp_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.ProcessIdentifier.start_timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ProcessIdentifier::release_start_timestamp() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.ProcessIdentifier.start_timestamp)
  
  ::google::protobuf::Timestamp* temp = start_timestamp_;
  start_timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ProcessIdentifier::mutable_start_timestamp() {
  
  if (start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.ProcessIdentifier.start_timestamp)
  return start_timestamp_;
}
inline void ProcessIdentifier::set_allocated_start_timestamp(::google::protobuf::Timestamp* start_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_timestamp_);
  }
  if (start_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      start_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  start_timestamp_ = start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.ProcessIdentifier.start_timestamp)
}

// -------------------------------------------------------------------

// LibraryInfo

// .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;
inline void LibraryInfo::clear_language() {
  language_ = 0;
}
inline ::opencensus::proto::agent::common::v1::LibraryInfo_Language LibraryInfo::language() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.LibraryInfo.language)
  return static_cast< ::opencensus::proto::agent::common::v1::LibraryInfo_Language >(language_);
}
inline void LibraryInfo::set_language(::opencensus::proto::agent::common::v1::LibraryInfo_Language value) {
  
  language_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.agent.common.v1.LibraryInfo.language)
}

// string exporter_version = 2;
inline void LibraryInfo::clear_exporter_version() {
  exporter_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LibraryInfo::exporter_version() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
  return exporter_version_.GetNoArena();
}
inline void LibraryInfo::set_exporter_version(const ::std::string& value) {
  
  exporter_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
}
#if LANG_CXX11
inline void LibraryInfo::set_exporter_version(::std::string&& value) {
  
  exporter_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
}
#endif
inline void LibraryInfo::set_exporter_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exporter_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
}
inline void LibraryInfo::set_exporter_version(const char* value, size_t size) {
  
  exporter_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
}
inline ::std::string* LibraryInfo::mutable_exporter_version() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
  return exporter_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LibraryInfo::release_exporter_version() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
  
  return exporter_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LibraryInfo::set_allocated_exporter_version(::std::string* exporter_version) {
  if (exporter_version != nullptr) {
    
  } else {
    
  }
  exporter_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exporter_version);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.LibraryInfo.exporter_version)
}

// string core_library_version = 3;
inline void LibraryInfo::clear_core_library_version() {
  core_library_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LibraryInfo::core_library_version() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
  return core_library_version_.GetNoArena();
}
inline void LibraryInfo::set_core_library_version(const ::std::string& value) {
  
  core_library_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
}
#if LANG_CXX11
inline void LibraryInfo::set_core_library_version(::std::string&& value) {
  
  core_library_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
}
#endif
inline void LibraryInfo::set_core_library_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  core_library_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
}
inline void LibraryInfo::set_core_library_version(const char* value, size_t size) {
  
  core_library_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
}
inline ::std::string* LibraryInfo::mutable_core_library_version() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
  return core_library_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LibraryInfo::release_core_library_version() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
  
  return core_library_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LibraryInfo::set_allocated_core_library_version(::std::string* core_library_version) {
  if (core_library_version != nullptr) {
    
  } else {
    
  }
  core_library_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), core_library_version);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.LibraryInfo.core_library_version)
}

// -------------------------------------------------------------------

// ServiceInfo

// string name = 1;
inline void ServiceInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceInfo::name() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.common.v1.ServiceInfo.name)
  return name_.GetNoArena();
}
inline void ServiceInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.agent.common.v1.ServiceInfo.name)
}
#if LANG_CXX11
inline void ServiceInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.agent.common.v1.ServiceInfo.name)
}
#endif
inline void ServiceInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.agent.common.v1.ServiceInfo.name)
}
inline void ServiceInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.agent.common.v1.ServiceInfo.name)
}
inline ::std::string* ServiceInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.common.v1.ServiceInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceInfo::release_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.common.v1.ServiceInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.common.v1.ServiceInfo.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace common
}  // namespace agent
}  // namespace proto
}  // namespace opencensus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opencensus::proto::agent::common::v1::LibraryInfo_Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opencensus::proto::agent::common::v1::LibraryInfo_Language>() {
  return ::opencensus::proto::agent::common::v1::LibraryInfo_Language_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto
