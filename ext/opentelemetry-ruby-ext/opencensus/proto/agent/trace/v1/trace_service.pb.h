// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/agent/trace/v1/trace_service.proto

#ifndef PROTOBUF_INCLUDED_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto
#define PROTOBUF_INCLUDED_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "opencensus/proto/agent/common/v1/common.pb.h"
#include "opencensus/proto/resource/v1/resource.pb.h"
#include "opencensus/proto/trace/v1/trace.pb.h"
#include "opencensus/proto/trace/v1/trace_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto();
namespace opencensus {
namespace proto {
namespace agent {
namespace trace {
namespace v1 {
class CurrentLibraryConfig;
class CurrentLibraryConfigDefaultTypeInternal;
extern CurrentLibraryConfigDefaultTypeInternal _CurrentLibraryConfig_default_instance_;
class ExportTraceServiceRequest;
class ExportTraceServiceRequestDefaultTypeInternal;
extern ExportTraceServiceRequestDefaultTypeInternal _ExportTraceServiceRequest_default_instance_;
class ExportTraceServiceResponse;
class ExportTraceServiceResponseDefaultTypeInternal;
extern ExportTraceServiceResponseDefaultTypeInternal _ExportTraceServiceResponse_default_instance_;
class UpdatedLibraryConfig;
class UpdatedLibraryConfigDefaultTypeInternal;
extern UpdatedLibraryConfigDefaultTypeInternal _UpdatedLibraryConfig_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace agent
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> ::opencensus::proto::agent::trace::v1::CurrentLibraryConfig* Arena::CreateMaybeMessage<::opencensus::proto::agent::trace::v1::CurrentLibraryConfig>(Arena*);
template<> ::opencensus::proto::agent::trace::v1::ExportTraceServiceRequest* Arena::CreateMaybeMessage<::opencensus::proto::agent::trace::v1::ExportTraceServiceRequest>(Arena*);
template<> ::opencensus::proto::agent::trace::v1::ExportTraceServiceResponse* Arena::CreateMaybeMessage<::opencensus::proto::agent::trace::v1::ExportTraceServiceResponse>(Arena*);
template<> ::opencensus::proto::agent::trace::v1::UpdatedLibraryConfig* Arena::CreateMaybeMessage<::opencensus::proto::agent::trace::v1::UpdatedLibraryConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace opencensus {
namespace proto {
namespace agent {
namespace trace {
namespace v1 {

// ===================================================================

class CurrentLibraryConfig :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.trace.v1.CurrentLibraryConfig) */ {
 public:
  CurrentLibraryConfig();
  virtual ~CurrentLibraryConfig();

  CurrentLibraryConfig(const CurrentLibraryConfig& from);

  inline CurrentLibraryConfig& operator=(const CurrentLibraryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurrentLibraryConfig(CurrentLibraryConfig&& from) noexcept
    : CurrentLibraryConfig() {
    *this = ::std::move(from);
  }

  inline CurrentLibraryConfig& operator=(CurrentLibraryConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CurrentLibraryConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentLibraryConfig* internal_default_instance() {
    return reinterpret_cast<const CurrentLibraryConfig*>(
               &_CurrentLibraryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CurrentLibraryConfig* other);
  friend void swap(CurrentLibraryConfig& a, CurrentLibraryConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrentLibraryConfig* New() const final {
    return CreateMaybeMessage<CurrentLibraryConfig>(nullptr);
  }

  CurrentLibraryConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CurrentLibraryConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CurrentLibraryConfig& from);
  void MergeFrom(const CurrentLibraryConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentLibraryConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .opencensus.proto.agent.common.v1.Node node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::opencensus::proto::agent::common::v1::Node& node() const;
  ::opencensus::proto::agent::common::v1::Node* release_node();
  ::opencensus::proto::agent::common::v1::Node* mutable_node();
  void set_allocated_node(::opencensus::proto::agent::common::v1::Node* node);

  // .opencensus.proto.trace.v1.TraceConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::opencensus::proto::trace::v1::TraceConfig& config() const;
  ::opencensus::proto::trace::v1::TraceConfig* release_config();
  ::opencensus::proto::trace::v1::TraceConfig* mutable_config();
  void set_allocated_config(::opencensus::proto::trace::v1::TraceConfig* config);

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.trace.v1.CurrentLibraryConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::opencensus::proto::agent::common::v1::Node* node_;
  ::opencensus::proto::trace::v1::TraceConfig* config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdatedLibraryConfig :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig) */ {
 public:
  UpdatedLibraryConfig();
  virtual ~UpdatedLibraryConfig();

  UpdatedLibraryConfig(const UpdatedLibraryConfig& from);

  inline UpdatedLibraryConfig& operator=(const UpdatedLibraryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdatedLibraryConfig(UpdatedLibraryConfig&& from) noexcept
    : UpdatedLibraryConfig() {
    *this = ::std::move(from);
  }

  inline UpdatedLibraryConfig& operator=(UpdatedLibraryConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdatedLibraryConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatedLibraryConfig* internal_default_instance() {
    return reinterpret_cast<const UpdatedLibraryConfig*>(
               &_UpdatedLibraryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UpdatedLibraryConfig* other);
  friend void swap(UpdatedLibraryConfig& a, UpdatedLibraryConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdatedLibraryConfig* New() const final {
    return CreateMaybeMessage<UpdatedLibraryConfig>(nullptr);
  }

  UpdatedLibraryConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdatedLibraryConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdatedLibraryConfig& from);
  void MergeFrom(const UpdatedLibraryConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatedLibraryConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .opencensus.proto.agent.common.v1.Node node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::opencensus::proto::agent::common::v1::Node& node() const;
  ::opencensus::proto::agent::common::v1::Node* release_node();
  ::opencensus::proto::agent::common::v1::Node* mutable_node();
  void set_allocated_node(::opencensus::proto::agent::common::v1::Node* node);

  // .opencensus.proto.trace.v1.TraceConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::opencensus::proto::trace::v1::TraceConfig& config() const;
  ::opencensus::proto::trace::v1::TraceConfig* release_config();
  ::opencensus::proto::trace::v1::TraceConfig* mutable_config();
  void set_allocated_config(::opencensus::proto::trace::v1::TraceConfig* config);

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::opencensus::proto::agent::common::v1::Node* node_;
  ::opencensus::proto::trace::v1::TraceConfig* config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExportTraceServiceRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest) */ {
 public:
  ExportTraceServiceRequest();
  virtual ~ExportTraceServiceRequest();

  ExportTraceServiceRequest(const ExportTraceServiceRequest& from);

  inline ExportTraceServiceRequest& operator=(const ExportTraceServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportTraceServiceRequest(ExportTraceServiceRequest&& from) noexcept
    : ExportTraceServiceRequest() {
    *this = ::std::move(from);
  }

  inline ExportTraceServiceRequest& operator=(ExportTraceServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExportTraceServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportTraceServiceRequest* internal_default_instance() {
    return reinterpret_cast<const ExportTraceServiceRequest*>(
               &_ExportTraceServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ExportTraceServiceRequest* other);
  friend void swap(ExportTraceServiceRequest& a, ExportTraceServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportTraceServiceRequest* New() const final {
    return CreateMaybeMessage<ExportTraceServiceRequest>(nullptr);
  }

  ExportTraceServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportTraceServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExportTraceServiceRequest& from);
  void MergeFrom(const ExportTraceServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportTraceServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opencensus.proto.trace.v1.Span spans = 2;
  int spans_size() const;
  void clear_spans();
  static const int kSpansFieldNumber = 2;
  ::opencensus::proto::trace::v1::Span* mutable_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span >*
      mutable_spans();
  const ::opencensus::proto::trace::v1::Span& spans(int index) const;
  ::opencensus::proto::trace::v1::Span* add_spans();
  const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span >&
      spans() const;

  // .opencensus.proto.agent.common.v1.Node node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::opencensus::proto::agent::common::v1::Node& node() const;
  ::opencensus::proto::agent::common::v1::Node* release_node();
  ::opencensus::proto::agent::common::v1::Node* mutable_node();
  void set_allocated_node(::opencensus::proto::agent::common::v1::Node* node);

  // .opencensus.proto.resource.v1.Resource resource = 3;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 3;
  const ::opencensus::proto::resource::v1::Resource& resource() const;
  ::opencensus::proto::resource::v1::Resource* release_resource();
  ::opencensus::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opencensus::proto::resource::v1::Resource* resource);

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span > spans_;
  ::opencensus::proto::agent::common::v1::Node* node_;
  ::opencensus::proto::resource::v1::Resource* resource_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExportTraceServiceResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.agent.trace.v1.ExportTraceServiceResponse) */ {
 public:
  ExportTraceServiceResponse();
  virtual ~ExportTraceServiceResponse();

  ExportTraceServiceResponse(const ExportTraceServiceResponse& from);

  inline ExportTraceServiceResponse& operator=(const ExportTraceServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportTraceServiceResponse(ExportTraceServiceResponse&& from) noexcept
    : ExportTraceServiceResponse() {
    *this = ::std::move(from);
  }

  inline ExportTraceServiceResponse& operator=(ExportTraceServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExportTraceServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportTraceServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ExportTraceServiceResponse*>(
               &_ExportTraceServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExportTraceServiceResponse* other);
  friend void swap(ExportTraceServiceResponse& a, ExportTraceServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportTraceServiceResponse* New() const final {
    return CreateMaybeMessage<ExportTraceServiceResponse>(nullptr);
  }

  ExportTraceServiceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportTraceServiceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExportTraceServiceResponse& from);
  void MergeFrom(const ExportTraceServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportTraceServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opencensus.proto.agent.trace.v1.ExportTraceServiceResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CurrentLibraryConfig

// .opencensus.proto.agent.common.v1.Node node = 1;
inline bool CurrentLibraryConfig::has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline const ::opencensus::proto::agent::common::v1::Node& CurrentLibraryConfig::node() const {
  const ::opencensus::proto::agent::common::v1::Node* p = node_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.node)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::agent::common::v1::Node*>(
      &::opencensus::proto::agent::common::v1::_Node_default_instance_);
}
inline ::opencensus::proto::agent::common::v1::Node* CurrentLibraryConfig::release_node() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.node)
  
  ::opencensus::proto::agent::common::v1::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::opencensus::proto::agent::common::v1::Node* CurrentLibraryConfig::mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::agent::common::v1::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.node)
  return node_;
}
inline void CurrentLibraryConfig::set_allocated_node(::opencensus::proto::agent::common::v1::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(node_);
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.node)
}

// .opencensus.proto.trace.v1.TraceConfig config = 2;
inline bool CurrentLibraryConfig::has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline const ::opencensus::proto::trace::v1::TraceConfig& CurrentLibraryConfig::config() const {
  const ::opencensus::proto::trace::v1::TraceConfig* p = config_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TraceConfig*>(
      &::opencensus::proto::trace::v1::_TraceConfig_default_instance_);
}
inline ::opencensus::proto::trace::v1::TraceConfig* CurrentLibraryConfig::release_config() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.config)
  
  ::opencensus::proto::trace::v1::TraceConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TraceConfig* CurrentLibraryConfig::mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TraceConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.config)
  return config_;
}
inline void CurrentLibraryConfig::set_allocated_config(::opencensus::proto::trace::v1::TraceConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_);
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.trace.v1.CurrentLibraryConfig.config)
}

// -------------------------------------------------------------------

// UpdatedLibraryConfig

// .opencensus.proto.agent.common.v1.Node node = 1;
inline bool UpdatedLibraryConfig::has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline const ::opencensus::proto::agent::common::v1::Node& UpdatedLibraryConfig::node() const {
  const ::opencensus::proto::agent::common::v1::Node* p = node_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.node)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::agent::common::v1::Node*>(
      &::opencensus::proto::agent::common::v1::_Node_default_instance_);
}
inline ::opencensus::proto::agent::common::v1::Node* UpdatedLibraryConfig::release_node() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.node)
  
  ::opencensus::proto::agent::common::v1::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::opencensus::proto::agent::common::v1::Node* UpdatedLibraryConfig::mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::agent::common::v1::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.node)
  return node_;
}
inline void UpdatedLibraryConfig::set_allocated_node(::opencensus::proto::agent::common::v1::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(node_);
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.node)
}

// .opencensus.proto.trace.v1.TraceConfig config = 2;
inline bool UpdatedLibraryConfig::has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline const ::opencensus::proto::trace::v1::TraceConfig& UpdatedLibraryConfig::config() const {
  const ::opencensus::proto::trace::v1::TraceConfig* p = config_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TraceConfig*>(
      &::opencensus::proto::trace::v1::_TraceConfig_default_instance_);
}
inline ::opencensus::proto::trace::v1::TraceConfig* UpdatedLibraryConfig::release_config() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.config)
  
  ::opencensus::proto::trace::v1::TraceConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TraceConfig* UpdatedLibraryConfig::mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TraceConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.config)
  return config_;
}
inline void UpdatedLibraryConfig::set_allocated_config(::opencensus::proto::trace::v1::TraceConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_);
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.trace.v1.UpdatedLibraryConfig.config)
}

// -------------------------------------------------------------------

// ExportTraceServiceRequest

// .opencensus.proto.agent.common.v1.Node node = 1;
inline bool ExportTraceServiceRequest::has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline const ::opencensus::proto::agent::common::v1::Node& ExportTraceServiceRequest::node() const {
  const ::opencensus::proto::agent::common::v1::Node* p = node_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.node)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::agent::common::v1::Node*>(
      &::opencensus::proto::agent::common::v1::_Node_default_instance_);
}
inline ::opencensus::proto::agent::common::v1::Node* ExportTraceServiceRequest::release_node() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.node)
  
  ::opencensus::proto::agent::common::v1::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::opencensus::proto::agent::common::v1::Node* ExportTraceServiceRequest::mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::agent::common::v1::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.node)
  return node_;
}
inline void ExportTraceServiceRequest::set_allocated_node(::opencensus::proto::agent::common::v1::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(node_);
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.node)
}

// repeated .opencensus.proto.trace.v1.Span spans = 2;
inline int ExportTraceServiceRequest::spans_size() const {
  return spans_.size();
}
inline ::opencensus::proto::trace::v1::Span* ExportTraceServiceRequest::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.spans)
  return spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span >*
ExportTraceServiceRequest::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.spans)
  return &spans_;
}
inline const ::opencensus::proto::trace::v1::Span& ExportTraceServiceRequest::spans(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.spans)
  return spans_.Get(index);
}
inline ::opencensus::proto::trace::v1::Span* ExportTraceServiceRequest::add_spans() {
  // @@protoc_insertion_point(field_add:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.spans)
  return spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span >&
ExportTraceServiceRequest::spans() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.spans)
  return spans_;
}

// .opencensus.proto.resource.v1.Resource resource = 3;
inline bool ExportTraceServiceRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline const ::opencensus::proto::resource::v1::Resource& ExportTraceServiceRequest::resource() const {
  const ::opencensus::proto::resource::v1::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.resource)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::resource::v1::Resource*>(
      &::opencensus::proto::resource::v1::_Resource_default_instance_);
}
inline ::opencensus::proto::resource::v1::Resource* ExportTraceServiceRequest::release_resource() {
  // @@protoc_insertion_point(field_release:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.resource)
  
  ::opencensus::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::opencensus::proto::resource::v1::Resource* ExportTraceServiceRequest::mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::resource::v1::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.resource)
  return resource_;
}
inline void ExportTraceServiceRequest::set_allocated_resource(::opencensus::proto::resource::v1::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_);
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.agent.trace.v1.ExportTraceServiceRequest.resource)
}

// -------------------------------------------------------------------

// ExportTraceServiceResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace trace
}  // namespace agent
}  // namespace proto
}  // namespace opencensus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_opencensus_2fproto_2fagent_2ftrace_2fv1_2ftrace_5fservice_2eproto
