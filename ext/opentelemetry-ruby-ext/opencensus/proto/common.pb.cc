// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/agent/common/v1/common.proto

#include "opencensus/proto/agent/common/v1/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Node_AttributesEntry_DoNotUse_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto;
namespace opencensus {
namespace proto {
namespace agent {
namespace common {
namespace v1 {
class Node_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node_AttributesEntry_DoNotUse> _instance;
} _Node_AttributesEntry_DoNotUse_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class ProcessIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessIdentifier> _instance;
} _ProcessIdentifier_default_instance_;
class LibraryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LibraryInfo> _instance;
} _LibraryInfo_default_instance_;
class ServiceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceInfo> _instance;
} _ServiceInfo_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace agent
}  // namespace proto
}  // namespace opencensus
static void InitDefaultsNode_AttributesEntry_DoNotUse_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::agent::common::v1::_Node_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse();
  }
  ::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Node_AttributesEntry_DoNotUse_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNode_AttributesEntry_DoNotUse_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto}, {}};

static void InitDefaultsNode_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::agent::common::v1::_Node_default_instance_;
    new (ptr) ::opencensus::proto::agent::common::v1::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::agent::common::v1::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Node_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsNode_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto}, {
      &scc_info_ProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_LibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_ServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_Node_AttributesEntry_DoNotUse_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::agent::common::v1::_ProcessIdentifier_default_instance_;
    new (ptr) ::opencensus::proto::agent::common::v1::ProcessIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::agent::common::v1::ProcessIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsLibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::agent::common::v1::_LibraryInfo_default_instance_;
    new (ptr) ::opencensus::proto::agent::common::v1::LibraryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::agent::common::v1::LibraryInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto}, {}};

static void InitDefaultsServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::agent::common::v1::_ServiceInfo_default_instance_;
    new (ptr) ::opencensus::proto::agent::common::v1::ServiceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::agent::common::v1::ServiceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto}, {}};

void InitDefaults_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Node_AttributesEntry_DoNotUse_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node, identifier_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node, library_info_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node, service_info_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::Node, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::ProcessIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::ProcessIdentifier, host_name_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::ProcessIdentifier, pid_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::ProcessIdentifier, start_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::LibraryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::LibraryInfo, language_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::LibraryInfo, exporter_version_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::LibraryInfo, core_library_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::agent::common::v1::ServiceInfo, name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse)},
  { 9, -1, sizeof(::opencensus::proto::agent::common::v1::Node)},
  { 18, -1, sizeof(::opencensus::proto::agent::common::v1::ProcessIdentifier)},
  { 26, -1, sizeof(::opencensus::proto::agent::common::v1::LibraryInfo)},
  { 34, -1, sizeof(::opencensus::proto::agent::common::v1::ServiceInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::agent::common::v1::_Node_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::agent::common::v1::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::agent::common::v1::_ProcessIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::agent::common::v1::_LibraryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::agent::common::v1::_ServiceInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto = {
  {}, AddDescriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto, "opencensus/proto/agent/common/v1/common.proto", schemas,
  file_default_instances, TableStruct_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto::offsets,
  file_level_metadata_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto, 5, file_level_enum_descriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto, file_level_service_descriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto,
};

const char descriptor_table_protodef_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[] =
  "\n-opencensus/proto/agent/common/v1/commo"
  "n.proto\022 opencensus.proto.agent.common.v"
  "1\032\037google/protobuf/timestamp.proto\"\330\002\n\004N"
  "ode\022G\n\nidentifier\030\001 \001(\01323.opencensus.pro"
  "to.agent.common.v1.ProcessIdentifier\022C\n\014"
  "library_info\030\002 \001(\0132-.opencensus.proto.ag"
  "ent.common.v1.LibraryInfo\022C\n\014service_inf"
  "o\030\003 \001(\0132-.opencensus.proto.agent.common."
  "v1.ServiceInfo\022J\n\nattributes\030\004 \003(\01326.ope"
  "ncensus.proto.agent.common.v1.Node.Attri"
  "butesEntry\0321\n\017AttributesEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"h\n\021ProcessIdentifi"
  "er\022\021\n\thost_name\030\001 \001(\t\022\013\n\003pid\030\002 \001(\r\0223\n\017st"
  "art_timestamp\030\003 \001(\0132\032.google.protobuf.Ti"
  "mestamp\"\247\002\n\013LibraryInfo\022H\n\010language\030\001 \001("
  "\01626.opencensus.proto.agent.common.v1.Lib"
  "raryInfo.Language\022\030\n\020exporter_version\030\002 "
  "\001(\t\022\034\n\024core_library_version\030\003 \001(\t\"\225\001\n\010La"
  "nguage\022\030\n\024LANGUAGE_UNSPECIFIED\020\000\022\007\n\003CPP\020"
  "\001\022\013\n\007C_SHARP\020\002\022\n\n\006ERLANG\020\003\022\013\n\007GO_LANG\020\004\022"
  "\010\n\004JAVA\020\005\022\013\n\007NODE_JS\020\006\022\007\n\003PHP\020\007\022\n\n\006PYTHO"
  "N\020\010\022\010\n\004RUBY\020\t\022\n\n\006WEB_JS\020\n\"\033\n\013ServiceInfo"
  "\022\014\n\004name\030\001 \001(\tB\242\001\n#io.opencensus.proto.a"
  "gent.common.v1B\013CommonProtoP\001ZIgithub.co"
  "m/census-instrumentation/opencensus-prot"
  "o/gen-go/agent/common/v1\352\002 OpenCensus.Pr"
  "oto.Agent.Common.V1b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto = {
  false, InitDefaults_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto, 
  descriptor_table_protodef_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto,
  "opencensus/proto/agent/common/v1/common.proto", &assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto, 1067,
};

void AddDescriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto = []() { AddDescriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto(); return true; }();
namespace opencensus {
namespace proto {
namespace agent {
namespace common {
namespace v1 {
const ::google::protobuf::EnumDescriptor* LibraryInfo_Language_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[0];
}
bool LibraryInfo_Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LibraryInfo_Language LibraryInfo::LANGUAGE_UNSPECIFIED;
const LibraryInfo_Language LibraryInfo::CPP;
const LibraryInfo_Language LibraryInfo::C_SHARP;
const LibraryInfo_Language LibraryInfo::ERLANG;
const LibraryInfo_Language LibraryInfo::GO_LANG;
const LibraryInfo_Language LibraryInfo::JAVA;
const LibraryInfo_Language LibraryInfo::NODE_JS;
const LibraryInfo_Language LibraryInfo::PHP;
const LibraryInfo_Language LibraryInfo::PYTHON;
const LibraryInfo_Language LibraryInfo::RUBY;
const LibraryInfo_Language LibraryInfo::WEB_JS;
const LibraryInfo_Language LibraryInfo::Language_MIN;
const LibraryInfo_Language LibraryInfo::Language_MAX;
const int LibraryInfo::Language_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

Node_AttributesEntry_DoNotUse::Node_AttributesEntry_DoNotUse() {}
Node_AttributesEntry_DoNotUse::Node_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Node_AttributesEntry_DoNotUse::MergeFrom(const Node_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Node_AttributesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[0];
}
void Node_AttributesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Node_AttributesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Node_AttributesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "opencensus.proto.agent.common.v1.Node.AttributesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "opencensus.proto.agent.common.v1.Node.AttributesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::opencensus::proto::agent::common::v1::_Node_default_instance_._instance.get_mutable()->identifier_ = const_cast< ::opencensus::proto::agent::common::v1::ProcessIdentifier*>(
      ::opencensus::proto::agent::common::v1::ProcessIdentifier::internal_default_instance());
  ::opencensus::proto::agent::common::v1::_Node_default_instance_._instance.get_mutable()->library_info_ = const_cast< ::opencensus::proto::agent::common::v1::LibraryInfo*>(
      ::opencensus::proto::agent::common::v1::LibraryInfo::internal_default_instance());
  ::opencensus::proto::agent::common::v1::_Node_default_instance_._instance.get_mutable()->service_info_ = const_cast< ::opencensus::proto::agent::common::v1::ServiceInfo*>(
      ::opencensus::proto::agent::common::v1::ServiceInfo::internal_default_instance());
}
class Node::HasBitSetters {
 public:
  static const ::opencensus::proto::agent::common::v1::ProcessIdentifier& identifier(const Node* msg);
  static const ::opencensus::proto::agent::common::v1::LibraryInfo& library_info(const Node* msg);
  static const ::opencensus::proto::agent::common::v1::ServiceInfo& service_info(const Node* msg);
};

const ::opencensus::proto::agent::common::v1::ProcessIdentifier&
Node::HasBitSetters::identifier(const Node* msg) {
  return *msg->identifier_;
}
const ::opencensus::proto::agent::common::v1::LibraryInfo&
Node::HasBitSetters::library_info(const Node* msg) {
  return *msg->library_info_;
}
const ::opencensus::proto::agent::common::v1::ServiceInfo&
Node::HasBitSetters::service_info(const Node* msg) {
  return *msg->service_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdentifierFieldNumber;
const int Node::kLibraryInfoFieldNumber;
const int Node::kServiceInfoFieldNumber;
const int Node::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.agent.common.v1.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  if (from.has_identifier()) {
    identifier_ = new ::opencensus::proto::agent::common::v1::ProcessIdentifier(*from.identifier_);
  } else {
    identifier_ = nullptr;
  }
  if (from.has_library_info()) {
    library_info_ = new ::opencensus::proto::agent::common::v1::LibraryInfo(*from.library_info_);
  } else {
    library_info_ = nullptr;
  }
  if (from.has_service_info()) {
    service_info_ = new ::opencensus::proto::agent::common::v1::ServiceInfo(*from.service_info_);
  } else {
    service_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.agent.common.v1.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Node_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_info_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(service_info_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:opencensus.proto.agent.common.v1.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) delete identifier_;
  if (this != internal_default_instance()) delete library_info_;
  if (this != internal_default_instance()) delete service_info_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Node_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.agent.common.v1.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  if (GetArenaNoVirtual() == nullptr && identifier_ != nullptr) {
    delete identifier_;
  }
  identifier_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && library_info_ != nullptr) {
    delete library_info_;
  }
  library_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Node::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Node*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::agent::common::v1::ProcessIdentifier::_InternalParse;
        object = msg->mutable_identifier();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::agent::common::v1::LibraryInfo::_InternalParse;
        object = msg->mutable_library_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::agent::common::v1::ServiceInfo::_InternalParse;
        object = msg->mutable_service_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, string> attributes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->attributes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.agent.common.v1.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_library_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_service_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          Node_AttributesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Node_AttributesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.agent.common.v1.Node.AttributesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.agent.common.v1.Node.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.agent.common.v1.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.agent.common.v1.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.agent.common.v1.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;
  if (this->has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::identifier(this), output);
  }

  // .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;
  if (this->has_library_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::library_info(this), output);
  }

  // .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;
  if (this->has_service_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::service_info(this), output);
  }

  // map<string, string> attributes = 4;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opencensus.proto.agent.common.v1.Node.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opencensus.proto.agent.common.v1.Node.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Node_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Node_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.agent.common.v1.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.agent.common.v1.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;
  if (this->has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::identifier(this), target);
  }

  // .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;
  if (this->has_library_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::library_info(this), target);
  }

  // .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;
  if (this->has_service_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::service_info(this), target);
  }

  // map<string, string> attributes = 4;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opencensus.proto.agent.common.v1.Node.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opencensus.proto.agent.common.v1.Node.AttributesEntry.value");
      }
    };

    if (false &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Node_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Node_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.agent.common.v1.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.agent.common.v1.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::std::unique_ptr<Node_AttributesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;
  if (this->has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *identifier_);
  }

  // .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;
  if (this->has_library_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *library_info_);
  }

  // .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;
  if (this->has_service_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *service_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.agent.common.v1.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.agent.common.v1.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.agent.common.v1.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.agent.common.v1.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.has_identifier()) {
    mutable_identifier()->::opencensus::proto::agent::common::v1::ProcessIdentifier::MergeFrom(from.identifier());
  }
  if (from.has_library_info()) {
    mutable_library_info()->::opencensus::proto::agent::common::v1::LibraryInfo::MergeFrom(from.library_info());
  }
  if (from.has_service_info()) {
    mutable_service_info()->::opencensus::proto::agent::common::v1::ServiceInfo::MergeFrom(from.service_info());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.agent.common.v1.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.agent.common.v1.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.Swap(&other->attributes_);
  swap(identifier_, other->identifier_);
  swap(library_info_, other->library_info_);
  swap(service_info_, other->service_info_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProcessIdentifier::InitAsDefaultInstance() {
  ::opencensus::proto::agent::common::v1::_ProcessIdentifier_default_instance_._instance.get_mutable()->start_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class ProcessIdentifier::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& start_timestamp(const ProcessIdentifier* msg);
};

const ::google::protobuf::Timestamp&
ProcessIdentifier::HasBitSetters::start_timestamp(const ProcessIdentifier* msg) {
  return *msg->start_timestamp_;
}
void ProcessIdentifier::clear_start_timestamp() {
  if (GetArenaNoVirtual() == nullptr && start_timestamp_ != nullptr) {
    delete start_timestamp_;
  }
  start_timestamp_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessIdentifier::kHostNameFieldNumber;
const int ProcessIdentifier::kPidFieldNumber;
const int ProcessIdentifier::kStartTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessIdentifier::ProcessIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.agent.common.v1.ProcessIdentifier)
}
ProcessIdentifier::ProcessIdentifier(const ProcessIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_name().size() > 0) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.has_start_timestamp()) {
    start_timestamp_ = new ::google::protobuf::Timestamp(*from.start_timestamp_);
  } else {
    start_timestamp_ = nullptr;
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.agent.common.v1.ProcessIdentifier)
}

void ProcessIdentifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(pid_));
}

ProcessIdentifier::~ProcessIdentifier() {
  // @@protoc_insertion_point(destructor:opencensus.proto.agent.common.v1.ProcessIdentifier)
  SharedDtor();
}

void ProcessIdentifier::SharedDtor() {
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_timestamp_;
}

void ProcessIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessIdentifier& ProcessIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProcessIdentifier_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void ProcessIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && start_timestamp_ != nullptr) {
    delete start_timestamp_;
  }
  start_timestamp_ = nullptr;
  pid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessIdentifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProcessIdentifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string host_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.agent.common.v1.ProcessIdentifier.host_name");
        object = msg->mutable_host_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 pid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_pid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp start_timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_start_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), static_cast<int>(this->host_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.agent.common.v1.ProcessIdentifier.host_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.agent.common.v1.ProcessIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.agent.common.v1.ProcessIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.ProcessIdentifier.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // .google.protobuf.Timestamp start_timestamp = 3;
  if (this->has_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::start_timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.agent.common.v1.ProcessIdentifier)
}

::google::protobuf::uint8* ProcessIdentifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.ProcessIdentifier.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }

  // .google.protobuf.Timestamp start_timestamp = 3;
  if (this->has_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::start_timestamp(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.agent.common.v1.ProcessIdentifier)
  return target;
}

size_t ProcessIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // .google.protobuf.Timestamp start_timestamp = 3;
  if (this->has_start_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_timestamp_);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessIdentifier* source =
      ::google::protobuf::DynamicCastToGenerated<ProcessIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.agent.common.v1.ProcessIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.agent.common.v1.ProcessIdentifier)
    MergeFrom(*source);
  }
}

void ProcessIdentifier::MergeFrom(const ProcessIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.has_start_timestamp()) {
    mutable_start_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.start_timestamp());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
}

void ProcessIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessIdentifier::CopyFrom(const ProcessIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.agent.common.v1.ProcessIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessIdentifier::IsInitialized() const {
  return true;
}

void ProcessIdentifier::Swap(ProcessIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessIdentifier::InternalSwap(ProcessIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_name_.Swap(&other->host_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_timestamp_, other->start_timestamp_);
  swap(pid_, other->pid_);
}

::google::protobuf::Metadata ProcessIdentifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LibraryInfo::InitAsDefaultInstance() {
}
class LibraryInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LibraryInfo::kLanguageFieldNumber;
const int LibraryInfo::kExporterVersionFieldNumber;
const int LibraryInfo::kCoreLibraryVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LibraryInfo::LibraryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.agent.common.v1.LibraryInfo)
}
LibraryInfo::LibraryInfo(const LibraryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exporter_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exporter_version().size() > 0) {
    exporter_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exporter_version_);
  }
  core_library_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.core_library_version().size() > 0) {
    core_library_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.core_library_version_);
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.agent.common.v1.LibraryInfo)
}

void LibraryInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  exporter_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  core_library_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 0;
}

LibraryInfo::~LibraryInfo() {
  // @@protoc_insertion_point(destructor:opencensus.proto.agent.common.v1.LibraryInfo)
  SharedDtor();
}

void LibraryInfo::SharedDtor() {
  exporter_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  core_library_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LibraryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LibraryInfo& LibraryInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LibraryInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void LibraryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.agent.common.v1.LibraryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exporter_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  core_library_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LibraryInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LibraryInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_language(static_cast<::opencensus::proto::agent::common::v1::LibraryInfo_Language>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exporter_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.agent.common.v1.LibraryInfo.exporter_version");
        object = msg->mutable_exporter_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string core_library_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.agent.common.v1.LibraryInfo.core_library_version");
        object = msg->mutable_core_library_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LibraryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.agent.common.v1.LibraryInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_language(static_cast< ::opencensus::proto::agent::common::v1::LibraryInfo_Language >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exporter_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exporter_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exporter_version().data(), static_cast<int>(this->exporter_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.agent.common.v1.LibraryInfo.exporter_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string core_library_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_core_library_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->core_library_version().data(), static_cast<int>(this->core_library_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.agent.common.v1.LibraryInfo.core_library_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.agent.common.v1.LibraryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.agent.common.v1.LibraryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LibraryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.agent.common.v1.LibraryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;
  if (this->language() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->language(), output);
  }

  // string exporter_version = 2;
  if (this->exporter_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exporter_version().data(), static_cast<int>(this->exporter_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.LibraryInfo.exporter_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exporter_version(), output);
  }

  // string core_library_version = 3;
  if (this->core_library_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->core_library_version().data(), static_cast<int>(this->core_library_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.LibraryInfo.core_library_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->core_library_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.agent.common.v1.LibraryInfo)
}

::google::protobuf::uint8* LibraryInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.agent.common.v1.LibraryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;
  if (this->language() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->language(), target);
  }

  // string exporter_version = 2;
  if (this->exporter_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exporter_version().data(), static_cast<int>(this->exporter_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.LibraryInfo.exporter_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exporter_version(), target);
  }

  // string core_library_version = 3;
  if (this->core_library_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->core_library_version().data(), static_cast<int>(this->core_library_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.LibraryInfo.core_library_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->core_library_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.agent.common.v1.LibraryInfo)
  return target;
}

size_t LibraryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.agent.common.v1.LibraryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exporter_version = 2;
  if (this->exporter_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exporter_version());
  }

  // string core_library_version = 3;
  if (this->core_library_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->core_library_version());
  }

  // .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;
  if (this->language() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LibraryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.agent.common.v1.LibraryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LibraryInfo* source =
      ::google::protobuf::DynamicCastToGenerated<LibraryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.agent.common.v1.LibraryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.agent.common.v1.LibraryInfo)
    MergeFrom(*source);
  }
}

void LibraryInfo::MergeFrom(const LibraryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.agent.common.v1.LibraryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exporter_version().size() > 0) {

    exporter_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exporter_version_);
  }
  if (from.core_library_version().size() > 0) {

    core_library_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.core_library_version_);
  }
  if (from.language() != 0) {
    set_language(from.language());
  }
}

void LibraryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.agent.common.v1.LibraryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibraryInfo::CopyFrom(const LibraryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.agent.common.v1.LibraryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryInfo::IsInitialized() const {
  return true;
}

void LibraryInfo::Swap(LibraryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LibraryInfo::InternalSwap(LibraryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exporter_version_.Swap(&other->exporter_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  core_library_version_.Swap(&other->core_library_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(language_, other->language_);
}

::google::protobuf::Metadata LibraryInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServiceInfo::InitAsDefaultInstance() {
}
class ServiceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceInfo::ServiceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.agent.common.v1.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.agent.common.v1.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:opencensus.proto.agent.common.v1.ServiceInfo)
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceInfo& ServiceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ServiceInfo_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.agent.common.v1.ServiceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ServiceInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.agent.common.v1.ServiceInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.agent.common.v1.ServiceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.agent.common.v1.ServiceInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.agent.common.v1.ServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.agent.common.v1.ServiceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.agent.common.v1.ServiceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.ServiceInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.agent.common.v1.ServiceInfo)
}

::google::protobuf::uint8* ServiceInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.agent.common.v1.ServiceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.agent.common.v1.ServiceInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.agent.common.v1.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.agent.common.v1.ServiceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.agent.common.v1.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ServiceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.agent.common.v1.ServiceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.agent.common.v1.ServiceInfo)
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.agent.common.v1.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.agent.common.v1.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.agent.common.v1.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::Swap(ServiceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ServiceInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fagent_2fcommon_2fv1_2fcommon_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace agent
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::agent::common::v1::Node_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::agent::common::v1::Node* Arena::CreateMaybeMessage< ::opencensus::proto::agent::common::v1::Node >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::agent::common::v1::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::agent::common::v1::ProcessIdentifier* Arena::CreateMaybeMessage< ::opencensus::proto::agent::common::v1::ProcessIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::agent::common::v1::ProcessIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::agent::common::v1::LibraryInfo* Arena::CreateMaybeMessage< ::opencensus::proto::agent::common::v1::LibraryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::agent::common::v1::LibraryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::agent::common::v1::ServiceInfo* Arena::CreateMaybeMessage< ::opencensus::proto::agent::common::v1::ServiceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::agent::common::v1::ServiceInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
