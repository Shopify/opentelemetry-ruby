// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/stats/v1/stats.proto

#include "opencensus/proto/stats/v1/stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CountAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DistributionAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LastValueAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SumAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
namespace opencensus {
namespace proto {
namespace stats {
namespace v1 {
class TagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tag> _instance;
} _Tag_default_instance_;
class MeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measure> _instance;
} _Measure_default_instance_;
class ViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<View> _instance;
  const ::opencensus::proto::stats::v1::CountAggregation* count_aggregation_;
  const ::opencensus::proto::stats::v1::SumAggregation* sum_aggregation_;
  const ::opencensus::proto::stats::v1::LastValueAggregation* last_value_aggregation_;
  const ::opencensus::proto::stats::v1::DistributionAggregation* distribution_aggregation_;
} _View_default_instance_;
class CountAggregationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountAggregation> _instance;
} _CountAggregation_default_instance_;
class SumAggregationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SumAggregation> _instance;
} _SumAggregation_default_instance_;
class LastValueAggregationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LastValueAggregation> _instance;
} _LastValueAggregation_default_instance_;
class DistributionAggregationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributionAggregation> _instance;
} _DistributionAggregation_default_instance_;
class MeasurementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measurement> _instance;
  double double_value_;
  ::google::protobuf::int64 int_value_;
} _Measurement_default_instance_;
}  // namespace v1
}  // namespace stats
}  // namespace proto
}  // namespace opencensus
static void InitDefaultsTag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_Tag_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::Tag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::Tag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {}};

static void InitDefaultsMeasure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_Measure_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::Measure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::Measure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Measure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {}};

static void InitDefaultsView_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_View_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::View();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::View::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_View_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsView_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {
      &scc_info_Measure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base,
      &scc_info_CountAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base,
      &scc_info_SumAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base,
      &scc_info_LastValueAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base,
      &scc_info_DistributionAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base,}};

static void InitDefaultsCountAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_CountAggregation_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::CountAggregation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::CountAggregation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CountAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCountAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {}};

static void InitDefaultsSumAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_SumAggregation_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::SumAggregation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::SumAggregation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SumAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSumAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {}};

static void InitDefaultsLastValueAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_LastValueAggregation_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::LastValueAggregation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::LastValueAggregation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LastValueAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLastValueAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {}};

static void InitDefaultsDistributionAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_DistributionAggregation_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::DistributionAggregation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::DistributionAggregation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DistributionAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDistributionAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {}};

static void InitDefaultsMeasurement_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::stats::v1::_Measurement_default_instance_;
    new (ptr) ::opencensus::proto::stats::v1::Measurement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::stats::v1::Measurement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Measurement_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMeasurement_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto}, {
      &scc_info_Tag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

void InitDefaults_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Tag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_View_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CountAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SumAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LastValueAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistributionAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measurement_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Tag, key_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Tag, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measure, name_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measure, description_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measure, unit_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measure, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::View, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::View, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::View, name_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::View, description_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::View, measure_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::View, columns_),
  offsetof(::opencensus::proto::stats::v1::ViewDefaultTypeInternal, count_aggregation_),
  offsetof(::opencensus::proto::stats::v1::ViewDefaultTypeInternal, sum_aggregation_),
  offsetof(::opencensus::proto::stats::v1::ViewDefaultTypeInternal, last_value_aggregation_),
  offsetof(::opencensus::proto::stats::v1::ViewDefaultTypeInternal, distribution_aggregation_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::View, aggregation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::CountAggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::SumAggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::LastValueAggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::DistributionAggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::DistributionAggregation, bucket_bounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measurement, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measurement, tags_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measurement, measure_name_),
  offsetof(::opencensus::proto::stats::v1::MeasurementDefaultTypeInternal, double_value_),
  offsetof(::opencensus::proto::stats::v1::MeasurementDefaultTypeInternal, int_value_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measurement, time_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::stats::v1::Measurement, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opencensus::proto::stats::v1::Tag)},
  { 7, -1, sizeof(::opencensus::proto::stats::v1::Measure)},
  { 16, -1, sizeof(::opencensus::proto::stats::v1::View)},
  { 30, -1, sizeof(::opencensus::proto::stats::v1::CountAggregation)},
  { 35, -1, sizeof(::opencensus::proto::stats::v1::SumAggregation)},
  { 40, -1, sizeof(::opencensus::proto::stats::v1::LastValueAggregation)},
  { 45, -1, sizeof(::opencensus::proto::stats::v1::DistributionAggregation)},
  { 51, -1, sizeof(::opencensus::proto::stats::v1::Measurement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_Measure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_View_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_CountAggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_SumAggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_LastValueAggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_DistributionAggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::stats::v1::_Measurement_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto = {
  {}, AddDescriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto, "opencensus/proto/stats/v1/stats.proto", schemas,
  file_default_instances, TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto::offsets,
  file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto, 8, file_level_enum_descriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto, file_level_service_descriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto,
};

const char descriptor_table_protodef_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[] =
  "\n%opencensus/proto/stats/v1/stats.proto\022"
  "\031opencensus.proto.stats.v1\032\037google/proto"
  "buf/timestamp.proto\"!\n\003Tag\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t\"\246\001\n\007Measure\022\014\n\004name\030\001 \001(\t"
  "\022\023\n\013description\030\002 \001(\t\022\014\n\004unit\030\003 \001(\t\0225\n\004t"
  "ype\030\004 \001(\0162\'.opencensus.proto.stats.v1.Me"
  "asure.Type\"3\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000"
  "\022\t\n\005INT64\020\001\022\n\n\006DOUBLE\020\002\"\271\003\n\004View\022\014\n\004name"
  "\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\0223\n\007measure\030\003"
  " \001(\0132\".opencensus.proto.stats.v1.Measure"
  "\022\017\n\007columns\030\004 \003(\t\022H\n\021count_aggregation\030\005"
  " \001(\0132+.opencensus.proto.stats.v1.CountAg"
  "gregationH\000\022D\n\017sum_aggregation\030\006 \001(\0132).o"
  "pencensus.proto.stats.v1.SumAggregationH"
  "\000\022Q\n\026last_value_aggregation\030\007 \001(\0132/.open"
  "census.proto.stats.v1.LastValueAggregati"
  "onH\000\022V\n\030distribution_aggregation\030\010 \001(\01322"
  ".opencensus.proto.stats.v1.DistributionA"
  "ggregationH\000B\r\n\013aggregation\"\022\n\020CountAggr"
  "egation\"\020\n\016SumAggregation\"\026\n\024LastValueAg"
  "gregation\"0\n\027DistributionAggregation\022\025\n\r"
  "bucket_bounds\030\001 \003(\001\"\261\001\n\013Measurement\022,\n\004t"
  "ags\030\001 \003(\0132\036.opencensus.proto.stats.v1.Ta"
  "g\022\024\n\014measure_name\030\002 \001(\t\022\026\n\014double_value\030"
  "\003 \001(\001H\000\022\023\n\tint_value\030\004 \001(\003H\000\022(\n\004time\030\005 \001"
  "(\0132\032.google.protobuf.TimestampB\007\n\005valueB"
  "\214\001\n\034io.opencensus.proto.stats.v1B\nStatsP"
  "rotoP\001ZBgithub.com/census-instrumentatio"
  "n/opencensus-proto/gen-go/stats/v1\352\002\031Ope"
  "nCensus.Proto.Stats.V1b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto = {
  false, InitDefaults_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto, 
  descriptor_table_protodef_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto,
  "opencensus/proto/stats/v1/stats.proto", &assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto, 1190,
};

void AddDescriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto = []() { AddDescriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto(); return true; }();
namespace opencensus {
namespace proto {
namespace stats {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Measure_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return file_level_enum_descriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[0];
}
bool Measure_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Measure_Type Measure::TYPE_UNSPECIFIED;
const Measure_Type Measure::INT64;
const Measure_Type Measure::DOUBLE;
const Measure_Type Measure::Type_MIN;
const Measure_Type Measure::Type_MAX;
const int Measure::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Tag::InitAsDefaultInstance() {
}
class Tag::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tag::kKeyFieldNumber;
const int Tag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tag::Tag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.Tag)
}
Tag::Tag(const Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.Tag)
}

void Tag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Tag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tag& Tag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Tag_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Tag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.Tag.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.Tag.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.Tag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.Tag.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.Tag.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.Tag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Tag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Tag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.Tag)
}

::google::protobuf::uint8* Tag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Tag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Tag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.Tag)
  return target;
}

size_t Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const Tag* source =
      ::google::protobuf::DynamicCastToGenerated<Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.Tag)
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  return true;
}

void Tag::Swap(Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tag::InternalSwap(Tag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Measure::InitAsDefaultInstance() {
}
class Measure::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measure::kNameFieldNumber;
const int Measure::kDescriptionFieldNumber;
const int Measure::kUnitFieldNumber;
const int Measure::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measure::Measure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.Measure)
}
Measure::Measure(const Measure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unit().size() > 0) {
    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.Measure)
}

void Measure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Measure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Measure::~Measure() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.Measure)
  SharedDtor();
}

void Measure::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Measure& Measure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Measure_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Measure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Measure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.Measure.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.Measure.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string unit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.Measure.unit");
        object = msg->mutable_unit();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .opencensus.proto.stats.v1.Measure.Type type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::opencensus::proto::stats::v1::Measure_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Measure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.Measure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.Measure.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.Measure.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), static_cast<int>(this->unit().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.Measure.unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.stats.v1.Measure.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::opencensus::proto::stats::v1::Measure_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.Measure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.Measure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Measure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measure.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measure.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measure.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unit(), output);
  }

  // .opencensus.proto.stats.v1.Measure.Type type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.Measure)
}

::google::protobuf::uint8* Measure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measure.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measure.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measure.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unit(), target);
  }

  // .opencensus.proto.stats.v1.Measure.Type type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.Measure)
  return target;
}

size_t Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.Measure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // .opencensus.proto.stats.v1.Measure.Type type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  const Measure* source =
      ::google::protobuf::DynamicCastToGenerated<Measure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.Measure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.Measure)
    MergeFrom(*source);
  }
}

void Measure::MergeFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Measure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measure::CopyFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measure::IsInitialized() const {
  return true;
}

void Measure::Swap(Measure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measure::InternalSwap(Measure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata Measure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// ===================================================================

void View::InitAsDefaultInstance() {
  ::opencensus::proto::stats::v1::_View_default_instance_._instance.get_mutable()->measure_ = const_cast< ::opencensus::proto::stats::v1::Measure*>(
      ::opencensus::proto::stats::v1::Measure::internal_default_instance());
  ::opencensus::proto::stats::v1::_View_default_instance_.count_aggregation_ = const_cast< ::opencensus::proto::stats::v1::CountAggregation*>(
      ::opencensus::proto::stats::v1::CountAggregation::internal_default_instance());
  ::opencensus::proto::stats::v1::_View_default_instance_.sum_aggregation_ = const_cast< ::opencensus::proto::stats::v1::SumAggregation*>(
      ::opencensus::proto::stats::v1::SumAggregation::internal_default_instance());
  ::opencensus::proto::stats::v1::_View_default_instance_.last_value_aggregation_ = const_cast< ::opencensus::proto::stats::v1::LastValueAggregation*>(
      ::opencensus::proto::stats::v1::LastValueAggregation::internal_default_instance());
  ::opencensus::proto::stats::v1::_View_default_instance_.distribution_aggregation_ = const_cast< ::opencensus::proto::stats::v1::DistributionAggregation*>(
      ::opencensus::proto::stats::v1::DistributionAggregation::internal_default_instance());
}
class View::HasBitSetters {
 public:
  static const ::opencensus::proto::stats::v1::Measure& measure(const View* msg);
  static const ::opencensus::proto::stats::v1::CountAggregation& count_aggregation(const View* msg);
  static const ::opencensus::proto::stats::v1::SumAggregation& sum_aggregation(const View* msg);
  static const ::opencensus::proto::stats::v1::LastValueAggregation& last_value_aggregation(const View* msg);
  static const ::opencensus::proto::stats::v1::DistributionAggregation& distribution_aggregation(const View* msg);
};

const ::opencensus::proto::stats::v1::Measure&
View::HasBitSetters::measure(const View* msg) {
  return *msg->measure_;
}
const ::opencensus::proto::stats::v1::CountAggregation&
View::HasBitSetters::count_aggregation(const View* msg) {
  return *msg->aggregation_.count_aggregation_;
}
const ::opencensus::proto::stats::v1::SumAggregation&
View::HasBitSetters::sum_aggregation(const View* msg) {
  return *msg->aggregation_.sum_aggregation_;
}
const ::opencensus::proto::stats::v1::LastValueAggregation&
View::HasBitSetters::last_value_aggregation(const View* msg) {
  return *msg->aggregation_.last_value_aggregation_;
}
const ::opencensus::proto::stats::v1::DistributionAggregation&
View::HasBitSetters::distribution_aggregation(const View* msg) {
  return *msg->aggregation_.distribution_aggregation_;
}
void View::set_allocated_count_aggregation(::opencensus::proto::stats::v1::CountAggregation* count_aggregation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_aggregation();
  if (count_aggregation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_aggregation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, count_aggregation, submessage_arena);
    }
    set_has_count_aggregation();
    aggregation_.count_aggregation_ = count_aggregation;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.View.count_aggregation)
}
void View::set_allocated_sum_aggregation(::opencensus::proto::stats::v1::SumAggregation* sum_aggregation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_aggregation();
  if (sum_aggregation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sum_aggregation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sum_aggregation, submessage_arena);
    }
    set_has_sum_aggregation();
    aggregation_.sum_aggregation_ = sum_aggregation;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.View.sum_aggregation)
}
void View::set_allocated_last_value_aggregation(::opencensus::proto::stats::v1::LastValueAggregation* last_value_aggregation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_aggregation();
  if (last_value_aggregation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_value_aggregation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_value_aggregation, submessage_arena);
    }
    set_has_last_value_aggregation();
    aggregation_.last_value_aggregation_ = last_value_aggregation;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.View.last_value_aggregation)
}
void View::set_allocated_distribution_aggregation(::opencensus::proto::stats::v1::DistributionAggregation* distribution_aggregation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_aggregation();
  if (distribution_aggregation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distribution_aggregation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distribution_aggregation, submessage_arena);
    }
    set_has_distribution_aggregation();
    aggregation_.distribution_aggregation_ = distribution_aggregation;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.View.distribution_aggregation)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int View::kNameFieldNumber;
const int View::kDescriptionFieldNumber;
const int View::kMeasureFieldNumber;
const int View::kColumnsFieldNumber;
const int View::kCountAggregationFieldNumber;
const int View::kSumAggregationFieldNumber;
const int View::kLastValueAggregationFieldNumber;
const int View::kDistributionAggregationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

View::View()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.View)
}
View::View(const View& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_measure()) {
    measure_ = new ::opencensus::proto::stats::v1::Measure(*from.measure_);
  } else {
    measure_ = nullptr;
  }
  clear_has_aggregation();
  switch (from.aggregation_case()) {
    case kCountAggregation: {
      mutable_count_aggregation()->::opencensus::proto::stats::v1::CountAggregation::MergeFrom(from.count_aggregation());
      break;
    }
    case kSumAggregation: {
      mutable_sum_aggregation()->::opencensus::proto::stats::v1::SumAggregation::MergeFrom(from.sum_aggregation());
      break;
    }
    case kLastValueAggregation: {
      mutable_last_value_aggregation()->::opencensus::proto::stats::v1::LastValueAggregation::MergeFrom(from.last_value_aggregation());
      break;
    }
    case kDistributionAggregation: {
      mutable_distribution_aggregation()->::opencensus::proto::stats::v1::DistributionAggregation::MergeFrom(from.distribution_aggregation());
      break;
    }
    case AGGREGATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.View)
}

void View::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_View_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measure_ = nullptr;
  clear_has_aggregation();
}

View::~View() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.View)
  SharedDtor();
}

void View::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete measure_;
  if (has_aggregation()) {
    clear_aggregation();
  }
}

void View::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const View& View::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_View_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void View::clear_aggregation() {
// @@protoc_insertion_point(one_of_clear_start:opencensus.proto.stats.v1.View)
  switch (aggregation_case()) {
    case kCountAggregation: {
      delete aggregation_.count_aggregation_;
      break;
    }
    case kSumAggregation: {
      delete aggregation_.sum_aggregation_;
      break;
    }
    case kLastValueAggregation: {
      delete aggregation_.last_value_aggregation_;
      break;
    }
    case kDistributionAggregation: {
      delete aggregation_.distribution_aggregation_;
      break;
    }
    case AGGREGATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AGGREGATION_NOT_SET;
}


void View::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.View)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
  clear_aggregation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* View::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<View*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.View.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.View.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .opencensus.proto.stats.v1.Measure measure = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::stats::v1::Measure::_InternalParse;
        object = msg->mutable_measure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string columns = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.View.columns");
          object = msg->add_columns();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::stats::v1::CountAggregation::_InternalParse;
        object = msg->mutable_count_aggregation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::stats::v1::SumAggregation::_InternalParse;
        object = msg->mutable_sum_aggregation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::stats::v1::LastValueAggregation::_InternalParse;
        object = msg->mutable_last_value_aggregation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::stats::v1::DistributionAggregation::_InternalParse;
        object = msg->mutable_distribution_aggregation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool View::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.View)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.View.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.View.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.stats.v1.Measure measure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string columns = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_columns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->columns(this->columns_size() - 1).data(),
            static_cast<int>(this->columns(this->columns_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.View.columns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_count_aggregation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sum_aggregation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_value_aggregation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distribution_aggregation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.View)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.View)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void View::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.View)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.View.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.View.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // .opencensus.proto.stats.v1.Measure measure = 3;
  if (this->has_measure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::measure(this), output);
  }

  // repeated string columns = 4;
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns(i).data(), static_cast<int>(this->columns(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.View.columns");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->columns(i), output);
  }

  // .opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;
  if (has_count_aggregation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::count_aggregation(this), output);
  }

  // .opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;
  if (has_sum_aggregation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::sum_aggregation(this), output);
  }

  // .opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;
  if (has_last_value_aggregation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::last_value_aggregation(this), output);
  }

  // .opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;
  if (has_distribution_aggregation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::distribution_aggregation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.View)
}

::google::protobuf::uint8* View::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.View)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.View.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.View.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // .opencensus.proto.stats.v1.Measure measure = 3;
  if (this->has_measure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::measure(this), target);
  }

  // repeated string columns = 4;
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns(i).data(), static_cast<int>(this->columns(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.View.columns");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->columns(i), target);
  }

  // .opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;
  if (has_count_aggregation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::count_aggregation(this), target);
  }

  // .opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;
  if (has_sum_aggregation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::sum_aggregation(this), target);
  }

  // .opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;
  if (has_last_value_aggregation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::last_value_aggregation(this), target);
  }

  // .opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;
  if (has_distribution_aggregation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::distribution_aggregation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.View)
  return target;
}

size_t View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.View)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->columns_size());
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->columns(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .opencensus.proto.stats.v1.Measure measure = 3;
  if (this->has_measure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *measure_);
  }

  switch (aggregation_case()) {
    // .opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;
    case kCountAggregation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *aggregation_.count_aggregation_);
      break;
    }
    // .opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;
    case kSumAggregation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *aggregation_.sum_aggregation_);
      break;
    }
    // .opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;
    case kLastValueAggregation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *aggregation_.last_value_aggregation_);
      break;
    }
    // .opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;
    case kDistributionAggregation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *aggregation_.distribution_aggregation_);
      break;
    }
    case AGGREGATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void View::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.View)
  GOOGLE_DCHECK_NE(&from, this);
  const View* source =
      ::google::protobuf::DynamicCastToGenerated<View>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.View)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.View)
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_measure()) {
    mutable_measure()->::opencensus::proto::stats::v1::Measure::MergeFrom(from.measure());
  }
  switch (from.aggregation_case()) {
    case kCountAggregation: {
      mutable_count_aggregation()->::opencensus::proto::stats::v1::CountAggregation::MergeFrom(from.count_aggregation());
      break;
    }
    case kSumAggregation: {
      mutable_sum_aggregation()->::opencensus::proto::stats::v1::SumAggregation::MergeFrom(from.sum_aggregation());
      break;
    }
    case kLastValueAggregation: {
      mutable_last_value_aggregation()->::opencensus::proto::stats::v1::LastValueAggregation::MergeFrom(from.last_value_aggregation());
      break;
    }
    case kDistributionAggregation: {
      mutable_distribution_aggregation()->::opencensus::proto::stats::v1::DistributionAggregation::MergeFrom(from.distribution_aggregation());
      break;
    }
    case AGGREGATION_NOT_SET: {
      break;
    }
  }
}

void View::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {
  return true;
}

void View::Swap(View* other) {
  if (other == this) return;
  InternalSwap(other);
}
void View::InternalSwap(View* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  columns_.InternalSwap(CastToBase(&other->columns_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(measure_, other->measure_);
  swap(aggregation_, other->aggregation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata View::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CountAggregation::InitAsDefaultInstance() {
}
class CountAggregation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountAggregation::CountAggregation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.CountAggregation)
}
CountAggregation::CountAggregation(const CountAggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.CountAggregation)
}

void CountAggregation::SharedCtor() {
}

CountAggregation::~CountAggregation() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.CountAggregation)
  SharedDtor();
}

void CountAggregation::SharedDtor() {
}

void CountAggregation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountAggregation& CountAggregation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CountAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void CountAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.CountAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountAggregation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CountAggregation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountAggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.CountAggregation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.CountAggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.CountAggregation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountAggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.CountAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.CountAggregation)
}

::google::protobuf::uint8* CountAggregation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.CountAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.CountAggregation)
  return target;
}

size_t CountAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.CountAggregation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountAggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.CountAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const CountAggregation* source =
      ::google::protobuf::DynamicCastToGenerated<CountAggregation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.CountAggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.CountAggregation)
    MergeFrom(*source);
  }
}

void CountAggregation::MergeFrom(const CountAggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.CountAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CountAggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.CountAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountAggregation::CopyFrom(const CountAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.CountAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountAggregation::IsInitialized() const {
  return true;
}

void CountAggregation::Swap(CountAggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountAggregation::InternalSwap(CountAggregation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CountAggregation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SumAggregation::InitAsDefaultInstance() {
}
class SumAggregation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SumAggregation::SumAggregation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.SumAggregation)
}
SumAggregation::SumAggregation(const SumAggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.SumAggregation)
}

void SumAggregation::SharedCtor() {
}

SumAggregation::~SumAggregation() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.SumAggregation)
  SharedDtor();
}

void SumAggregation::SharedDtor() {
}

void SumAggregation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SumAggregation& SumAggregation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SumAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void SumAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.SumAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SumAggregation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SumAggregation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SumAggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.SumAggregation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.SumAggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.SumAggregation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SumAggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.SumAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.SumAggregation)
}

::google::protobuf::uint8* SumAggregation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.SumAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.SumAggregation)
  return target;
}

size_t SumAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.SumAggregation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SumAggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.SumAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const SumAggregation* source =
      ::google::protobuf::DynamicCastToGenerated<SumAggregation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.SumAggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.SumAggregation)
    MergeFrom(*source);
  }
}

void SumAggregation::MergeFrom(const SumAggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.SumAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SumAggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.SumAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SumAggregation::CopyFrom(const SumAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.SumAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumAggregation::IsInitialized() const {
  return true;
}

void SumAggregation::Swap(SumAggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SumAggregation::InternalSwap(SumAggregation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SumAggregation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LastValueAggregation::InitAsDefaultInstance() {
}
class LastValueAggregation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastValueAggregation::LastValueAggregation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.LastValueAggregation)
}
LastValueAggregation::LastValueAggregation(const LastValueAggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.LastValueAggregation)
}

void LastValueAggregation::SharedCtor() {
}

LastValueAggregation::~LastValueAggregation() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.LastValueAggregation)
  SharedDtor();
}

void LastValueAggregation::SharedDtor() {
}

void LastValueAggregation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastValueAggregation& LastValueAggregation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LastValueAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void LastValueAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.LastValueAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LastValueAggregation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LastValueAggregation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LastValueAggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.LastValueAggregation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.LastValueAggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.LastValueAggregation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LastValueAggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.LastValueAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.LastValueAggregation)
}

::google::protobuf::uint8* LastValueAggregation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.LastValueAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.LastValueAggregation)
  return target;
}

size_t LastValueAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.LastValueAggregation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastValueAggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.LastValueAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const LastValueAggregation* source =
      ::google::protobuf::DynamicCastToGenerated<LastValueAggregation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.LastValueAggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.LastValueAggregation)
    MergeFrom(*source);
  }
}

void LastValueAggregation::MergeFrom(const LastValueAggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.LastValueAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LastValueAggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.LastValueAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastValueAggregation::CopyFrom(const LastValueAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.LastValueAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastValueAggregation::IsInitialized() const {
  return true;
}

void LastValueAggregation::Swap(LastValueAggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastValueAggregation::InternalSwap(LastValueAggregation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LastValueAggregation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DistributionAggregation::InitAsDefaultInstance() {
}
class DistributionAggregation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistributionAggregation::kBucketBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistributionAggregation::DistributionAggregation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.DistributionAggregation)
}
DistributionAggregation::DistributionAggregation(const DistributionAggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bucket_bounds_(from.bucket_bounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.DistributionAggregation)
}

void DistributionAggregation::SharedCtor() {
}

DistributionAggregation::~DistributionAggregation() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.DistributionAggregation)
  SharedDtor();
}

void DistributionAggregation::SharedDtor() {
}

void DistributionAggregation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistributionAggregation& DistributionAggregation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistributionAggregation_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void DistributionAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.DistributionAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_bounds_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistributionAggregation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistributionAggregation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated double bucket_bounds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_bucket_bounds();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        do {
          msg->add_bucket_bounds(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistributionAggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.DistributionAggregation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double bucket_bounds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bucket_bounds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_bucket_bounds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.DistributionAggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.DistributionAggregation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistributionAggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.DistributionAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bucket_bounds = 1;
  if (this->bucket_bounds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bucket_bounds_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->bucket_bounds().data(), this->bucket_bounds_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.DistributionAggregation)
}

::google::protobuf::uint8* DistributionAggregation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.DistributionAggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bucket_bounds = 1;
  if (this->bucket_bounds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _bucket_bounds_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bucket_bounds_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.DistributionAggregation)
  return target;
}

size_t DistributionAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.DistributionAggregation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bucket_bounds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _bucket_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributionAggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.DistributionAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributionAggregation* source =
      ::google::protobuf::DynamicCastToGenerated<DistributionAggregation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.DistributionAggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.DistributionAggregation)
    MergeFrom(*source);
  }
}

void DistributionAggregation::MergeFrom(const DistributionAggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.DistributionAggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_bounds_.MergeFrom(from.bucket_bounds_);
}

void DistributionAggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.DistributionAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributionAggregation::CopyFrom(const DistributionAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.DistributionAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributionAggregation::IsInitialized() const {
  return true;
}

void DistributionAggregation::Swap(DistributionAggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistributionAggregation::InternalSwap(DistributionAggregation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bucket_bounds_.InternalSwap(&other->bucket_bounds_);
}

::google::protobuf::Metadata DistributionAggregation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Measurement::InitAsDefaultInstance() {
  ::opencensus::proto::stats::v1::_Measurement_default_instance_.double_value_ = 0;
  ::opencensus::proto::stats::v1::_Measurement_default_instance_.int_value_ = PROTOBUF_LONGLONG(0);
  ::opencensus::proto::stats::v1::_Measurement_default_instance_._instance.get_mutable()->time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Measurement::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& time(const Measurement* msg);
};

const ::google::protobuf::Timestamp&
Measurement::HasBitSetters::time(const Measurement* msg) {
  return *msg->time_;
}
void Measurement::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurement::kTagsFieldNumber;
const int Measurement::kMeasureNameFieldNumber;
const int Measurement::kDoubleValueFieldNumber;
const int Measurement::kIntValueFieldNumber;
const int Measurement::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurement::Measurement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.stats.v1.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  measure_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.measure_name().size() > 0) {
    measure_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.measure_name_);
  }
  if (from.has_time()) {
    time_ = new ::google::protobuf::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.stats.v1.Measurement)
}

void Measurement::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Measurement_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  measure_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = nullptr;
  clear_has_value();
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:opencensus.proto.stats.v1.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
  measure_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (has_value()) {
    clear_value();
  }
}

void Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Measurement& Measurement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Measurement_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto.base);
  return *internal_default_instance();
}


void Measurement::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opencensus.proto.stats.v1.Measurement)
  switch (value_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.stats.v1.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  measure_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Measurement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Measurement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .opencensus.proto.stats.v1.Tag tags = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::opencensus::proto::stats::v1::Tag::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string measure_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.stats.v1.Measurement.measure_name");
        object = msg->mutable_measure_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double double_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_double_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 int_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_int_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.stats.v1.Measurement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opencensus.proto.stats.v1.Tag tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string measure_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_measure_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->measure_name().data(), static_cast<int>(this->measure_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.stats.v1.Measurement.measure_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.stats.v1.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.stats.v1.Measurement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.stats.v1.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.stats.v1.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tags(static_cast<int>(i)),
      output);
  }

  // string measure_name = 2;
  if (this->measure_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->measure_name().data(), static_cast<int>(this->measure_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measurement.measure_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->measure_name(), output);
  }

  // double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }

  // int64 int_value = 4;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int_value(), output);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.stats.v1.Measurement)
}

::google::protobuf::uint8* Measurement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.stats.v1.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.stats.v1.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tags(static_cast<int>(i)), target);
  }

  // string measure_name = 2;
  if (this->measure_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->measure_name().data(), static_cast<int>(this->measure_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.stats.v1.Measurement.measure_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->measure_name(), target);
  }

  // double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }

  // int64 int_value = 4;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int_value(), target);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.stats.v1.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.stats.v1.Measurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencensus.proto.stats.v1.Tag tags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // string measure_name = 2;
  if (this->measure_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->measure_name());
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  switch (value_case()) {
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // int64 int_value = 4;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.stats.v1.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurement* source =
      ::google::protobuf::DynamicCastToGenerated<Measurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.stats.v1.Measurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.stats.v1.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.stats.v1.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.measure_name().size() > 0) {

    measure_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.measure_name_);
  }
  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
  switch (from.value_case()) {
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.stats.v1.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.stats.v1.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  measure_name_.Swap(&other->measure_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace stats
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::Tag* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::Tag >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::Measure* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::Measure >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::Measure >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::View* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::View >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::View >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::CountAggregation* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::CountAggregation >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::CountAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::SumAggregation* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::SumAggregation >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::SumAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::LastValueAggregation* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::LastValueAggregation >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::LastValueAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::DistributionAggregation* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::DistributionAggregation >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::DistributionAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::stats::v1::Measurement* Arena::CreateMaybeMessage< ::opencensus::proto::stats::v1::Measurement >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::stats::v1::Measurement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
