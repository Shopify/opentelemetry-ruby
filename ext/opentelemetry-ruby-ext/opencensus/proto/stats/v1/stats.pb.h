// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/stats/v1/stats.proto

#ifndef PROTOBUF_INCLUDED_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto
#define PROTOBUF_INCLUDED_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto();
namespace opencensus {
namespace proto {
namespace stats {
namespace v1 {
class CountAggregation;
class CountAggregationDefaultTypeInternal;
extern CountAggregationDefaultTypeInternal _CountAggregation_default_instance_;
class DistributionAggregation;
class DistributionAggregationDefaultTypeInternal;
extern DistributionAggregationDefaultTypeInternal _DistributionAggregation_default_instance_;
class LastValueAggregation;
class LastValueAggregationDefaultTypeInternal;
extern LastValueAggregationDefaultTypeInternal _LastValueAggregation_default_instance_;
class Measure;
class MeasureDefaultTypeInternal;
extern MeasureDefaultTypeInternal _Measure_default_instance_;
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class SumAggregation;
class SumAggregationDefaultTypeInternal;
extern SumAggregationDefaultTypeInternal _SumAggregation_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class View;
class ViewDefaultTypeInternal;
extern ViewDefaultTypeInternal _View_default_instance_;
}  // namespace v1
}  // namespace stats
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> ::opencensus::proto::stats::v1::CountAggregation* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::CountAggregation>(Arena*);
template<> ::opencensus::proto::stats::v1::DistributionAggregation* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::DistributionAggregation>(Arena*);
template<> ::opencensus::proto::stats::v1::LastValueAggregation* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::LastValueAggregation>(Arena*);
template<> ::opencensus::proto::stats::v1::Measure* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::Measure>(Arena*);
template<> ::opencensus::proto::stats::v1::Measurement* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::Measurement>(Arena*);
template<> ::opencensus::proto::stats::v1::SumAggregation* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::SumAggregation>(Arena*);
template<> ::opencensus::proto::stats::v1::Tag* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::Tag>(Arena*);
template<> ::opencensus::proto::stats::v1::View* Arena::CreateMaybeMessage<::opencensus::proto::stats::v1::View>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace opencensus {
namespace proto {
namespace stats {
namespace v1 {

enum Measure_Type {
  Measure_Type_TYPE_UNSPECIFIED = 0,
  Measure_Type_INT64 = 1,
  Measure_Type_DOUBLE = 2,
  Measure_Type_Measure_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Measure_Type_Measure_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Measure_Type_IsValid(int value);
const Measure_Type Measure_Type_Type_MIN = Measure_Type_TYPE_UNSPECIFIED;
const Measure_Type Measure_Type_Type_MAX = Measure_Type_DOUBLE;
const int Measure_Type_Type_ARRAYSIZE = Measure_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Measure_Type_descriptor();
inline const ::std::string& Measure_Type_Name(Measure_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Measure_Type_descriptor(), value);
}
inline bool Measure_Type_Parse(
    const ::std::string& name, Measure_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Measure_Type>(
    Measure_Type_descriptor(), name, value);
}
// ===================================================================

class Tag :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Tag* other);
  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.Tag)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// -------------------------------------------------------------------

class Measure :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.Measure) */ {
 public:
  Measure();
  virtual ~Measure();

  Measure(const Measure& from);

  inline Measure& operator=(const Measure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measure(Measure&& from) noexcept
    : Measure() {
    *this = ::std::move(from);
  }

  inline Measure& operator=(Measure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Measure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measure* internal_default_instance() {
    return reinterpret_cast<const Measure*>(
               &_Measure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Measure* other);
  friend void swap(Measure& a, Measure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measure* New() const final {
    return CreateMaybeMessage<Measure>(nullptr);
  }

  Measure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Measure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Measure& from);
  void MergeFrom(const Measure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Measure_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Measure_Type_TYPE_UNSPECIFIED;
  static const Type INT64 =
    Measure_Type_INT64;
  static const Type DOUBLE =
    Measure_Type_DOUBLE;
  static inline bool Type_IsValid(int value) {
    return Measure_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Measure_Type_Type_MIN;
  static const Type Type_MAX =
    Measure_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Measure_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Measure_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Measure_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Measure_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string unit = 3;
  void clear_unit();
  static const int kUnitFieldNumber = 3;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // .opencensus.proto.stats.v1.Measure.Type type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::opencensus::proto::stats::v1::Measure_Type type() const;
  void set_type(::opencensus::proto::stats::v1::Measure_Type value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.Measure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// -------------------------------------------------------------------

class View :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.View) */ {
 public:
  View();
  virtual ~View();

  View(const View& from);

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  View(View&& from) noexcept
    : View() {
    *this = ::std::move(from);
  }

  inline View& operator=(View&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const View& default_instance();

  enum AggregationCase {
    kCountAggregation = 5,
    kSumAggregation = 6,
    kLastValueAggregation = 7,
    kDistributionAggregation = 8,
    AGGREGATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const View* internal_default_instance() {
    return reinterpret_cast<const View*>(
               &_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(View* other);
  friend void swap(View& a, View& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline View* New() const final {
    return CreateMaybeMessage<View>(nullptr);
  }

  View* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<View>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(View* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string columns = 4;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 4;
  const ::std::string& columns(int index) const;
  ::std::string* mutable_columns(int index);
  void set_columns(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_columns(int index, ::std::string&& value);
  #endif
  void set_columns(int index, const char* value);
  void set_columns(int index, const char* value, size_t size);
  ::std::string* add_columns();
  void add_columns(const ::std::string& value);
  #if LANG_CXX11
  void add_columns(::std::string&& value);
  #endif
  void add_columns(const char* value);
  void add_columns(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& columns() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_columns();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .opencensus.proto.stats.v1.Measure measure = 3;
  bool has_measure() const;
  void clear_measure();
  static const int kMeasureFieldNumber = 3;
  const ::opencensus::proto::stats::v1::Measure& measure() const;
  ::opencensus::proto::stats::v1::Measure* release_measure();
  ::opencensus::proto::stats::v1::Measure* mutable_measure();
  void set_allocated_measure(::opencensus::proto::stats::v1::Measure* measure);

  // .opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;
  bool has_count_aggregation() const;
  void clear_count_aggregation();
  static const int kCountAggregationFieldNumber = 5;
  const ::opencensus::proto::stats::v1::CountAggregation& count_aggregation() const;
  ::opencensus::proto::stats::v1::CountAggregation* release_count_aggregation();
  ::opencensus::proto::stats::v1::CountAggregation* mutable_count_aggregation();
  void set_allocated_count_aggregation(::opencensus::proto::stats::v1::CountAggregation* count_aggregation);

  // .opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;
  bool has_sum_aggregation() const;
  void clear_sum_aggregation();
  static const int kSumAggregationFieldNumber = 6;
  const ::opencensus::proto::stats::v1::SumAggregation& sum_aggregation() const;
  ::opencensus::proto::stats::v1::SumAggregation* release_sum_aggregation();
  ::opencensus::proto::stats::v1::SumAggregation* mutable_sum_aggregation();
  void set_allocated_sum_aggregation(::opencensus::proto::stats::v1::SumAggregation* sum_aggregation);

  // .opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;
  bool has_last_value_aggregation() const;
  void clear_last_value_aggregation();
  static const int kLastValueAggregationFieldNumber = 7;
  const ::opencensus::proto::stats::v1::LastValueAggregation& last_value_aggregation() const;
  ::opencensus::proto::stats::v1::LastValueAggregation* release_last_value_aggregation();
  ::opencensus::proto::stats::v1::LastValueAggregation* mutable_last_value_aggregation();
  void set_allocated_last_value_aggregation(::opencensus::proto::stats::v1::LastValueAggregation* last_value_aggregation);

  // .opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;
  bool has_distribution_aggregation() const;
  void clear_distribution_aggregation();
  static const int kDistributionAggregationFieldNumber = 8;
  const ::opencensus::proto::stats::v1::DistributionAggregation& distribution_aggregation() const;
  ::opencensus::proto::stats::v1::DistributionAggregation* release_distribution_aggregation();
  ::opencensus::proto::stats::v1::DistributionAggregation* mutable_distribution_aggregation();
  void set_allocated_distribution_aggregation(::opencensus::proto::stats::v1::DistributionAggregation* distribution_aggregation);

  void clear_aggregation();
  AggregationCase aggregation_case() const;
  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.View)
 private:
  class HasBitSetters;
  void set_has_count_aggregation();
  void set_has_sum_aggregation();
  void set_has_last_value_aggregation();
  void set_has_distribution_aggregation();

  inline bool has_aggregation() const;
  inline void clear_has_aggregation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> columns_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::opencensus::proto::stats::v1::Measure* measure_;
  union AggregationUnion {
    AggregationUnion() {}
    ::opencensus::proto::stats::v1::CountAggregation* count_aggregation_;
    ::opencensus::proto::stats::v1::SumAggregation* sum_aggregation_;
    ::opencensus::proto::stats::v1::LastValueAggregation* last_value_aggregation_;
    ::opencensus::proto::stats::v1::DistributionAggregation* distribution_aggregation_;
  } aggregation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// -------------------------------------------------------------------

class CountAggregation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.CountAggregation) */ {
 public:
  CountAggregation();
  virtual ~CountAggregation();

  CountAggregation(const CountAggregation& from);

  inline CountAggregation& operator=(const CountAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountAggregation(CountAggregation&& from) noexcept
    : CountAggregation() {
    *this = ::std::move(from);
  }

  inline CountAggregation& operator=(CountAggregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CountAggregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountAggregation* internal_default_instance() {
    return reinterpret_cast<const CountAggregation*>(
               &_CountAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CountAggregation* other);
  friend void swap(CountAggregation& a, CountAggregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountAggregation* New() const final {
    return CreateMaybeMessage<CountAggregation>(nullptr);
  }

  CountAggregation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CountAggregation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CountAggregation& from);
  void MergeFrom(const CountAggregation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountAggregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.CountAggregation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// -------------------------------------------------------------------

class SumAggregation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.SumAggregation) */ {
 public:
  SumAggregation();
  virtual ~SumAggregation();

  SumAggregation(const SumAggregation& from);

  inline SumAggregation& operator=(const SumAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SumAggregation(SumAggregation&& from) noexcept
    : SumAggregation() {
    *this = ::std::move(from);
  }

  inline SumAggregation& operator=(SumAggregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SumAggregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SumAggregation* internal_default_instance() {
    return reinterpret_cast<const SumAggregation*>(
               &_SumAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SumAggregation* other);
  friend void swap(SumAggregation& a, SumAggregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SumAggregation* New() const final {
    return CreateMaybeMessage<SumAggregation>(nullptr);
  }

  SumAggregation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SumAggregation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SumAggregation& from);
  void MergeFrom(const SumAggregation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SumAggregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.SumAggregation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// -------------------------------------------------------------------

class LastValueAggregation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.LastValueAggregation) */ {
 public:
  LastValueAggregation();
  virtual ~LastValueAggregation();

  LastValueAggregation(const LastValueAggregation& from);

  inline LastValueAggregation& operator=(const LastValueAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastValueAggregation(LastValueAggregation&& from) noexcept
    : LastValueAggregation() {
    *this = ::std::move(from);
  }

  inline LastValueAggregation& operator=(LastValueAggregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LastValueAggregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastValueAggregation* internal_default_instance() {
    return reinterpret_cast<const LastValueAggregation*>(
               &_LastValueAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LastValueAggregation* other);
  friend void swap(LastValueAggregation& a, LastValueAggregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastValueAggregation* New() const final {
    return CreateMaybeMessage<LastValueAggregation>(nullptr);
  }

  LastValueAggregation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LastValueAggregation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LastValueAggregation& from);
  void MergeFrom(const LastValueAggregation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastValueAggregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.LastValueAggregation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// -------------------------------------------------------------------

class DistributionAggregation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.DistributionAggregation) */ {
 public:
  DistributionAggregation();
  virtual ~DistributionAggregation();

  DistributionAggregation(const DistributionAggregation& from);

  inline DistributionAggregation& operator=(const DistributionAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistributionAggregation(DistributionAggregation&& from) noexcept
    : DistributionAggregation() {
    *this = ::std::move(from);
  }

  inline DistributionAggregation& operator=(DistributionAggregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DistributionAggregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistributionAggregation* internal_default_instance() {
    return reinterpret_cast<const DistributionAggregation*>(
               &_DistributionAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DistributionAggregation* other);
  friend void swap(DistributionAggregation& a, DistributionAggregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistributionAggregation* New() const final {
    return CreateMaybeMessage<DistributionAggregation>(nullptr);
  }

  DistributionAggregation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistributionAggregation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistributionAggregation& from);
  void MergeFrom(const DistributionAggregation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributionAggregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double bucket_bounds = 1;
  int bucket_bounds_size() const;
  void clear_bucket_bounds();
  static const int kBucketBoundsFieldNumber = 1;
  double bucket_bounds(int index) const;
  void set_bucket_bounds(int index, double value);
  void add_bucket_bounds(double value);
  const ::google::protobuf::RepeatedField< double >&
      bucket_bounds() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bucket_bounds();

  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.DistributionAggregation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > bucket_bounds_;
  mutable std::atomic<int> _bucket_bounds_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// -------------------------------------------------------------------

class Measurement :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.stats.v1.Measurement) */ {
 public:
  Measurement();
  virtual ~Measurement();

  Measurement(const Measurement& from);

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(Measurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Measurement& default_instance();

  enum ValueCase {
    kDoubleValue = 3,
    kIntValue = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Measurement* other);
  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const final {
    return CreateMaybeMessage<Measurement>(nullptr);
  }

  Measurement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Measurement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Measurement& from);
  void MergeFrom(const Measurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opencensus.proto.stats.v1.Tag tags = 1;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 1;
  ::opencensus::proto::stats::v1::Tag* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::stats::v1::Tag >*
      mutable_tags();
  const ::opencensus::proto::stats::v1::Tag& tags(int index) const;
  ::opencensus::proto::stats::v1::Tag* add_tags();
  const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::stats::v1::Tag >&
      tags() const;

  // string measure_name = 2;
  void clear_measure_name();
  static const int kMeasureNameFieldNumber = 2;
  const ::std::string& measure_name() const;
  void set_measure_name(const ::std::string& value);
  #if LANG_CXX11
  void set_measure_name(::std::string&& value);
  #endif
  void set_measure_name(const char* value);
  void set_measure_name(const char* value, size_t size);
  ::std::string* mutable_measure_name();
  ::std::string* release_measure_name();
  void set_allocated_measure_name(::std::string* measure_name);

  // .google.protobuf.Timestamp time = 5;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // double double_value = 3;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  double double_value() const;
  void set_double_value(double value);

  // int64 int_value = 4;
  private:
  bool has_int_value() const;
  public:
  void clear_int_value();
  static const int kIntValueFieldNumber = 4;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.Measurement)
 private:
  class HasBitSetters;
  void set_has_double_value();
  void set_has_int_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::stats::v1::Tag > tags_;
  ::google::protobuf::internal::ArenaStringPtr measure_name_;
  ::google::protobuf::Timestamp* time_;
  union ValueUnion {
    ValueUnion() {}
    double double_value_;
    ::google::protobuf::int64 int_value_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tag

// string key = 1;
inline void Tag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::key() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Tag.key)
  return key_.GetNoArena();
}
inline void Tag::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Tag.key)
}
#if LANG_CXX11
inline void Tag::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.Tag.key)
}
#endif
inline void Tag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.Tag.key)
}
inline void Tag::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.Tag.key)
}
inline ::std::string* Tag::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Tag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_key() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.Tag.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.Tag.key)
}

// string value = 2;
inline void Tag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Tag.value)
  return value_.GetNoArena();
}
inline void Tag::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Tag.value)
}
#if LANG_CXX11
inline void Tag::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.Tag.value)
}
#endif
inline void Tag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.Tag.value)
}
inline void Tag::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.Tag.value)
}
inline ::std::string* Tag::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Tag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_value() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.Tag.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.Tag.value)
}

// -------------------------------------------------------------------

// Measure

// string name = 1;
inline void Measure::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measure::name() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measure.name)
  return name_.GetNoArena();
}
inline void Measure::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Measure.name)
}
#if LANG_CXX11
inline void Measure::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.Measure.name)
}
#endif
inline void Measure::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.Measure.name)
}
inline void Measure::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.Measure.name)
}
inline ::std::string* Measure::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Measure.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measure::release_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.Measure.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.Measure.name)
}

// string description = 2;
inline void Measure::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measure::description() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measure.description)
  return description_.GetNoArena();
}
inline void Measure::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Measure.description)
}
#if LANG_CXX11
inline void Measure::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.Measure.description)
}
#endif
inline void Measure::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.Measure.description)
}
inline void Measure::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.Measure.description)
}
inline ::std::string* Measure::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Measure.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measure::release_description() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.Measure.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.Measure.description)
}

// string unit = 3;
inline void Measure::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measure::unit() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measure.unit)
  return unit_.GetNoArena();
}
inline void Measure::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Measure.unit)
}
#if LANG_CXX11
inline void Measure::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.Measure.unit)
}
#endif
inline void Measure::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.Measure.unit)
}
inline void Measure::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.Measure.unit)
}
inline ::std::string* Measure::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Measure.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measure::release_unit() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.Measure.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_unit(::std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.Measure.unit)
}

// .opencensus.proto.stats.v1.Measure.Type type = 4;
inline void Measure::clear_type() {
  type_ = 0;
}
inline ::opencensus::proto::stats::v1::Measure_Type Measure::type() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measure.type)
  return static_cast< ::opencensus::proto::stats::v1::Measure_Type >(type_);
}
inline void Measure::set_type(::opencensus::proto::stats::v1::Measure_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Measure.type)
}

// -------------------------------------------------------------------

// View

// string name = 1;
inline void View::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& View::name() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.name)
  return name_.GetNoArena();
}
inline void View::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.View.name)
}
#if LANG_CXX11
inline void View::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.View.name)
}
#endif
inline void View::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.View.name)
}
inline void View::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.View.name)
}
inline ::std::string* View::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* View::release_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.View.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void View::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.View.name)
}

// string description = 2;
inline void View::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& View::description() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.description)
  return description_.GetNoArena();
}
inline void View::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.View.description)
}
#if LANG_CXX11
inline void View::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.View.description)
}
#endif
inline void View::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.View.description)
}
inline void View::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.View.description)
}
inline ::std::string* View::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* View::release_description() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.View.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void View::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.View.description)
}

// .opencensus.proto.stats.v1.Measure measure = 3;
inline bool View::has_measure() const {
  return this != internal_default_instance() && measure_ != nullptr;
}
inline void View::clear_measure() {
  if (GetArenaNoVirtual() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
}
inline const ::opencensus::proto::stats::v1::Measure& View::measure() const {
  const ::opencensus::proto::stats::v1::Measure* p = measure_;
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.measure)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::stats::v1::Measure*>(
      &::opencensus::proto::stats::v1::_Measure_default_instance_);
}
inline ::opencensus::proto::stats::v1::Measure* View::release_measure() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.View.measure)
  
  ::opencensus::proto::stats::v1::Measure* temp = measure_;
  measure_ = nullptr;
  return temp;
}
inline ::opencensus::proto::stats::v1::Measure* View::mutable_measure() {
  
  if (measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::stats::v1::Measure>(GetArenaNoVirtual());
    measure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.measure)
  return measure_;
}
inline void View::set_allocated_measure(::opencensus::proto::stats::v1::Measure* measure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete measure_;
  }
  if (measure) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      measure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    
  } else {
    
  }
  measure_ = measure;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.View.measure)
}

// repeated string columns = 4;
inline int View::columns_size() const {
  return columns_.size();
}
inline void View::clear_columns() {
  columns_.Clear();
}
inline const ::std::string& View::columns(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.columns)
  return columns_.Get(index);
}
inline ::std::string* View::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.columns)
  return columns_.Mutable(index);
}
inline void View::set_columns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.View.columns)
  columns_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void View::set_columns(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.View.columns)
  columns_.Mutable(index)->assign(std::move(value));
}
#endif
inline void View::set_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.View.columns)
}
inline void View::set_columns(int index, const char* value, size_t size) {
  columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.View.columns)
}
inline ::std::string* View::add_columns() {
  // @@protoc_insertion_point(field_add_mutable:opencensus.proto.stats.v1.View.columns)
  return columns_.Add();
}
inline void View::add_columns(const ::std::string& value) {
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencensus.proto.stats.v1.View.columns)
}
#if LANG_CXX11
inline void View::add_columns(::std::string&& value) {
  columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencensus.proto.stats.v1.View.columns)
}
#endif
inline void View::add_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencensus.proto.stats.v1.View.columns)
}
inline void View::add_columns(const char* value, size_t size) {
  columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencensus.proto.stats.v1.View.columns)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
View::columns() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.stats.v1.View.columns)
  return columns_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
View::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.stats.v1.View.columns)
  return &columns_;
}

// .opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;
inline bool View::has_count_aggregation() const {
  return aggregation_case() == kCountAggregation;
}
inline void View::set_has_count_aggregation() {
  _oneof_case_[0] = kCountAggregation;
}
inline void View::clear_count_aggregation() {
  if (has_count_aggregation()) {
    delete aggregation_.count_aggregation_;
    clear_has_aggregation();
  }
}
inline ::opencensus::proto::stats::v1::CountAggregation* View::release_count_aggregation() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.View.count_aggregation)
  if (has_count_aggregation()) {
    clear_has_aggregation();
      ::opencensus::proto::stats::v1::CountAggregation* temp = aggregation_.count_aggregation_;
    aggregation_.count_aggregation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::stats::v1::CountAggregation& View::count_aggregation() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.count_aggregation)
  return has_count_aggregation()
      ? *aggregation_.count_aggregation_
      : *reinterpret_cast< ::opencensus::proto::stats::v1::CountAggregation*>(&::opencensus::proto::stats::v1::_CountAggregation_default_instance_);
}
inline ::opencensus::proto::stats::v1::CountAggregation* View::mutable_count_aggregation() {
  if (!has_count_aggregation()) {
    clear_aggregation();
    set_has_count_aggregation();
    aggregation_.count_aggregation_ = CreateMaybeMessage< ::opencensus::proto::stats::v1::CountAggregation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.count_aggregation)
  return aggregation_.count_aggregation_;
}

// .opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;
inline bool View::has_sum_aggregation() const {
  return aggregation_case() == kSumAggregation;
}
inline void View::set_has_sum_aggregation() {
  _oneof_case_[0] = kSumAggregation;
}
inline void View::clear_sum_aggregation() {
  if (has_sum_aggregation()) {
    delete aggregation_.sum_aggregation_;
    clear_has_aggregation();
  }
}
inline ::opencensus::proto::stats::v1::SumAggregation* View::release_sum_aggregation() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.View.sum_aggregation)
  if (has_sum_aggregation()) {
    clear_has_aggregation();
      ::opencensus::proto::stats::v1::SumAggregation* temp = aggregation_.sum_aggregation_;
    aggregation_.sum_aggregation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::stats::v1::SumAggregation& View::sum_aggregation() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.sum_aggregation)
  return has_sum_aggregation()
      ? *aggregation_.sum_aggregation_
      : *reinterpret_cast< ::opencensus::proto::stats::v1::SumAggregation*>(&::opencensus::proto::stats::v1::_SumAggregation_default_instance_);
}
inline ::opencensus::proto::stats::v1::SumAggregation* View::mutable_sum_aggregation() {
  if (!has_sum_aggregation()) {
    clear_aggregation();
    set_has_sum_aggregation();
    aggregation_.sum_aggregation_ = CreateMaybeMessage< ::opencensus::proto::stats::v1::SumAggregation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.sum_aggregation)
  return aggregation_.sum_aggregation_;
}

// .opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;
inline bool View::has_last_value_aggregation() const {
  return aggregation_case() == kLastValueAggregation;
}
inline void View::set_has_last_value_aggregation() {
  _oneof_case_[0] = kLastValueAggregation;
}
inline void View::clear_last_value_aggregation() {
  if (has_last_value_aggregation()) {
    delete aggregation_.last_value_aggregation_;
    clear_has_aggregation();
  }
}
inline ::opencensus::proto::stats::v1::LastValueAggregation* View::release_last_value_aggregation() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.View.last_value_aggregation)
  if (has_last_value_aggregation()) {
    clear_has_aggregation();
      ::opencensus::proto::stats::v1::LastValueAggregation* temp = aggregation_.last_value_aggregation_;
    aggregation_.last_value_aggregation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::stats::v1::LastValueAggregation& View::last_value_aggregation() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.last_value_aggregation)
  return has_last_value_aggregation()
      ? *aggregation_.last_value_aggregation_
      : *reinterpret_cast< ::opencensus::proto::stats::v1::LastValueAggregation*>(&::opencensus::proto::stats::v1::_LastValueAggregation_default_instance_);
}
inline ::opencensus::proto::stats::v1::LastValueAggregation* View::mutable_last_value_aggregation() {
  if (!has_last_value_aggregation()) {
    clear_aggregation();
    set_has_last_value_aggregation();
    aggregation_.last_value_aggregation_ = CreateMaybeMessage< ::opencensus::proto::stats::v1::LastValueAggregation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.last_value_aggregation)
  return aggregation_.last_value_aggregation_;
}

// .opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;
inline bool View::has_distribution_aggregation() const {
  return aggregation_case() == kDistributionAggregation;
}
inline void View::set_has_distribution_aggregation() {
  _oneof_case_[0] = kDistributionAggregation;
}
inline void View::clear_distribution_aggregation() {
  if (has_distribution_aggregation()) {
    delete aggregation_.distribution_aggregation_;
    clear_has_aggregation();
  }
}
inline ::opencensus::proto::stats::v1::DistributionAggregation* View::release_distribution_aggregation() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.View.distribution_aggregation)
  if (has_distribution_aggregation()) {
    clear_has_aggregation();
      ::opencensus::proto::stats::v1::DistributionAggregation* temp = aggregation_.distribution_aggregation_;
    aggregation_.distribution_aggregation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::stats::v1::DistributionAggregation& View::distribution_aggregation() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.View.distribution_aggregation)
  return has_distribution_aggregation()
      ? *aggregation_.distribution_aggregation_
      : *reinterpret_cast< ::opencensus::proto::stats::v1::DistributionAggregation*>(&::opencensus::proto::stats::v1::_DistributionAggregation_default_instance_);
}
inline ::opencensus::proto::stats::v1::DistributionAggregation* View::mutable_distribution_aggregation() {
  if (!has_distribution_aggregation()) {
    clear_aggregation();
    set_has_distribution_aggregation();
    aggregation_.distribution_aggregation_ = CreateMaybeMessage< ::opencensus::proto::stats::v1::DistributionAggregation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.View.distribution_aggregation)
  return aggregation_.distribution_aggregation_;
}

inline bool View::has_aggregation() const {
  return aggregation_case() != AGGREGATION_NOT_SET;
}
inline void View::clear_has_aggregation() {
  _oneof_case_[0] = AGGREGATION_NOT_SET;
}
inline View::AggregationCase View::aggregation_case() const {
  return View::AggregationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CountAggregation

// -------------------------------------------------------------------

// SumAggregation

// -------------------------------------------------------------------

// LastValueAggregation

// -------------------------------------------------------------------

// DistributionAggregation

// repeated double bucket_bounds = 1;
inline int DistributionAggregation::bucket_bounds_size() const {
  return bucket_bounds_.size();
}
inline void DistributionAggregation::clear_bucket_bounds() {
  bucket_bounds_.Clear();
}
inline double DistributionAggregation::bucket_bounds(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.DistributionAggregation.bucket_bounds)
  return bucket_bounds_.Get(index);
}
inline void DistributionAggregation::set_bucket_bounds(int index, double value) {
  bucket_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.DistributionAggregation.bucket_bounds)
}
inline void DistributionAggregation::add_bucket_bounds(double value) {
  bucket_bounds_.Add(value);
  // @@protoc_insertion_point(field_add:opencensus.proto.stats.v1.DistributionAggregation.bucket_bounds)
}
inline const ::google::protobuf::RepeatedField< double >&
DistributionAggregation::bucket_bounds() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.stats.v1.DistributionAggregation.bucket_bounds)
  return bucket_bounds_;
}
inline ::google::protobuf::RepeatedField< double >*
DistributionAggregation::mutable_bucket_bounds() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.stats.v1.DistributionAggregation.bucket_bounds)
  return &bucket_bounds_;
}

// -------------------------------------------------------------------

// Measurement

// repeated .opencensus.proto.stats.v1.Tag tags = 1;
inline int Measurement::tags_size() const {
  return tags_.size();
}
inline void Measurement::clear_tags() {
  tags_.Clear();
}
inline ::opencensus::proto::stats::v1::Tag* Measurement::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Measurement.tags)
  return tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::opencensus::proto::stats::v1::Tag >*
Measurement::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.stats.v1.Measurement.tags)
  return &tags_;
}
inline const ::opencensus::proto::stats::v1::Tag& Measurement::tags(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measurement.tags)
  return tags_.Get(index);
}
inline ::opencensus::proto::stats::v1::Tag* Measurement::add_tags() {
  // @@protoc_insertion_point(field_add:opencensus.proto.stats.v1.Measurement.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::stats::v1::Tag >&
Measurement::tags() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.stats.v1.Measurement.tags)
  return tags_;
}

// string measure_name = 2;
inline void Measurement::clear_measure_name() {
  measure_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measurement::measure_name() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measurement.measure_name)
  return measure_name_.GetNoArena();
}
inline void Measurement::set_measure_name(const ::std::string& value) {
  
  measure_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Measurement.measure_name)
}
#if LANG_CXX11
inline void Measurement::set_measure_name(::std::string&& value) {
  
  measure_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.stats.v1.Measurement.measure_name)
}
#endif
inline void Measurement::set_measure_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  measure_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.stats.v1.Measurement.measure_name)
}
inline void Measurement::set_measure_name(const char* value, size_t size) {
  
  measure_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.stats.v1.Measurement.measure_name)
}
inline ::std::string* Measurement::mutable_measure_name() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Measurement.measure_name)
  return measure_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measurement::release_measure_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.Measurement.measure_name)
  
  return measure_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_measure_name(::std::string* measure_name) {
  if (measure_name != nullptr) {
    
  } else {
    
  }
  measure_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), measure_name);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.Measurement.measure_name)
}

// double double_value = 3;
inline bool Measurement::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void Measurement::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Measurement::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Measurement::double_value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measurement.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void Measurement::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Measurement.double_value)
}

// int64 int_value = 4;
inline bool Measurement::has_int_value() const {
  return value_case() == kIntValue;
}
inline void Measurement::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Measurement::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 Measurement::int_value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measurement.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Measurement::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.stats.v1.Measurement.int_value)
}

// .google.protobuf.Timestamp time = 5;
inline bool Measurement::has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Measurement::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:opencensus.proto.stats.v1.Measurement.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Measurement::release_time() {
  // @@protoc_insertion_point(field_release:opencensus.proto.stats.v1.Measurement.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Measurement::mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.stats.v1.Measurement.time)
  return time_;
}
inline void Measurement::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.stats.v1.Measurement.time)
}

inline bool Measurement::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Measurement::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Measurement::ValueCase Measurement::value_case() const {
  return Measurement::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace stats
}  // namespace proto
}  // namespace opencensus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opencensus::proto::stats::v1::Measure_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opencensus::proto::stats::v1::Measure_Type>() {
  return ::opencensus::proto::stats::v1::Measure_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_opencensus_2fproto_2fstats_2fv1_2fstats_2eproto
