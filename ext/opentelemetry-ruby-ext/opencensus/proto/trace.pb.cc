// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace.proto

#include "opencensus/proto/trace/v1/trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2fresource_2fv1_2fresource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Resource_opencensus_2fproto_2fresource_2fv1_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Span_TimeEvent_MessageEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Span_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Status_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Module_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Span_Attributes_AttributeMapEntry_DoNotUse_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Span_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Span_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Span_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Span_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Span_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Span_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {
class Span_Tracestate_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Tracestate_Entry> _instance;
} _Span_Tracestate_Entry_default_instance_;
class Span_TracestateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Tracestate> _instance;
} _Span_Tracestate_default_instance_;
class Span_Attributes_AttributeMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Attributes_AttributeMapEntry_DoNotUse> _instance;
} _Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_;
class Span_AttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Attributes> _instance;
} _Span_Attributes_default_instance_;
class Span_TimeEvent_AnnotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_Annotation> _instance;
} _Span_TimeEvent_Annotation_default_instance_;
class Span_TimeEvent_MessageEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_MessageEvent> _instance;
} _Span_TimeEvent_MessageEvent_default_instance_;
class Span_TimeEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent> _instance;
  const ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* annotation_;
  const ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* message_event_;
} _Span_TimeEvent_default_instance_;
class Span_TimeEventsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvents> _instance;
} _Span_TimeEvents_default_instance_;
class Span_LinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Link> _instance;
} _Span_Link_default_instance_;
class Span_LinksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Links> _instance;
} _Span_Links_default_instance_;
class SpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span> _instance;
} _Span_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class AttributeValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttributeValue> _instance;
  const ::opencensus::proto::trace::v1::TruncatableString* string_value_;
  ::google::protobuf::int64 int_value_;
  bool bool_value_;
  double double_value_;
} _AttributeValue_default_instance_;
class StackTrace_StackFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace_StackFrame> _instance;
} _StackTrace_StackFrame_default_instance_;
class StackTrace_StackFramesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace_StackFrames> _instance;
} _StackTrace_StackFrames_default_instance_;
class StackTraceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace> _instance;
} _StackTrace_default_instance_;
class ModuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Module> _instance;
} _Module_default_instance_;
class TruncatableStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TruncatableString> _instance;
} _TruncatableString_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus
static void InitDefaultsSpan_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_Tracestate_Entry_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_Tracestate_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_Tracestate_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Span_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpan_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {}};

static void InitDefaultsSpan_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_Tracestate_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_Tracestate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_Tracestate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Span_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpan_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Span_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_Attributes_AttributeMapEntry_DoNotUse_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse();
  }
  ::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Span_Attributes_AttributeMapEntry_DoNotUse_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpan_Attributes_AttributeMapEntry_DoNotUse_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_AttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_Attributes_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_Attributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_Attributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpan_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Span_Attributes_AttributeMapEntry_DoNotUse_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_TimeEvent_Annotation_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Span_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSpan_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_TimeEvent_MessageEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_TimeEvent_MessageEvent_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Span_TimeEvent_MessageEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpan_TimeEvent_MessageEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {}};

static void InitDefaultsSpan_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_TimeEvent_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_TimeEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_TimeEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Span_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSpan_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Span_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Span_TimeEvent_MessageEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_TimeEvents_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_TimeEvents();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_TimeEvents::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Span_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpan_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Span_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_Link_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_Link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_Link::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Span_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSpan_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Span_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_Links_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span_Links();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span_Links::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Span_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpan_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Span_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsSpan_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Span_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Span();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Span::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_Span_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsSpan_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Span_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_StackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Span_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Span_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Status_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Resource_opencensus_2fproto_2fresource_2fv1_2fresource_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsStatus_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Status_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Status::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Status_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatus_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {}};

static void InitDefaultsAttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_AttributeValue_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::AttributeValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::AttributeValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsStackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_StackTrace_StackFrame_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::StackTrace_StackFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::StackTrace_StackFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Module_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsStackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_StackTrace_StackFrames_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::StackTrace_StackFrames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::StackTrace_StackFrames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_StackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsStackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_StackTrace_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::StackTrace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::StackTrace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_StackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsModule_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_Module_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::Module();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::Module::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Module_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsModule_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsTruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_TruncatableString_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::TruncatableString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::TruncatableString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {}};

void InitDefaults_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Span_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_Attributes_AttributeMapEntry_DoNotUse_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_TimeEvent_MessageEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Span_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Status_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Module_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Tracestate_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Tracestate_Entry, key_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Tracestate_Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Tracestate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Tracestate, entries_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Attributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Attributes, attribute_map_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Attributes, dropped_attributes_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_Annotation, description_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_Annotation, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent, type_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent, id_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent, uncompressed_size_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent, compressed_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent, time_),
  offsetof(::opencensus::proto::trace::v1::Span_TimeEventDefaultTypeInternal, annotation_),
  offsetof(::opencensus::proto::trace::v1::Span_TimeEventDefaultTypeInternal, message_event_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvents, time_event_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvents, dropped_annotations_count_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_TimeEvents, dropped_message_events_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Link, trace_id_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Link, span_id_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Link, type_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Link, attributes_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Link, tracestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Links, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Links, link_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span_Links, dropped_links_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, trace_id_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, span_id_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, tracestate_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, name_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, kind_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, start_time_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, end_time_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, attributes_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, stack_trace_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, time_events_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, links_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, status_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, resource_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, same_process_as_parent_span_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Span, child_span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Status, code_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Status, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::AttributeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::AttributeValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::opencensus::proto::trace::v1::AttributeValueDefaultTypeInternal, string_value_),
  offsetof(::opencensus::proto::trace::v1::AttributeValueDefaultTypeInternal, int_value_),
  offsetof(::opencensus::proto::trace::v1::AttributeValueDefaultTypeInternal, bool_value_),
  offsetof(::opencensus::proto::trace::v1::AttributeValueDefaultTypeInternal, double_value_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::AttributeValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, function_name_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, original_function_name_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, file_name_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, line_number_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, column_number_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, load_module_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrame, source_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrames, frame_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace_StackFrames, dropped_frames_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace, stack_frames_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::StackTrace, stack_trace_hash_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Module, module_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::Module, build_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TruncatableString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TruncatableString, value_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TruncatableString, truncated_byte_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opencensus::proto::trace::v1::Span_Tracestate_Entry)},
  { 7, -1, sizeof(::opencensus::proto::trace::v1::Span_Tracestate)},
  { 13, 20, sizeof(::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse)},
  { 22, -1, sizeof(::opencensus::proto::trace::v1::Span_Attributes)},
  { 29, -1, sizeof(::opencensus::proto::trace::v1::Span_TimeEvent_Annotation)},
  { 36, -1, sizeof(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent)},
  { 45, -1, sizeof(::opencensus::proto::trace::v1::Span_TimeEvent)},
  { 54, -1, sizeof(::opencensus::proto::trace::v1::Span_TimeEvents)},
  { 62, -1, sizeof(::opencensus::proto::trace::v1::Span_Link)},
  { 72, -1, sizeof(::opencensus::proto::trace::v1::Span_Links)},
  { 79, -1, sizeof(::opencensus::proto::trace::v1::Span)},
  { 100, -1, sizeof(::opencensus::proto::trace::v1::Status)},
  { 107, -1, sizeof(::opencensus::proto::trace::v1::AttributeValue)},
  { 117, -1, sizeof(::opencensus::proto::trace::v1::StackTrace_StackFrame)},
  { 129, -1, sizeof(::opencensus::proto::trace::v1::StackTrace_StackFrames)},
  { 136, -1, sizeof(::opencensus::proto::trace::v1::StackTrace)},
  { 143, -1, sizeof(::opencensus::proto::trace::v1::Module)},
  { 150, -1, sizeof(::opencensus::proto::trace::v1::TruncatableString)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_Tracestate_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_Tracestate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_Attributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_TimeEvent_Annotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_TimeEvent_MessageEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_TimeEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_TimeEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_Link_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_Links_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Span_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_AttributeValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_StackTrace_StackFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_StackTrace_StackFrames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_StackTrace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_Module_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_TruncatableString_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto = {
  {}, AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto, "opencensus/proto/trace/v1/trace.proto", schemas,
  file_default_instances, TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto::offsets,
  file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto, 18, file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto, file_level_service_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto,
};

const char descriptor_table_protodef_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[] =
  "\n%opencensus/proto/trace/v1/trace.proto\022"
  "\031opencensus.proto.trace.v1\032+opencensus/p"
  "roto/resource/v1/resource.proto\032\037google/"
  "protobuf/timestamp.proto\032\036google/protobu"
  "f/wrappers.proto\"\254\022\n\004Span\022\020\n\010trace_id\030\001 "
  "\001(\014\022\017\n\007span_id\030\002 \001(\014\022>\n\ntracestate\030\017 \001(\013"
  "2*.opencensus.proto.trace.v1.Span.Traces"
  "tate\022\026\n\016parent_span_id\030\003 \001(\014\022:\n\004name\030\004 \001"
  "(\0132,.opencensus.proto.trace.v1.Truncatab"
  "leString\0226\n\004kind\030\016 \001(\0162(.opencensus.prot"
  "o.trace.v1.Span.SpanKind\022.\n\nstart_time\030\005"
  " \001(\0132\032.google.protobuf.Timestamp\022,\n\010end_"
  "time\030\006 \001(\0132\032.google.protobuf.Timestamp\022>"
  "\n\nattributes\030\007 \001(\0132*.opencensus.proto.tr"
  "ace.v1.Span.Attributes\022:\n\013stack_trace\030\010 "
  "\001(\0132%.opencensus.proto.trace.v1.StackTra"
  "ce\022\?\n\013time_events\030\t \001(\0132*.opencensus.pro"
  "to.trace.v1.Span.TimeEvents\0224\n\005links\030\n \001"
  "(\0132%.opencensus.proto.trace.v1.Span.Link"
  "s\0221\n\006status\030\013 \001(\0132!.opencensus.proto.tra"
  "ce.v1.Status\0228\n\010resource\030\020 \001(\0132&.opencen"
  "sus.proto.resource.v1.Resource\022\?\n\033same_p"
  "rocess_as_parent_span\030\014 \001(\0132\032.google.pro"
  "tobuf.BoolValue\0226\n\020child_span_count\030\r \001("
  "\0132\034.google.protobuf.UInt32Value\032t\n\nTrace"
  "state\022A\n\007entries\030\001 \003(\01320.opencensus.prot"
  "o.trace.v1.Span.Tracestate.Entry\032#\n\005Entr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\343\001\n\nAttrib"
  "utes\022S\n\rattribute_map\030\001 \003(\0132<.opencensus"
  ".proto.trace.v1.Span.Attributes.Attribut"
  "eMapEntry\022 \n\030dropped_attributes_count\030\002 "
  "\001(\005\032^\n\021AttributeMapEntry\022\013\n\003key\030\001 \001(\t\0228\n"
  "\005value\030\002 \001(\0132).opencensus.proto.trace.v1"
  ".AttributeValue:\0028\001\032\277\004\n\tTimeEvent\022(\n\004tim"
  "e\030\001 \001(\0132\032.google.protobuf.Timestamp\022J\n\na"
  "nnotation\030\002 \001(\01324.opencensus.proto.trace"
  ".v1.Span.TimeEvent.AnnotationH\000\022O\n\rmessa"
  "ge_event\030\003 \001(\01326.opencensus.proto.trace."
  "v1.Span.TimeEvent.MessageEventH\000\032\217\001\n\nAnn"
  "otation\022A\n\013description\030\001 \001(\0132,.opencensu"
  "s.proto.trace.v1.TruncatableString\022>\n\nat"
  "tributes\030\002 \001(\0132*.opencensus.proto.trace."
  "v1.Span.Attributes\032\317\001\n\014MessageEvent\022I\n\004t"
  "ype\030\001 \001(\0162;.opencensus.proto.trace.v1.Sp"
  "an.TimeEvent.MessageEvent.Type\022\n\n\002id\030\002 \001"
  "(\004\022\031\n\021uncompressed_size\030\003 \001(\004\022\027\n\017compres"
  "sed_size\030\004 \001(\004\"4\n\004Type\022\024\n\020TYPE_UNSPECIFI"
  "ED\020\000\022\010\n\004SENT\020\001\022\014\n\010RECEIVED\020\002B\007\n\005value\032\224\001"
  "\n\nTimeEvents\022=\n\ntime_event\030\001 \003(\0132).openc"
  "ensus.proto.trace.v1.Span.TimeEvent\022!\n\031d"
  "ropped_annotations_count\030\002 \001(\005\022$\n\034droppe"
  "d_message_events_count\030\003 \001(\005\032\257\002\n\004Link\022\020\n"
  "\010trace_id\030\001 \001(\014\022\017\n\007span_id\030\002 \001(\014\0227\n\004type"
  "\030\003 \001(\0162).opencensus.proto.trace.v1.Span."
  "Link.Type\022>\n\nattributes\030\004 \001(\0132*.opencens"
  "us.proto.trace.v1.Span.Attributes\022>\n\ntra"
  "cestate\030\005 \001(\0132*.opencensus.proto.trace.v"
  "1.Span.Tracestate\"K\n\004Type\022\024\n\020TYPE_UNSPEC"
  "IFIED\020\000\022\025\n\021CHILD_LINKED_SPAN\020\001\022\026\n\022PARENT"
  "_LINKED_SPAN\020\002\032X\n\005Links\0222\n\004link\030\001 \003(\0132$."
  "opencensus.proto.trace.v1.Span.Link\022\033\n\023d"
  "ropped_links_count\030\002 \001(\005\"=\n\010SpanKind\022\031\n\025"
  "SPAN_KIND_UNSPECIFIED\020\000\022\n\n\006SERVER\020\001\022\n\n\006C"
  "LIENT\020\002\"\'\n\006Status\022\014\n\004code\030\001 \001(\005\022\017\n\007messa"
  "ge\030\002 \001(\t\"\242\001\n\016AttributeValue\022D\n\014string_va"
  "lue\030\001 \001(\0132,.opencensus.proto.trace.v1.Tr"
  "uncatableStringH\000\022\023\n\tint_value\030\002 \001(\003H\000\022\024"
  "\n\nbool_value\030\003 \001(\010H\000\022\026\n\014double_value\030\004 \001"
  "(\001H\000B\007\n\005value\"\355\004\n\nStackTrace\022G\n\014stack_fr"
  "ames\030\001 \001(\01321.opencensus.proto.trace.v1.S"
  "tackTrace.StackFrames\022\033\n\023stack_trace_has"
  "h_id\030\002 \001(\004\032\212\003\n\nStackFrame\022C\n\rfunction_na"
  "me\030\001 \001(\0132,.opencensus.proto.trace.v1.Tru"
  "ncatableString\022L\n\026original_function_name"
  "\030\002 \001(\0132,.opencensus.proto.trace.v1.Trunc"
  "atableString\022\?\n\tfile_name\030\003 \001(\0132,.opence"
  "nsus.proto.trace.v1.TruncatableString\022\023\n"
  "\013line_number\030\004 \001(\003\022\025\n\rcolumn_number\030\005 \001("
  "\003\0226\n\013load_module\030\006 \001(\0132!.opencensus.prot"
  "o.trace.v1.Module\022D\n\016source_version\030\007 \001("
  "\0132,.opencensus.proto.trace.v1.Truncatabl"
  "eString\032l\n\013StackFrames\022\?\n\005frame\030\001 \003(\01320."
  "opencensus.proto.trace.v1.StackTrace.Sta"
  "ckFrame\022\034\n\024dropped_frames_count\030\002 \001(\005\"\206\001"
  "\n\006Module\022<\n\006module\030\001 \001(\0132,.opencensus.pr"
  "oto.trace.v1.TruncatableString\022>\n\010build_"
  "id\030\002 \001(\0132,.opencensus.proto.trace.v1.Tru"
  "ncatableString\"@\n\021TruncatableString\022\r\n\005v"
  "alue\030\001 \001(\t\022\034\n\024truncated_byte_count\030\002 \001(\005"
  "B\214\001\n\034io.opencensus.proto.trace.v1B\nTrace"
  "ProtoP\001ZBgithub.com/census-instrumentati"
  "on/opencensus-proto/gen-go/trace/v1\352\002\031Op"
  "enCensus.Proto.Trace.V1b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto = {
  false, InitDefaults_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto, 
  descriptor_table_protodef_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto,
  "opencensus/proto/trace/v1/trace.proto", &assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto, 3711,
};

void AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_opencensus_2fproto_2fresource_2fv1_2fresource_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto = []() { AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto(); return true; }();
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Span_TimeEvent_MessageEvent_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[0];
}
bool Span_TimeEvent_MessageEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::TYPE_UNSPECIFIED;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::SENT;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::RECEIVED;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::Type_MIN;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::Type_MAX;
const int Span_TimeEvent_MessageEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Span_Link_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[1];
}
bool Span_Link_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_Link_Type Span_Link::TYPE_UNSPECIFIED;
const Span_Link_Type Span_Link::CHILD_LINKED_SPAN;
const Span_Link_Type Span_Link::PARENT_LINKED_SPAN;
const Span_Link_Type Span_Link::Type_MIN;
const Span_Link_Type Span_Link::Type_MAX;
const int Span_Link::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Span_SpanKind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[2];
}
bool Span_SpanKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_SpanKind Span::SPAN_KIND_UNSPECIFIED;
const Span_SpanKind Span::SERVER;
const Span_SpanKind Span::CLIENT;
const Span_SpanKind Span::SpanKind_MIN;
const Span_SpanKind Span::SpanKind_MAX;
const int Span::SpanKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Span_Tracestate_Entry::InitAsDefaultInstance() {
}
class Span_Tracestate_Entry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Tracestate_Entry::kKeyFieldNumber;
const int Span_Tracestate_Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Tracestate_Entry::Span_Tracestate_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.Tracestate.Entry)
}
Span_Tracestate_Entry::Span_Tracestate_Entry(const Span_Tracestate_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.Tracestate.Entry)
}

void Span_Tracestate_Entry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Span_Tracestate_Entry::~Span_Tracestate_Entry() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  SharedDtor();
}

void Span_Tracestate_Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Span_Tracestate_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_Tracestate_Entry& Span_Tracestate_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_Tracestate_Entry_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_Tracestate_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_Tracestate_Entry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_Tracestate_Entry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.trace.v1.Span.Tracestate.Entry.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.trace.v1.Span.Tracestate.Entry.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_Tracestate_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.trace.v1.Span.Tracestate.Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.trace.v1.Span.Tracestate.Entry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_Tracestate_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.Span.Tracestate.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.Span.Tracestate.Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.Tracestate.Entry)
}

::google::protobuf::uint8* Span_Tracestate_Entry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.Span.Tracestate.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.Span.Tracestate.Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  return target;
}

size_t Span_Tracestate_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_Tracestate_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Tracestate_Entry* source =
      ::google::protobuf::DynamicCastToGenerated<Span_Tracestate_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.Tracestate.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.Tracestate.Entry)
    MergeFrom(*source);
  }
}

void Span_Tracestate_Entry::MergeFrom(const Span_Tracestate_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Span_Tracestate_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Tracestate_Entry::CopyFrom(const Span_Tracestate_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.Tracestate.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Tracestate_Entry::IsInitialized() const {
  return true;
}

void Span_Tracestate_Entry::Swap(Span_Tracestate_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Tracestate_Entry::InternalSwap(Span_Tracestate_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Span_Tracestate_Entry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span_Tracestate::InitAsDefaultInstance() {
}
class Span_Tracestate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Tracestate::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Tracestate::Span_Tracestate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.Tracestate)
}
Span_Tracestate::Span_Tracestate(const Span_Tracestate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.Tracestate)
}

void Span_Tracestate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
}

Span_Tracestate::~Span_Tracestate() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.Tracestate)
  SharedDtor();
}

void Span_Tracestate::SharedDtor() {
}

void Span_Tracestate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_Tracestate& Span_Tracestate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_Tracestate_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_Tracestate::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.Tracestate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_Tracestate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_Tracestate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::opencensus::proto::trace::v1::Span_Tracestate_Entry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_Tracestate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.Tracestate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.Tracestate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.Tracestate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_Tracestate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.Tracestate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.Tracestate)
}

::google::protobuf::uint8* Span_Tracestate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.Tracestate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.Tracestate)
  return target;
}

size_t Span_Tracestate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.Tracestate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_Tracestate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.Tracestate)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Tracestate* source =
      ::google::protobuf::DynamicCastToGenerated<Span_Tracestate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.Tracestate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.Tracestate)
    MergeFrom(*source);
  }
}

void Span_Tracestate::MergeFrom(const Span_Tracestate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.Tracestate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void Span_Tracestate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.Tracestate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Tracestate::CopyFrom(const Span_Tracestate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.Tracestate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Tracestate::IsInitialized() const {
  return true;
}

void Span_Tracestate::Swap(Span_Tracestate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Tracestate::InternalSwap(Span_Tracestate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

::google::protobuf::Metadata Span_Tracestate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

Span_Attributes_AttributeMapEntry_DoNotUse::Span_Attributes_AttributeMapEntry_DoNotUse() {}
Span_Attributes_AttributeMapEntry_DoNotUse::Span_Attributes_AttributeMapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Span_Attributes_AttributeMapEntry_DoNotUse::MergeFrom(const Span_Attributes_AttributeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Span_Attributes_AttributeMapEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[2];
}
void Span_Attributes_AttributeMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_Attributes_AttributeMapEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Span_Attributes_AttributeMapEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "opencensus.proto.trace.v1.Span.Attributes.AttributeMapEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Span_Attributes::InitAsDefaultInstance() {
}
class Span_Attributes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Attributes::kAttributeMapFieldNumber;
const int Span_Attributes::kDroppedAttributesCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Attributes::Span_Attributes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.Attributes)
}
Span_Attributes::Span_Attributes(const Span_Attributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attribute_map_.MergeFrom(from.attribute_map_);
  dropped_attributes_count_ = from.dropped_attributes_count_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.Attributes)
}

void Span_Attributes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  dropped_attributes_count_ = 0;
}

Span_Attributes::~Span_Attributes() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.Attributes)
  SharedDtor();
}

void Span_Attributes::SharedDtor() {
}

void Span_Attributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_Attributes& Span_Attributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_Attributes_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_Attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_map_.Clear();
  dropped_attributes_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_Attributes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_Attributes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->attribute_map_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 dropped_attributes_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dropped_attributes_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.Attributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          Span_Attributes_AttributeMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Span_Attributes_AttributeMapEntry_DoNotUse,
              ::std::string, ::opencensus::proto::trace::v1::AttributeValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue > > parser(&attribute_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.trace.v1.Span.Attributes.AttributeMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_attributes_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_attributes_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.Attributes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1;
  if (!this->attribute_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opencensus.proto.trace.v1.Span.Attributes.AttributeMapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attribute_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attribute_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::const_iterator
          it = this->attribute_map().begin();
          it != this->attribute_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Span_Attributes_AttributeMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attribute_map_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Span_Attributes_AttributeMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::const_iterator
          it = this->attribute_map().begin();
          it != this->attribute_map().end(); ++it) {
        entry.reset(attribute_map_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 dropped_attributes_count = 2;
  if (this->dropped_attributes_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dropped_attributes_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.Attributes)
}

::google::protobuf::uint8* Span_Attributes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1;
  if (!this->attribute_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opencensus.proto.trace.v1.Span.Attributes.AttributeMapEntry.key");
      }
    };

    if (false &&
        this->attribute_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attribute_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::const_iterator
          it = this->attribute_map().begin();
          it != this->attribute_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Span_Attributes_AttributeMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attribute_map_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Span_Attributes_AttributeMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::const_iterator
          it = this->attribute_map().begin();
          it != this->attribute_map().end(); ++it) {
        entry.reset(attribute_map_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 dropped_attributes_count = 2;
  if (this->dropped_attributes_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dropped_attributes_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.Attributes)
  return target;
}

size_t Span_Attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.Attributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attribute_map_size());
  {
    ::std::unique_ptr<Span_Attributes_AttributeMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >::const_iterator
        it = this->attribute_map().begin();
        it != this->attribute_map().end(); ++it) {
      entry.reset(attribute_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 dropped_attributes_count = 2;
  if (this->dropped_attributes_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dropped_attributes_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_Attributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Attributes* source =
      ::google::protobuf::DynamicCastToGenerated<Span_Attributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.Attributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.Attributes)
    MergeFrom(*source);
  }
}

void Span_Attributes::MergeFrom(const Span_Attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_map_.MergeFrom(from.attribute_map_);
  if (from.dropped_attributes_count() != 0) {
    set_dropped_attributes_count(from.dropped_attributes_count());
  }
}

void Span_Attributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Attributes::CopyFrom(const Span_Attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Attributes::IsInitialized() const {
  return true;
}

void Span_Attributes::Swap(Span_Attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Attributes::InternalSwap(Span_Attributes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attribute_map_.Swap(&other->attribute_map_);
  swap(dropped_attributes_count_, other->dropped_attributes_count_);
}

::google::protobuf::Metadata Span_Attributes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span_TimeEvent_Annotation::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_Span_TimeEvent_Annotation_default_instance_._instance.get_mutable()->description_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_TimeEvent_Annotation_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::opencensus::proto::trace::v1::Span_Attributes*>(
      ::opencensus::proto::trace::v1::Span_Attributes::internal_default_instance());
}
class Span_TimeEvent_Annotation::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::TruncatableString& description(const Span_TimeEvent_Annotation* msg);
  static const ::opencensus::proto::trace::v1::Span_Attributes& attributes(const Span_TimeEvent_Annotation* msg);
};

const ::opencensus::proto::trace::v1::TruncatableString&
Span_TimeEvent_Annotation::HasBitSetters::description(const Span_TimeEvent_Annotation* msg) {
  return *msg->description_;
}
const ::opencensus::proto::trace::v1::Span_Attributes&
Span_TimeEvent_Annotation::HasBitSetters::attributes(const Span_TimeEvent_Annotation* msg) {
  return *msg->attributes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_Annotation::kDescriptionFieldNumber;
const int Span_TimeEvent_Annotation::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_Annotation::Span_TimeEvent_Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
}
Span_TimeEvent_Annotation::Span_TimeEvent_Annotation(const Span_TimeEvent_Annotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_description()) {
    description_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from.has_attributes()) {
    attributes_ = new ::opencensus::proto::trace::v1::Span_Attributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
}

void Span_TimeEvent_Annotation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::memset(&description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attributes_) -
      reinterpret_cast<char*>(&description_)) + sizeof(attributes_));
}

Span_TimeEvent_Annotation::~Span_TimeEvent_Annotation() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  SharedDtor();
}

void Span_TimeEvent_Annotation::SharedDtor() {
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete attributes_;
}

void Span_TimeEvent_Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_TimeEvent_Annotation& Span_TimeEvent_Annotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_TimeEvent_Annotation_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_TimeEvent_Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_TimeEvent_Annotation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_TimeEvent_Annotation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.TruncatableString description = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_description();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.Attributes attributes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_Attributes::_InternalParse;
        object = msg->mutable_attributes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_TimeEvent_Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.TruncatableString description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.Attributes attributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_TimeEvent_Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString description = 1;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::description(this), output);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 2;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::attributes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
}

::google::protobuf::uint8* Span_TimeEvent_Annotation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString description = 1;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::description(this), target);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 2;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::attributes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  return target;
}

size_t Span_TimeEvent_Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString description = 1;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 2;
  if (this->has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_TimeEvent_Annotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent_Annotation* source =
      ::google::protobuf::DynamicCastToGenerated<Span_TimeEvent_Annotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
    MergeFrom(*source);
  }
}

void Span_TimeEvent_Annotation::MergeFrom(const Span_TimeEvent_Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_description()) {
    mutable_description()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.description());
  }
  if (from.has_attributes()) {
    mutable_attributes()->::opencensus::proto::trace::v1::Span_Attributes::MergeFrom(from.attributes());
  }
}

void Span_TimeEvent_Annotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_Annotation::CopyFrom(const Span_TimeEvent_Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent_Annotation::IsInitialized() const {
  return true;
}

void Span_TimeEvent_Annotation::Swap(Span_TimeEvent_Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_Annotation::InternalSwap(Span_TimeEvent_Annotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(description_, other->description_);
  swap(attributes_, other->attributes_);
}

::google::protobuf::Metadata Span_TimeEvent_Annotation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span_TimeEvent_MessageEvent::InitAsDefaultInstance() {
}
class Span_TimeEvent_MessageEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_MessageEvent::kTypeFieldNumber;
const int Span_TimeEvent_MessageEvent::kIdFieldNumber;
const int Span_TimeEvent_MessageEvent::kUncompressedSizeFieldNumber;
const int Span_TimeEvent_MessageEvent::kCompressedSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_MessageEvent::Span_TimeEvent_MessageEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
}
Span_TimeEvent_MessageEvent::Span_TimeEvent_MessageEvent(const Span_TimeEvent_MessageEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
}

void Span_TimeEvent_MessageEvent::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Span_TimeEvent_MessageEvent::~Span_TimeEvent_MessageEvent() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  SharedDtor();
}

void Span_TimeEvent_MessageEvent::SharedDtor() {
}

void Span_TimeEvent_MessageEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_TimeEvent_MessageEvent& Span_TimeEvent_MessageEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_TimeEvent_MessageEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_TimeEvent_MessageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_TimeEvent_MessageEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_TimeEvent_MessageEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 uncompressed_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_uncompressed_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 compressed_size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_compressed_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_TimeEvent_MessageEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uncompressed_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uncompressed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 compressed_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compressed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_TimeEvent_MessageEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // uint64 uncompressed_size = 3;
  if (this->uncompressed_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uncompressed_size(), output);
  }

  // uint64 compressed_size = 4;
  if (this->compressed_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->compressed_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
}

::google::protobuf::uint8* Span_TimeEvent_MessageEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // uint64 uncompressed_size = 3;
  if (this->uncompressed_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uncompressed_size(), target);
  }

  // uint64 compressed_size = 4;
  if (this->compressed_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->compressed_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  return target;
}

size_t Span_TimeEvent_MessageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 uncompressed_size = 3;
  if (this->uncompressed_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uncompressed_size());
  }

  // uint64 compressed_size = 4;
  if (this->compressed_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compressed_size());
  }

  // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_TimeEvent_MessageEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent_MessageEvent* source =
      ::google::protobuf::DynamicCastToGenerated<Span_TimeEvent_MessageEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
    MergeFrom(*source);
  }
}

void Span_TimeEvent_MessageEvent::MergeFrom(const Span_TimeEvent_MessageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.uncompressed_size() != 0) {
    set_uncompressed_size(from.uncompressed_size());
  }
  if (from.compressed_size() != 0) {
    set_compressed_size(from.compressed_size());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Span_TimeEvent_MessageEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_MessageEvent::CopyFrom(const Span_TimeEvent_MessageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent_MessageEvent::IsInitialized() const {
  return true;
}

void Span_TimeEvent_MessageEvent::Swap(Span_TimeEvent_MessageEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_MessageEvent::InternalSwap(Span_TimeEvent_MessageEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(uncompressed_size_, other->uncompressed_size_);
  swap(compressed_size_, other->compressed_size_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Span_TimeEvent_MessageEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span_TimeEvent::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_Span_TimeEvent_default_instance_._instance.get_mutable()->time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_TimeEvent_default_instance_.annotation_ = const_cast< ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation*>(
      ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_TimeEvent_default_instance_.message_event_ = const_cast< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent*>(
      ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent::internal_default_instance());
}
class Span_TimeEvent::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& time(const Span_TimeEvent* msg);
  static const ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation& annotation(const Span_TimeEvent* msg);
  static const ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent& message_event(const Span_TimeEvent* msg);
};

const ::google::protobuf::Timestamp&
Span_TimeEvent::HasBitSetters::time(const Span_TimeEvent* msg) {
  return *msg->time_;
}
const ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation&
Span_TimeEvent::HasBitSetters::annotation(const Span_TimeEvent* msg) {
  return *msg->value_.annotation_;
}
const ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent&
Span_TimeEvent::HasBitSetters::message_event(const Span_TimeEvent* msg) {
  return *msg->value_.message_event_;
}
void Span_TimeEvent::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
void Span_TimeEvent::set_allocated_annotation(::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (annotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    set_has_annotation();
    value_.annotation_ = annotation;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.TimeEvent.annotation)
}
void Span_TimeEvent::set_allocated_message_event(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* message_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (message_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_event, submessage_arena);
    }
    set_has_message_event();
    value_.message_event_ = message_event;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.TimeEvent.message_event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent::kTimeFieldNumber;
const int Span_TimeEvent::kAnnotationFieldNumber;
const int Span_TimeEvent::kMessageEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent::Span_TimeEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.TimeEvent)
}
Span_TimeEvent::Span_TimeEvent(const Span_TimeEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::google::protobuf::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kAnnotation: {
      mutable_annotation()->::opencensus::proto::trace::v1::Span_TimeEvent_Annotation::MergeFrom(from.annotation());
      break;
    }
    case kMessageEvent: {
      mutable_message_event()->::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent::MergeFrom(from.message_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.TimeEvent)
}

void Span_TimeEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  time_ = nullptr;
  clear_has_value();
}

Span_TimeEvent::~Span_TimeEvent() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.TimeEvent)
  SharedDtor();
}

void Span_TimeEvent::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
  if (has_value()) {
    clear_value();
  }
}

void Span_TimeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_TimeEvent& Span_TimeEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_TimeEvent_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_TimeEvent::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opencensus.proto.trace.v1.Span.TimeEvent)
  switch (value_case()) {
    case kAnnotation: {
      delete value_.annotation_;
      break;
    }
    case kMessageEvent: {
      delete value_.message_event_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Span_TimeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_TimeEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_TimeEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation::_InternalParse;
        object = msg->mutable_annotation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent::_InternalParse;
        object = msg->mutable_message_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_TimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.TimeEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.TimeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.TimeEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_TimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::time(this), output);
  }

  // .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::annotation(this), output);
  }

  // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;
  if (has_message_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::message_event(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.TimeEvent)
}

::google::protobuf::uint8* Span_TimeEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::time(this), target);
  }

  // .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::annotation(this), target);
  }

  // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;
  if (has_message_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::message_event(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.TimeEvent)
  return target;
}

size_t Span_TimeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.TimeEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  switch (value_case()) {
    // .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;
    case kAnnotation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.annotation_);
      break;
    }
    // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;
    case kMessageEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.message_event_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_TimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent* source =
      ::google::protobuf::DynamicCastToGenerated<Span_TimeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.TimeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.TimeEvent)
    MergeFrom(*source);
  }
}

void Span_TimeEvent::MergeFrom(const Span_TimeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
  switch (from.value_case()) {
    case kAnnotation: {
      mutable_annotation()->::opencensus::proto::trace::v1::Span_TimeEvent_Annotation::MergeFrom(from.annotation());
      break;
    }
    case kMessageEvent: {
      mutable_message_event()->::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent::MergeFrom(from.message_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Span_TimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent::CopyFrom(const Span_TimeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent::IsInitialized() const {
  return true;
}

void Span_TimeEvent::Swap(Span_TimeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent::InternalSwap(Span_TimeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Span_TimeEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span_TimeEvents::InitAsDefaultInstance() {
}
class Span_TimeEvents::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvents::kTimeEventFieldNumber;
const int Span_TimeEvents::kDroppedAnnotationsCountFieldNumber;
const int Span_TimeEvents::kDroppedMessageEventsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvents::Span_TimeEvents()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.TimeEvents)
}
Span_TimeEvents::Span_TimeEvents(const Span_TimeEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      time_event_(from.time_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropped_annotations_count_, &from.dropped_annotations_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_message_events_count_) -
    reinterpret_cast<char*>(&dropped_annotations_count_)) + sizeof(dropped_message_events_count_));
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.TimeEvents)
}

void Span_TimeEvents::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::memset(&dropped_annotations_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_message_events_count_) -
      reinterpret_cast<char*>(&dropped_annotations_count_)) + sizeof(dropped_message_events_count_));
}

Span_TimeEvents::~Span_TimeEvents() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.TimeEvents)
  SharedDtor();
}

void Span_TimeEvents::SharedDtor() {
}

void Span_TimeEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_TimeEvents& Span_TimeEvents::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_TimeEvents_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_TimeEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.TimeEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_event_.Clear();
  ::memset(&dropped_annotations_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_message_events_count_) -
      reinterpret_cast<char*>(&dropped_annotations_count_)) + sizeof(dropped_message_events_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_TimeEvents::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_TimeEvents*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::opencensus::proto::trace::v1::Span_TimeEvent::_InternalParse;
          object = msg->add_time_event();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 dropped_annotations_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dropped_annotations_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 dropped_message_events_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_dropped_message_events_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_TimeEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.TimeEvents)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_time_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_annotations_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_annotations_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_message_events_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_message_events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.TimeEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.TimeEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_TimeEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.TimeEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->time_event(static_cast<int>(i)),
      output);
  }

  // int32 dropped_annotations_count = 2;
  if (this->dropped_annotations_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dropped_annotations_count(), output);
  }

  // int32 dropped_message_events_count = 3;
  if (this->dropped_message_events_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dropped_message_events_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.TimeEvents)
}

::google::protobuf::uint8* Span_TimeEvents::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.TimeEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->time_event(static_cast<int>(i)), target);
  }

  // int32 dropped_annotations_count = 2;
  if (this->dropped_annotations_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dropped_annotations_count(), target);
  }

  // int32 dropped_message_events_count = 3;
  if (this->dropped_message_events_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dropped_message_events_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.TimeEvents)
  return target;
}

size_t Span_TimeEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.TimeEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->time_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->time_event(static_cast<int>(i)));
    }
  }

  // int32 dropped_annotations_count = 2;
  if (this->dropped_annotations_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dropped_annotations_count());
  }

  // int32 dropped_message_events_count = 3;
  if (this->dropped_message_events_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dropped_message_events_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_TimeEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvents* source =
      ::google::protobuf::DynamicCastToGenerated<Span_TimeEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.TimeEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.TimeEvents)
    MergeFrom(*source);
  }
}

void Span_TimeEvents::MergeFrom(const Span_TimeEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.TimeEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_event_.MergeFrom(from.time_event_);
  if (from.dropped_annotations_count() != 0) {
    set_dropped_annotations_count(from.dropped_annotations_count());
  }
  if (from.dropped_message_events_count() != 0) {
    set_dropped_message_events_count(from.dropped_message_events_count());
  }
}

void Span_TimeEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvents::CopyFrom(const Span_TimeEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.TimeEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvents::IsInitialized() const {
  return true;
}

void Span_TimeEvents::Swap(Span_TimeEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvents::InternalSwap(Span_TimeEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&time_event_)->InternalSwap(CastToBase(&other->time_event_));
  swap(dropped_annotations_count_, other->dropped_annotations_count_);
  swap(dropped_message_events_count_, other->dropped_message_events_count_);
}

::google::protobuf::Metadata Span_TimeEvents::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span_Link::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_Span_Link_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::opencensus::proto::trace::v1::Span_Attributes*>(
      ::opencensus::proto::trace::v1::Span_Attributes::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_Link_default_instance_._instance.get_mutable()->tracestate_ = const_cast< ::opencensus::proto::trace::v1::Span_Tracestate*>(
      ::opencensus::proto::trace::v1::Span_Tracestate::internal_default_instance());
}
class Span_Link::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::Span_Attributes& attributes(const Span_Link* msg);
  static const ::opencensus::proto::trace::v1::Span_Tracestate& tracestate(const Span_Link* msg);
};

const ::opencensus::proto::trace::v1::Span_Attributes&
Span_Link::HasBitSetters::attributes(const Span_Link* msg) {
  return *msg->attributes_;
}
const ::opencensus::proto::trace::v1::Span_Tracestate&
Span_Link::HasBitSetters::tracestate(const Span_Link* msg) {
  return *msg->tracestate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Link::kTraceIdFieldNumber;
const int Span_Link::kSpanIdFieldNumber;
const int Span_Link::kTypeFieldNumber;
const int Span_Link::kAttributesFieldNumber;
const int Span_Link::kTracestateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Link::Span_Link()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.Link)
}
Span_Link::Span_Link(const Span_Link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_id().size() > 0) {
    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  if (from.has_attributes()) {
    attributes_ = new ::opencensus::proto::trace::v1::Span_Attributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  if (from.has_tracestate()) {
    tracestate_ = new ::opencensus::proto::trace::v1::Span_Tracestate(*from.tracestate_);
  } else {
    tracestate_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.Link)
}

void Span_Link::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attributes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&attributes_)) + sizeof(type_));
}

Span_Link::~Span_Link() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.Link)
  SharedDtor();
}

void Span_Link::SharedDtor() {
  trace_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete tracestate_;
}

void Span_Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_Link& Span_Link::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_Link_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tracestate_ != nullptr) {
    delete tracestate_;
  }
  tracestate_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_Link::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_Link*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_trace_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes span_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .opencensus.proto.trace.v1.Span.Link.Type type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::opencensus::proto::trace::v1::Span_Link_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .opencensus.proto.trace.v1.Span.Attributes attributes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_Attributes::_InternalParse;
        object = msg->mutable_attributes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_Tracestate::_InternalParse;
        object = msg->mutable_tracestate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.Link)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trace_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_span_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.Link.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::opencensus::proto::trace::v1::Span_Link_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.Attributes attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tracestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.Link)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->trace_id(), output);
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->span_id(), output);
  }

  // .opencensus.proto.trace.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 4;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::attributes(this), output);
  }

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;
  if (this->has_tracestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::tracestate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.Link)
}

::google::protobuf::uint8* Span_Link::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->trace_id(), target);
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->span_id(), target);
  }

  // .opencensus.proto.trace.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 4;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::attributes(this), target);
  }

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;
  if (this->has_tracestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::tracestate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.Link)
  return target;
}

size_t Span_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.Link)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trace_id());
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->span_id());
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 4;
  if (this->has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;
  if (this->has_tracestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tracestate_);
  }

  // .opencensus.proto.trace.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Link* source =
      ::google::protobuf::DynamicCastToGenerated<Span_Link>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.Link)
    MergeFrom(*source);
  }
}

void Span_Link::MergeFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trace_id().size() > 0) {

    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  if (from.span_id().size() > 0) {

    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  if (from.has_attributes()) {
    mutable_attributes()->::opencensus::proto::trace::v1::Span_Attributes::MergeFrom(from.attributes());
  }
  if (from.has_tracestate()) {
    mutable_tracestate()->::opencensus::proto::trace::v1::Span_Tracestate::MergeFrom(from.tracestate());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Span_Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Link::CopyFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Link::IsInitialized() const {
  return true;
}

void Span_Link::Swap(Span_Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Link::InternalSwap(Span_Link* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trace_id_.Swap(&other->trace_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attributes_, other->attributes_);
  swap(tracestate_, other->tracestate_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Span_Link::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span_Links::InitAsDefaultInstance() {
}
class Span_Links::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Links::kLinkFieldNumber;
const int Span_Links::kDroppedLinksCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Links::Span_Links()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span.Links)
}
Span_Links::Span_Links(const Span_Links& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      link_(from.link_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropped_links_count_ = from.dropped_links_count_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span.Links)
}

void Span_Links::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  dropped_links_count_ = 0;
}

Span_Links::~Span_Links() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span.Links)
  SharedDtor();
}

void Span_Links::SharedDtor() {
}

void Span_Links::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_Links& Span_Links::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_Links_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_Links::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_.Clear();
  dropped_links_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span_Links::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span_Links*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .opencensus.proto.trace.v1.Span.Link link = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::opencensus::proto::trace::v1::Span_Link::_InternalParse;
          object = msg->add_link();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 dropped_links_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dropped_links_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span_Links::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span.Links)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opencensus.proto.trace.v1.Span.Link link = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_links_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_links_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span.Links)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span.Links)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span_Links::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.Link link = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->link(static_cast<int>(i)),
      output);
  }

  // int32 dropped_links_count = 2;
  if (this->dropped_links_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dropped_links_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span.Links)
}

::google::protobuf::uint8* Span_Links::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.Link link = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->link(static_cast<int>(i)), target);
  }

  // int32 dropped_links_count = 2;
  if (this->dropped_links_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dropped_links_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span.Links)
  return target;
}

size_t Span_Links::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span.Links)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.Span.Link link = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->link_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link(static_cast<int>(i)));
    }
  }

  // int32 dropped_links_count = 2;
  if (this->dropped_links_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dropped_links_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_Links::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span.Links)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Links* source =
      ::google::protobuf::DynamicCastToGenerated<Span_Links>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span.Links)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span.Links)
    MergeFrom(*source);
  }
}

void Span_Links::MergeFrom(const Span_Links& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span.Links)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_.MergeFrom(from.link_);
  if (from.dropped_links_count() != 0) {
    set_dropped_links_count(from.dropped_links_count());
  }
}

void Span_Links::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Links::CopyFrom(const Span_Links& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Links::IsInitialized() const {
  return true;
}

void Span_Links::Swap(Span_Links* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Links::InternalSwap(Span_Links* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&link_)->InternalSwap(CastToBase(&other->link_));
  swap(dropped_links_count_, other->dropped_links_count_);
}

::google::protobuf::Metadata Span_Links::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Span::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->tracestate_ = const_cast< ::opencensus::proto::trace::v1::Span_Tracestate*>(
      ::opencensus::proto::trace::v1::Span_Tracestate::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->name_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::opencensus::proto::trace::v1::Span_Attributes*>(
      ::opencensus::proto::trace::v1::Span_Attributes::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->stack_trace_ = const_cast< ::opencensus::proto::trace::v1::StackTrace*>(
      ::opencensus::proto::trace::v1::StackTrace::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->time_events_ = const_cast< ::opencensus::proto::trace::v1::Span_TimeEvents*>(
      ::opencensus::proto::trace::v1::Span_TimeEvents::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->links_ = const_cast< ::opencensus::proto::trace::v1::Span_Links*>(
      ::opencensus::proto::trace::v1::Span_Links::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->status_ = const_cast< ::opencensus::proto::trace::v1::Status*>(
      ::opencensus::proto::trace::v1::Status::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->resource_ = const_cast< ::opencensus::proto::resource::v1::Resource*>(
      ::opencensus::proto::resource::v1::Resource::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->same_process_as_parent_span_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::opencensus::proto::trace::v1::_Span_default_instance_._instance.get_mutable()->child_span_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
class Span::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::Span_Tracestate& tracestate(const Span* msg);
  static const ::opencensus::proto::trace::v1::TruncatableString& name(const Span* msg);
  static const ::google::protobuf::Timestamp& start_time(const Span* msg);
  static const ::google::protobuf::Timestamp& end_time(const Span* msg);
  static const ::opencensus::proto::trace::v1::Span_Attributes& attributes(const Span* msg);
  static const ::opencensus::proto::trace::v1::StackTrace& stack_trace(const Span* msg);
  static const ::opencensus::proto::trace::v1::Span_TimeEvents& time_events(const Span* msg);
  static const ::opencensus::proto::trace::v1::Span_Links& links(const Span* msg);
  static const ::opencensus::proto::trace::v1::Status& status(const Span* msg);
  static const ::opencensus::proto::resource::v1::Resource& resource(const Span* msg);
  static const ::google::protobuf::BoolValue& same_process_as_parent_span(const Span* msg);
  static const ::google::protobuf::UInt32Value& child_span_count(const Span* msg);
};

const ::opencensus::proto::trace::v1::Span_Tracestate&
Span::HasBitSetters::tracestate(const Span* msg) {
  return *msg->tracestate_;
}
const ::opencensus::proto::trace::v1::TruncatableString&
Span::HasBitSetters::name(const Span* msg) {
  return *msg->name_;
}
const ::google::protobuf::Timestamp&
Span::HasBitSetters::start_time(const Span* msg) {
  return *msg->start_time_;
}
const ::google::protobuf::Timestamp&
Span::HasBitSetters::end_time(const Span* msg) {
  return *msg->end_time_;
}
const ::opencensus::proto::trace::v1::Span_Attributes&
Span::HasBitSetters::attributes(const Span* msg) {
  return *msg->attributes_;
}
const ::opencensus::proto::trace::v1::StackTrace&
Span::HasBitSetters::stack_trace(const Span* msg) {
  return *msg->stack_trace_;
}
const ::opencensus::proto::trace::v1::Span_TimeEvents&
Span::HasBitSetters::time_events(const Span* msg) {
  return *msg->time_events_;
}
const ::opencensus::proto::trace::v1::Span_Links&
Span::HasBitSetters::links(const Span* msg) {
  return *msg->links_;
}
const ::opencensus::proto::trace::v1::Status&
Span::HasBitSetters::status(const Span* msg) {
  return *msg->status_;
}
const ::opencensus::proto::resource::v1::Resource&
Span::HasBitSetters::resource(const Span* msg) {
  return *msg->resource_;
}
const ::google::protobuf::BoolValue&
Span::HasBitSetters::same_process_as_parent_span(const Span* msg) {
  return *msg->same_process_as_parent_span_;
}
const ::google::protobuf::UInt32Value&
Span::HasBitSetters::child_span_count(const Span* msg) {
  return *msg->child_span_count_;
}
void Span::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void Span::clear_end_time() {
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
void Span::clear_resource() {
  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
void Span::clear_same_process_as_parent_span() {
  if (GetArenaNoVirtual() == nullptr && same_process_as_parent_span_ != nullptr) {
    delete same_process_as_parent_span_;
  }
  same_process_as_parent_span_ = nullptr;
}
void Span::clear_child_span_count() {
  if (GetArenaNoVirtual() == nullptr && child_span_count_ != nullptr) {
    delete child_span_count_;
  }
  child_span_count_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kTraceIdFieldNumber;
const int Span::kSpanIdFieldNumber;
const int Span::kTracestateFieldNumber;
const int Span::kParentSpanIdFieldNumber;
const int Span::kNameFieldNumber;
const int Span::kKindFieldNumber;
const int Span::kStartTimeFieldNumber;
const int Span::kEndTimeFieldNumber;
const int Span::kAttributesFieldNumber;
const int Span::kStackTraceFieldNumber;
const int Span::kTimeEventsFieldNumber;
const int Span::kLinksFieldNumber;
const int Span::kStatusFieldNumber;
const int Span::kResourceFieldNumber;
const int Span::kSameProcessAsParentSpanFieldNumber;
const int Span::kChildSpanCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Span)
}
Span::Span(const Span& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_id().size() > 0) {
    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  parent_span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_span_id().size() > 0) {
    parent_span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_span_id_);
  }
  if (from.has_name()) {
    name_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from.has_attributes()) {
    attributes_ = new ::opencensus::proto::trace::v1::Span_Attributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  if (from.has_stack_trace()) {
    stack_trace_ = new ::opencensus::proto::trace::v1::StackTrace(*from.stack_trace_);
  } else {
    stack_trace_ = nullptr;
  }
  if (from.has_time_events()) {
    time_events_ = new ::opencensus::proto::trace::v1::Span_TimeEvents(*from.time_events_);
  } else {
    time_events_ = nullptr;
  }
  if (from.has_links()) {
    links_ = new ::opencensus::proto::trace::v1::Span_Links(*from.links_);
  } else {
    links_ = nullptr;
  }
  if (from.has_status()) {
    status_ = new ::opencensus::proto::trace::v1::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_same_process_as_parent_span()) {
    same_process_as_parent_span_ = new ::google::protobuf::BoolValue(*from.same_process_as_parent_span_);
  } else {
    same_process_as_parent_span_ = nullptr;
  }
  if (from.has_child_span_count()) {
    child_span_count_ = new ::google::protobuf::UInt32Value(*from.child_span_count_);
  } else {
    child_span_count_ = nullptr;
  }
  if (from.has_tracestate()) {
    tracestate_ = new ::opencensus::proto::trace::v1::Span_Tracestate(*from.tracestate_);
  } else {
    tracestate_ = nullptr;
  }
  if (from.has_resource()) {
    resource_ = new ::opencensus::proto::resource::v1::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Span)
}

void Span::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Span_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&name_)) + sizeof(kind_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  trace_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete stack_trace_;
  if (this != internal_default_instance()) delete time_events_;
  if (this != internal_default_instance()) delete links_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete same_process_as_parent_span_;
  if (this != internal_default_instance()) delete child_span_count_;
  if (this != internal_default_instance()) delete tracestate_;
  if (this != internal_default_instance()) delete resource_;
}

void Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span& Span::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Span_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stack_trace_ != nullptr) {
    delete stack_trace_;
  }
  stack_trace_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_events_ != nullptr) {
    delete time_events_;
  }
  time_events_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && links_ != nullptr) {
    delete links_;
  }
  links_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && same_process_as_parent_span_ != nullptr) {
    delete same_process_as_parent_span_;
  }
  same_process_as_parent_span_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && child_span_count_ != nullptr) {
    delete child_span_count_;
  }
  child_span_count_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tracestate_ != nullptr) {
    delete tracestate_;
  }
  tracestate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  kind_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Span::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Span*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_trace_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes span_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes parent_span_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_parent_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .opencensus.proto.trace.v1.TruncatableString name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_name();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp start_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_start_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp end_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_end_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.Attributes attributes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_Attributes::_InternalParse;
        object = msg->mutable_attributes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.StackTrace stack_trace = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::StackTrace::_InternalParse;
        object = msg->mutable_stack_trace();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_TimeEvents::_InternalParse;
        object = msg->mutable_time_events();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.Links links = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_Links::_InternalParse;
        object = msg->mutable_links();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Status status = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue same_process_as_parent_span = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_same_process_as_parent_span();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.UInt32Value child_span_count = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::UInt32Value::_InternalParse;
        object = msg->mutable_child_span_count();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.Span.SpanKind kind = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_kind(static_cast<::opencensus::proto::trace::v1::Span_SpanKind>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Span_Tracestate::_InternalParse;
        object = msg->mutable_tracestate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.resource.v1.Resource resource = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::resource::v1::Resource::_InternalParse;
        object = msg->mutable_resource();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Span)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trace_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_span_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes parent_span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parent_span_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.TruncatableString name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.Attributes attributes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.StackTrace stack_trace = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stack_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.Links links = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Status status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue same_process_as_parent_span = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_same_process_as_parent_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value child_span_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_child_span_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.SpanKind kind = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::opencensus::proto::trace::v1::Span_SpanKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tracestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.resource.v1.Resource resource = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Span)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->trace_id(), output);
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->span_id(), output);
  }

  // bytes parent_span_id = 3;
  if (this->parent_span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->parent_span_id(), output);
  }

  // .opencensus.proto.trace.v1.TruncatableString name = 4;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::name(this), output);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::start_time(this), output);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::end_time(this), output);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 7;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::attributes(this), output);
  }

  // .opencensus.proto.trace.v1.StackTrace stack_trace = 8;
  if (this->has_stack_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::stack_trace(this), output);
  }

  // .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;
  if (this->has_time_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::time_events(this), output);
  }

  // .opencensus.proto.trace.v1.Span.Links links = 10;
  if (this->has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::links(this), output);
  }

  // .opencensus.proto.trace.v1.Status status = 11;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::status(this), output);
  }

  // .google.protobuf.BoolValue same_process_as_parent_span = 12;
  if (this->has_same_process_as_parent_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::same_process_as_parent_span(this), output);
  }

  // .google.protobuf.UInt32Value child_span_count = 13;
  if (this->has_child_span_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::child_span_count(this), output);
  }

  // .opencensus.proto.trace.v1.Span.SpanKind kind = 14;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->kind(), output);
  }

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;
  if (this->has_tracestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::tracestate(this), output);
  }

  // .opencensus.proto.resource.v1.Resource resource = 16;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::resource(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Span)
}

::google::protobuf::uint8* Span::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->trace_id(), target);
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->span_id(), target);
  }

  // bytes parent_span_id = 3;
  if (this->parent_span_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->parent_span_id(), target);
  }

  // .opencensus.proto.trace.v1.TruncatableString name = 4;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::name(this), target);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::start_time(this), target);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::end_time(this), target);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 7;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::attributes(this), target);
  }

  // .opencensus.proto.trace.v1.StackTrace stack_trace = 8;
  if (this->has_stack_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::stack_trace(this), target);
  }

  // .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;
  if (this->has_time_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::time_events(this), target);
  }

  // .opencensus.proto.trace.v1.Span.Links links = 10;
  if (this->has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::links(this), target);
  }

  // .opencensus.proto.trace.v1.Status status = 11;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::status(this), target);
  }

  // .google.protobuf.BoolValue same_process_as_parent_span = 12;
  if (this->has_same_process_as_parent_span()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::same_process_as_parent_span(this), target);
  }

  // .google.protobuf.UInt32Value child_span_count = 13;
  if (this->has_child_span_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::child_span_count(this), target);
  }

  // .opencensus.proto.trace.v1.Span.SpanKind kind = 14;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->kind(), target);
  }

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;
  if (this->has_tracestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::tracestate(this), target);
  }

  // .opencensus.proto.resource.v1.Resource resource = 16;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::resource(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Span)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trace_id());
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->span_id());
  }

  // bytes parent_span_id = 3;
  if (this->parent_span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parent_span_id());
  }

  // .opencensus.proto.trace.v1.TruncatableString name = 4;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 7;
  if (this->has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  // .opencensus.proto.trace.v1.StackTrace stack_trace = 8;
  if (this->has_stack_trace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stack_trace_);
  }

  // .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;
  if (this->has_time_events()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_events_);
  }

  // .opencensus.proto.trace.v1.Span.Links links = 10;
  if (this->has_links()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *links_);
  }

  // .opencensus.proto.trace.v1.Status status = 11;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.BoolValue same_process_as_parent_span = 12;
  if (this->has_same_process_as_parent_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *same_process_as_parent_span_);
  }

  // .google.protobuf.UInt32Value child_span_count = 13;
  if (this->has_child_span_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *child_span_count_);
  }

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;
  if (this->has_tracestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tracestate_);
  }

  // .opencensus.proto.resource.v1.Resource resource = 16;
  if (this->has_resource()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  // .opencensus.proto.trace.v1.Span.SpanKind kind = 14;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const Span* source =
      ::google::protobuf::DynamicCastToGenerated<Span>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Span)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Span)
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trace_id().size() > 0) {

    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  if (from.span_id().size() > 0) {

    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  if (from.parent_span_id().size() > 0) {

    parent_span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_span_id_);
  }
  if (from.has_name()) {
    mutable_name()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.name());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.has_attributes()) {
    mutable_attributes()->::opencensus::proto::trace::v1::Span_Attributes::MergeFrom(from.attributes());
  }
  if (from.has_stack_trace()) {
    mutable_stack_trace()->::opencensus::proto::trace::v1::StackTrace::MergeFrom(from.stack_trace());
  }
  if (from.has_time_events()) {
    mutable_time_events()->::opencensus::proto::trace::v1::Span_TimeEvents::MergeFrom(from.time_events());
  }
  if (from.has_links()) {
    mutable_links()->::opencensus::proto::trace::v1::Span_Links::MergeFrom(from.links());
  }
  if (from.has_status()) {
    mutable_status()->::opencensus::proto::trace::v1::Status::MergeFrom(from.status());
  }
  if (from.has_same_process_as_parent_span()) {
    mutable_same_process_as_parent_span()->::google::protobuf::BoolValue::MergeFrom(from.same_process_as_parent_span());
  }
  if (from.has_child_span_count()) {
    mutable_child_span_count()->::google::protobuf::UInt32Value::MergeFrom(from.child_span_count());
  }
  if (from.has_tracestate()) {
    mutable_tracestate()->::opencensus::proto::trace::v1::Span_Tracestate::MergeFrom(from.tracestate());
  }
  if (from.has_resource()) {
    mutable_resource()->::opencensus::proto::resource::v1::Resource::MergeFrom(from.resource());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trace_id_.Swap(&other->trace_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_span_id_.Swap(&other->parent_span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_, other->name_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(attributes_, other->attributes_);
  swap(stack_trace_, other->stack_trace_);
  swap(time_events_, other->time_events_);
  swap(links_, other->links_);
  swap(status_, other->status_);
  swap(same_process_as_parent_span_, other->same_process_as_parent_span_);
  swap(child_span_count_, other->child_span_count_);
  swap(tracestate_, other->tracestate_);
  swap(resource_, other->resource_);
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kCodeFieldNumber;
const int Status::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Status)
}

void Status::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Status_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Status_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Status::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Status*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.trace.v1.Status.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Status)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.trace.v1.Status.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Status)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.Status.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.Status.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AttributeValue::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_AttributeValue_default_instance_.string_value_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
  ::opencensus::proto::trace::v1::_AttributeValue_default_instance_.int_value_ = PROTOBUF_LONGLONG(0);
  ::opencensus::proto::trace::v1::_AttributeValue_default_instance_.bool_value_ = false;
  ::opencensus::proto::trace::v1::_AttributeValue_default_instance_.double_value_ = 0;
}
class AttributeValue::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::TruncatableString& string_value(const AttributeValue* msg);
};

const ::opencensus::proto::trace::v1::TruncatableString&
AttributeValue::HasBitSetters::string_value(const AttributeValue* msg) {
  return *msg->value_.string_value_;
}
void AttributeValue::set_allocated_string_value(::opencensus::proto::trace::v1::TruncatableString* string_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (string_value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      string_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_value, submessage_arena);
    }
    set_has_string_value();
    value_.string_value_ = string_value;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.AttributeValue.string_value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttributeValue::kStringValueFieldNumber;
const int AttributeValue::kIntValueFieldNumber;
const int AttributeValue::kBoolValueFieldNumber;
const int AttributeValue::kDoubleValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttributeValue::AttributeValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.AttributeValue)
}
AttributeValue::AttributeValue(const AttributeValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      mutable_string_value()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.AttributeValue)
}

void AttributeValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  clear_has_value();
}

AttributeValue::~AttributeValue() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.AttributeValue)
  SharedDtor();
}

void AttributeValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void AttributeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeValue& AttributeValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AttributeValue_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void AttributeValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opencensus.proto.trace.v1.AttributeValue)
  switch (value_case()) {
    case kStringValue: {
      delete value_.string_value_;
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void AttributeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AttributeValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AttributeValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.TruncatableString string_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_string_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 int_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_int_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool bool_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bool_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double double_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_double_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AttributeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.AttributeValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.TruncatableString string_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.AttributeValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.AttributeValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AttributeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::string_value(this), output);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
  }

  // bool bool_value = 3;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bool_value(), output);
  }

  // double double_value = 4;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->double_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.AttributeValue)
}

::google::protobuf::uint8* AttributeValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString string_value = 1;
  if (has_string_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::string_value(this), target);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_value(), target);
  }

  // bool bool_value = 3;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bool_value(), target);
  }

  // double double_value = 4;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->double_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.AttributeValue)
  return target;
}

size_t AttributeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.AttributeValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .opencensus.proto.trace.v1.TruncatableString string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.string_value_);
      break;
    }
    // int64 int_value = 2;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeValue* source =
      ::google::protobuf::DynamicCastToGenerated<AttributeValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.AttributeValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.AttributeValue)
    MergeFrom(*source);
  }
}

void AttributeValue::MergeFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      mutable_string_value()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void AttributeValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeValue::CopyFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeValue::IsInitialized() const {
  return true;
}

void AttributeValue::Swap(AttributeValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttributeValue::InternalSwap(AttributeValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AttributeValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StackTrace_StackFrame::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_StackTrace_StackFrame_default_instance_._instance.get_mutable()->function_name_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
  ::opencensus::proto::trace::v1::_StackTrace_StackFrame_default_instance_._instance.get_mutable()->original_function_name_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
  ::opencensus::proto::trace::v1::_StackTrace_StackFrame_default_instance_._instance.get_mutable()->file_name_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
  ::opencensus::proto::trace::v1::_StackTrace_StackFrame_default_instance_._instance.get_mutable()->load_module_ = const_cast< ::opencensus::proto::trace::v1::Module*>(
      ::opencensus::proto::trace::v1::Module::internal_default_instance());
  ::opencensus::proto::trace::v1::_StackTrace_StackFrame_default_instance_._instance.get_mutable()->source_version_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
}
class StackTrace_StackFrame::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::TruncatableString& function_name(const StackTrace_StackFrame* msg);
  static const ::opencensus::proto::trace::v1::TruncatableString& original_function_name(const StackTrace_StackFrame* msg);
  static const ::opencensus::proto::trace::v1::TruncatableString& file_name(const StackTrace_StackFrame* msg);
  static const ::opencensus::proto::trace::v1::Module& load_module(const StackTrace_StackFrame* msg);
  static const ::opencensus::proto::trace::v1::TruncatableString& source_version(const StackTrace_StackFrame* msg);
};

const ::opencensus::proto::trace::v1::TruncatableString&
StackTrace_StackFrame::HasBitSetters::function_name(const StackTrace_StackFrame* msg) {
  return *msg->function_name_;
}
const ::opencensus::proto::trace::v1::TruncatableString&
StackTrace_StackFrame::HasBitSetters::original_function_name(const StackTrace_StackFrame* msg) {
  return *msg->original_function_name_;
}
const ::opencensus::proto::trace::v1::TruncatableString&
StackTrace_StackFrame::HasBitSetters::file_name(const StackTrace_StackFrame* msg) {
  return *msg->file_name_;
}
const ::opencensus::proto::trace::v1::Module&
StackTrace_StackFrame::HasBitSetters::load_module(const StackTrace_StackFrame* msg) {
  return *msg->load_module_;
}
const ::opencensus::proto::trace::v1::TruncatableString&
StackTrace_StackFrame::HasBitSetters::source_version(const StackTrace_StackFrame* msg) {
  return *msg->source_version_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace_StackFrame::kFunctionNameFieldNumber;
const int StackTrace_StackFrame::kOriginalFunctionNameFieldNumber;
const int StackTrace_StackFrame::kFileNameFieldNumber;
const int StackTrace_StackFrame::kLineNumberFieldNumber;
const int StackTrace_StackFrame::kColumnNumberFieldNumber;
const int StackTrace_StackFrame::kLoadModuleFieldNumber;
const int StackTrace_StackFrame::kSourceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace_StackFrame::StackTrace_StackFrame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.StackTrace.StackFrame)
}
StackTrace_StackFrame::StackTrace_StackFrame(const StackTrace_StackFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_function_name()) {
    function_name_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.function_name_);
  } else {
    function_name_ = nullptr;
  }
  if (from.has_original_function_name()) {
    original_function_name_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.original_function_name_);
  } else {
    original_function_name_ = nullptr;
  }
  if (from.has_file_name()) {
    file_name_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.file_name_);
  } else {
    file_name_ = nullptr;
  }
  if (from.has_load_module()) {
    load_module_ = new ::opencensus::proto::trace::v1::Module(*from.load_module_);
  } else {
    load_module_ = nullptr;
  }
  if (from.has_source_version()) {
    source_version_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.source_version_);
  } else {
    source_version_ = nullptr;
  }
  ::memcpy(&line_number_, &from.line_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_number_) -
    reinterpret_cast<char*>(&line_number_)) + sizeof(column_number_));
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.StackTrace.StackFrame)
}

void StackTrace_StackFrame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::memset(&function_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_number_) -
      reinterpret_cast<char*>(&function_name_)) + sizeof(column_number_));
}

StackTrace_StackFrame::~StackTrace_StackFrame() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.StackTrace.StackFrame)
  SharedDtor();
}

void StackTrace_StackFrame::SharedDtor() {
  if (this != internal_default_instance()) delete function_name_;
  if (this != internal_default_instance()) delete original_function_name_;
  if (this != internal_default_instance()) delete file_name_;
  if (this != internal_default_instance()) delete load_module_;
  if (this != internal_default_instance()) delete source_version_;
}

void StackTrace_StackFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StackTrace_StackFrame& StackTrace_StackFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StackTrace_StackFrame_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void StackTrace_StackFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && function_name_ != nullptr) {
    delete function_name_;
  }
  function_name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && original_function_name_ != nullptr) {
    delete original_function_name_;
  }
  original_function_name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && file_name_ != nullptr) {
    delete file_name_;
  }
  file_name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && load_module_ != nullptr) {
    delete load_module_;
  }
  load_module_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_version_ != nullptr) {
    delete source_version_;
  }
  source_version_ = nullptr;
  ::memset(&line_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_number_) -
      reinterpret_cast<char*>(&line_number_)) + sizeof(column_number_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StackTrace_StackFrame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StackTrace_StackFrame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.TruncatableString function_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_function_name();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.TruncatableString original_function_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_original_function_name();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.TruncatableString file_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_file_name();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 line_number = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_line_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 column_number = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_column_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .opencensus.proto.trace.v1.Module load_module = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::Module::_InternalParse;
        object = msg->mutable_load_module();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.TruncatableString source_version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_source_version();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StackTrace_StackFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.TruncatableString function_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_function_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.TruncatableString original_function_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_original_function_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.TruncatableString file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 line_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 column_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &column_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.Module load_module = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_load_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.TruncatableString source_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.StackTrace.StackFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.StackTrace.StackFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StackTrace_StackFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString function_name = 1;
  if (this->has_function_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::function_name(this), output);
  }

  // .opencensus.proto.trace.v1.TruncatableString original_function_name = 2;
  if (this->has_original_function_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::original_function_name(this), output);
  }

  // .opencensus.proto.trace.v1.TruncatableString file_name = 3;
  if (this->has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::file_name(this), output);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->line_number(), output);
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->column_number(), output);
  }

  // .opencensus.proto.trace.v1.Module load_module = 6;
  if (this->has_load_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::load_module(this), output);
  }

  // .opencensus.proto.trace.v1.TruncatableString source_version = 7;
  if (this->has_source_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::source_version(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.StackTrace.StackFrame)
}

::google::protobuf::uint8* StackTrace_StackFrame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString function_name = 1;
  if (this->has_function_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::function_name(this), target);
  }

  // .opencensus.proto.trace.v1.TruncatableString original_function_name = 2;
  if (this->has_original_function_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::original_function_name(this), target);
  }

  // .opencensus.proto.trace.v1.TruncatableString file_name = 3;
  if (this->has_file_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::file_name(this), target);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->line_number(), target);
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->column_number(), target);
  }

  // .opencensus.proto.trace.v1.Module load_module = 6;
  if (this->has_load_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::load_module(this), target);
  }

  // .opencensus.proto.trace.v1.TruncatableString source_version = 7;
  if (this->has_source_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::source_version(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.StackTrace.StackFrame)
  return target;
}

size_t StackTrace_StackFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString function_name = 1;
  if (this->has_function_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *function_name_);
  }

  // .opencensus.proto.trace.v1.TruncatableString original_function_name = 2;
  if (this->has_original_function_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *original_function_name_);
  }

  // .opencensus.proto.trace.v1.TruncatableString file_name = 3;
  if (this->has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_name_);
  }

  // .opencensus.proto.trace.v1.Module load_module = 6;
  if (this->has_load_module()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *load_module_);
  }

  // .opencensus.proto.trace.v1.TruncatableString source_version = 7;
  if (this->has_source_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_version_);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_number());
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->column_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StackTrace_StackFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace_StackFrame* source =
      ::google::protobuf::DynamicCastToGenerated<StackTrace_StackFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.StackTrace.StackFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.StackTrace.StackFrame)
    MergeFrom(*source);
  }
}

void StackTrace_StackFrame::MergeFrom(const StackTrace_StackFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_function_name()) {
    mutable_function_name()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.function_name());
  }
  if (from.has_original_function_name()) {
    mutable_original_function_name()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.original_function_name());
  }
  if (from.has_file_name()) {
    mutable_file_name()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.file_name());
  }
  if (from.has_load_module()) {
    mutable_load_module()->::opencensus::proto::trace::v1::Module::MergeFrom(from.load_module());
  }
  if (from.has_source_version()) {
    mutable_source_version()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.source_version());
  }
  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
  if (from.column_number() != 0) {
    set_column_number(from.column_number());
  }
}

void StackTrace_StackFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace_StackFrame::CopyFrom(const StackTrace_StackFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace_StackFrame::IsInitialized() const {
  return true;
}

void StackTrace_StackFrame::Swap(StackTrace_StackFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace_StackFrame::InternalSwap(StackTrace_StackFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(function_name_, other->function_name_);
  swap(original_function_name_, other->original_function_name_);
  swap(file_name_, other->file_name_);
  swap(load_module_, other->load_module_);
  swap(source_version_, other->source_version_);
  swap(line_number_, other->line_number_);
  swap(column_number_, other->column_number_);
}

::google::protobuf::Metadata StackTrace_StackFrame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StackTrace_StackFrames::InitAsDefaultInstance() {
}
class StackTrace_StackFrames::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace_StackFrames::kFrameFieldNumber;
const int StackTrace_StackFrames::kDroppedFramesCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace_StackFrames::StackTrace_StackFrames()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.StackTrace.StackFrames)
}
StackTrace_StackFrames::StackTrace_StackFrames(const StackTrace_StackFrames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      frame_(from.frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropped_frames_count_ = from.dropped_frames_count_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.StackTrace.StackFrames)
}

void StackTrace_StackFrames::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  dropped_frames_count_ = 0;
}

StackTrace_StackFrames::~StackTrace_StackFrames() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.StackTrace.StackFrames)
  SharedDtor();
}

void StackTrace_StackFrames::SharedDtor() {
}

void StackTrace_StackFrames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StackTrace_StackFrames& StackTrace_StackFrames::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StackTrace_StackFrames_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void StackTrace_StackFrames::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.Clear();
  dropped_frames_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StackTrace_StackFrames::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StackTrace_StackFrames*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::opencensus::proto::trace::v1::StackTrace_StackFrame::_InternalParse;
          object = msg->add_frame();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 dropped_frames_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dropped_frames_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StackTrace_StackFrames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_frames_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_frames_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.StackTrace.StackFrames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.StackTrace.StackFrames)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StackTrace_StackFrames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->frame(static_cast<int>(i)),
      output);
  }

  // int32 dropped_frames_count = 2;
  if (this->dropped_frames_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dropped_frames_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.StackTrace.StackFrames)
}

::google::protobuf::uint8* StackTrace_StackFrames::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->frame(static_cast<int>(i)), target);
  }

  // int32 dropped_frames_count = 2;
  if (this->dropped_frames_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dropped_frames_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.StackTrace.StackFrames)
  return target;
}

size_t StackTrace_StackFrames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frame(static_cast<int>(i)));
    }
  }

  // int32 dropped_frames_count = 2;
  if (this->dropped_frames_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dropped_frames_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StackTrace_StackFrames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace_StackFrames* source =
      ::google::protobuf::DynamicCastToGenerated<StackTrace_StackFrames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.StackTrace.StackFrames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.StackTrace.StackFrames)
    MergeFrom(*source);
  }
}

void StackTrace_StackFrames::MergeFrom(const StackTrace_StackFrames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_.MergeFrom(from.frame_);
  if (from.dropped_frames_count() != 0) {
    set_dropped_frames_count(from.dropped_frames_count());
  }
}

void StackTrace_StackFrames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace_StackFrames::CopyFrom(const StackTrace_StackFrames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.StackTrace.StackFrames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace_StackFrames::IsInitialized() const {
  return true;
}

void StackTrace_StackFrames::Swap(StackTrace_StackFrames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace_StackFrames::InternalSwap(StackTrace_StackFrames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&frame_)->InternalSwap(CastToBase(&other->frame_));
  swap(dropped_frames_count_, other->dropped_frames_count_);
}

::google::protobuf::Metadata StackTrace_StackFrames::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StackTrace::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_StackTrace_default_instance_._instance.get_mutable()->stack_frames_ = const_cast< ::opencensus::proto::trace::v1::StackTrace_StackFrames*>(
      ::opencensus::proto::trace::v1::StackTrace_StackFrames::internal_default_instance());
}
class StackTrace::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::StackTrace_StackFrames& stack_frames(const StackTrace* msg);
};

const ::opencensus::proto::trace::v1::StackTrace_StackFrames&
StackTrace::HasBitSetters::stack_frames(const StackTrace* msg) {
  return *msg->stack_frames_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace::kStackFramesFieldNumber;
const int StackTrace::kStackTraceHashIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace::StackTrace()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.StackTrace)
}
StackTrace::StackTrace(const StackTrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stack_frames()) {
    stack_frames_ = new ::opencensus::proto::trace::v1::StackTrace_StackFrames(*from.stack_frames_);
  } else {
    stack_frames_ = nullptr;
  }
  stack_trace_hash_id_ = from.stack_trace_hash_id_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.StackTrace)
}

void StackTrace::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::memset(&stack_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stack_trace_hash_id_) -
      reinterpret_cast<char*>(&stack_frames_)) + sizeof(stack_trace_hash_id_));
}

StackTrace::~StackTrace() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.StackTrace)
  SharedDtor();
}

void StackTrace::SharedDtor() {
  if (this != internal_default_instance()) delete stack_frames_;
}

void StackTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StackTrace& StackTrace::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StackTrace_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void StackTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stack_frames_ != nullptr) {
    delete stack_frames_;
  }
  stack_frames_ = nullptr;
  stack_trace_hash_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StackTrace::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StackTrace*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::StackTrace_StackFrames::_InternalParse;
        object = msg->mutable_stack_frames();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint64 stack_trace_hash_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stack_trace_hash_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StackTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.StackTrace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stack_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 stack_trace_hash_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stack_trace_hash_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.StackTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.StackTrace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StackTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;
  if (this->has_stack_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::stack_frames(this), output);
  }

  // uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stack_trace_hash_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.StackTrace)
}

::google::protobuf::uint8* StackTrace::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;
  if (this->has_stack_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::stack_frames(this), target);
  }

  // uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stack_trace_hash_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.StackTrace)
  return target;
}

size_t StackTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.StackTrace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;
  if (this->has_stack_frames()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stack_frames_);
  }

  // uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stack_trace_hash_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StackTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace* source =
      ::google::protobuf::DynamicCastToGenerated<StackTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.StackTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.StackTrace)
    MergeFrom(*source);
  }
}

void StackTrace::MergeFrom(const StackTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stack_frames()) {
    mutable_stack_frames()->::opencensus::proto::trace::v1::StackTrace_StackFrames::MergeFrom(from.stack_frames());
  }
  if (from.stack_trace_hash_id() != 0) {
    set_stack_trace_hash_id(from.stack_trace_hash_id());
  }
}

void StackTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace::CopyFrom(const StackTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace::IsInitialized() const {
  return true;
}

void StackTrace::Swap(StackTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace::InternalSwap(StackTrace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stack_frames_, other->stack_frames_);
  swap(stack_trace_hash_id_, other->stack_trace_hash_id_);
}

::google::protobuf::Metadata StackTrace::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Module::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_Module_default_instance_._instance.get_mutable()->module_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
  ::opencensus::proto::trace::v1::_Module_default_instance_._instance.get_mutable()->build_id_ = const_cast< ::opencensus::proto::trace::v1::TruncatableString*>(
      ::opencensus::proto::trace::v1::TruncatableString::internal_default_instance());
}
class Module::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::TruncatableString& module(const Module* msg);
  static const ::opencensus::proto::trace::v1::TruncatableString& build_id(const Module* msg);
};

const ::opencensus::proto::trace::v1::TruncatableString&
Module::HasBitSetters::module(const Module* msg) {
  return *msg->module_;
}
const ::opencensus::proto::trace::v1::TruncatableString&
Module::HasBitSetters::build_id(const Module* msg) {
  return *msg->build_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Module::kModuleFieldNumber;
const int Module::kBuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Module::Module()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.Module)
}
Module::Module(const Module& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module()) {
    module_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.module_);
  } else {
    module_ = nullptr;
  }
  if (from.has_build_id()) {
    build_id_ = new ::opencensus::proto::trace::v1::TruncatableString(*from.build_id_);
  } else {
    build_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.Module)
}

void Module::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Module_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_id_) -
      reinterpret_cast<char*>(&module_)) + sizeof(build_id_));
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.Module)
  SharedDtor();
}

void Module::SharedDtor() {
  if (this != internal_default_instance()) delete module_;
  if (this != internal_default_instance()) delete build_id_;
}

void Module::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Module& Module::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Module_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && module_ != nullptr) {
    delete module_;
  }
  module_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && build_id_ != nullptr) {
    delete build_id_;
  }
  build_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Module::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Module*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.TruncatableString module = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_module();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.TruncatableString build_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::TruncatableString::_InternalParse;
        object = msg->mutable_build_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.Module)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.TruncatableString module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.TruncatableString build_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_build_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.Module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.Module)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString module = 1;
  if (this->has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::module(this), output);
  }

  // .opencensus.proto.trace.v1.TruncatableString build_id = 2;
  if (this->has_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::build_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.Module)
}

::google::protobuf::uint8* Module::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString module = 1;
  if (this->has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::module(this), target);
  }

  // .opencensus.proto.trace.v1.TruncatableString build_id = 2;
  if (this->has_build_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::build_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.Module)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.TruncatableString module = 1;
  if (this->has_module()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *module_);
  }

  // .opencensus.proto.trace.v1.TruncatableString build_id = 2;
  if (this->has_build_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *build_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Module::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.Module)
  GOOGLE_DCHECK_NE(&from, this);
  const Module* source =
      ::google::protobuf::DynamicCastToGenerated<Module>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.Module)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.Module)
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_module()) {
    mutable_module()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.module());
  }
  if (from.has_build_id()) {
    mutable_build_id()->::opencensus::proto::trace::v1::TruncatableString::MergeFrom(from.build_id());
  }
}

void Module::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  return true;
}

void Module::Swap(Module* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Module::InternalSwap(Module* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(module_, other->module_);
  swap(build_id_, other->build_id_);
}

::google::protobuf::Metadata Module::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TruncatableString::InitAsDefaultInstance() {
}
class TruncatableString::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncatableString::kValueFieldNumber;
const int TruncatableString::kTruncatedByteCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncatableString::TruncatableString()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.TruncatableString)
}
TruncatableString::TruncatableString(const TruncatableString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  truncated_byte_count_ = from.truncated_byte_count_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.TruncatableString)
}

void TruncatableString::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  truncated_byte_count_ = 0;
}

TruncatableString::~TruncatableString() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.TruncatableString)
  SharedDtor();
}

void TruncatableString::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TruncatableString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TruncatableString& TruncatableString::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TruncatableString_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void TruncatableString::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.TruncatableString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  truncated_byte_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TruncatableString::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TruncatableString*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("opencensus.proto.trace.v1.TruncatableString.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 truncated_byte_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_truncated_byte_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TruncatableString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.TruncatableString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opencensus.proto.trace.v1.TruncatableString.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 truncated_byte_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truncated_byte_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.TruncatableString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.TruncatableString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TruncatableString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.TruncatableString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.TruncatableString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // int32 truncated_byte_count = 2;
  if (this->truncated_byte_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->truncated_byte_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.TruncatableString)
}

::google::protobuf::uint8* TruncatableString::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.TruncatableString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opencensus.proto.trace.v1.TruncatableString.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // int32 truncated_byte_count = 2;
  if (this->truncated_byte_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->truncated_byte_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.TruncatableString)
  return target;
}

size_t TruncatableString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.TruncatableString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // int32 truncated_byte_count = 2;
  if (this->truncated_byte_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truncated_byte_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TruncatableString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.TruncatableString)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncatableString* source =
      ::google::protobuf::DynamicCastToGenerated<TruncatableString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.TruncatableString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.TruncatableString)
    MergeFrom(*source);
  }
}

void TruncatableString::MergeFrom(const TruncatableString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.TruncatableString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.truncated_byte_count() != 0) {
    set_truncated_byte_count(from.truncated_byte_count());
  }
}

void TruncatableString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.TruncatableString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncatableString::CopyFrom(const TruncatableString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.TruncatableString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncatableString::IsInitialized() const {
  return true;
}

void TruncatableString::Swap(TruncatableString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncatableString::InternalSwap(TruncatableString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(truncated_byte_count_, other->truncated_byte_count_);
}

::google::protobuf::Metadata TruncatableString::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_Tracestate_Entry* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_Tracestate_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_Tracestate_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_Tracestate* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_Tracestate >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_Tracestate >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_Attributes* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_Attributes >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_Attributes >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_TimeEvent* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_TimeEvent >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_TimeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_TimeEvents* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_TimeEvents >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_TimeEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_Link* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_Link >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_Link >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span_Links* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_Links >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span_Links >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Span* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Span >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Span >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Status* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Status >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::AttributeValue* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::AttributeValue >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::AttributeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::StackTrace_StackFrame* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::StackTrace_StackFrame >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::StackTrace_StackFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::StackTrace_StackFrames* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::StackTrace_StackFrames >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::StackTrace_StackFrames >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::StackTrace* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::StackTrace >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::StackTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::Module* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::Module >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::Module >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::TruncatableString* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::TruncatableString >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::TruncatableString >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
