// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace.proto

#ifndef PROTOBUF_INCLUDED_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto
#define PROTOBUF_INCLUDED_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "opencensus/proto/resource/v1/resource.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto();
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {
class AttributeValue;
class AttributeValueDefaultTypeInternal;
extern AttributeValueDefaultTypeInternal _AttributeValue_default_instance_;
class Module;
class ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class Span;
class SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
class Span_Attributes;
class Span_AttributesDefaultTypeInternal;
extern Span_AttributesDefaultTypeInternal _Span_Attributes_default_instance_;
class Span_Attributes_AttributeMapEntry_DoNotUse;
class Span_Attributes_AttributeMapEntry_DoNotUseDefaultTypeInternal;
extern Span_Attributes_AttributeMapEntry_DoNotUseDefaultTypeInternal _Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_;
class Span_Link;
class Span_LinkDefaultTypeInternal;
extern Span_LinkDefaultTypeInternal _Span_Link_default_instance_;
class Span_Links;
class Span_LinksDefaultTypeInternal;
extern Span_LinksDefaultTypeInternal _Span_Links_default_instance_;
class Span_TimeEvent;
class Span_TimeEventDefaultTypeInternal;
extern Span_TimeEventDefaultTypeInternal _Span_TimeEvent_default_instance_;
class Span_TimeEvent_Annotation;
class Span_TimeEvent_AnnotationDefaultTypeInternal;
extern Span_TimeEvent_AnnotationDefaultTypeInternal _Span_TimeEvent_Annotation_default_instance_;
class Span_TimeEvent_MessageEvent;
class Span_TimeEvent_MessageEventDefaultTypeInternal;
extern Span_TimeEvent_MessageEventDefaultTypeInternal _Span_TimeEvent_MessageEvent_default_instance_;
class Span_TimeEvents;
class Span_TimeEventsDefaultTypeInternal;
extern Span_TimeEventsDefaultTypeInternal _Span_TimeEvents_default_instance_;
class Span_Tracestate;
class Span_TracestateDefaultTypeInternal;
extern Span_TracestateDefaultTypeInternal _Span_Tracestate_default_instance_;
class Span_Tracestate_Entry;
class Span_Tracestate_EntryDefaultTypeInternal;
extern Span_Tracestate_EntryDefaultTypeInternal _Span_Tracestate_Entry_default_instance_;
class StackTrace;
class StackTraceDefaultTypeInternal;
extern StackTraceDefaultTypeInternal _StackTrace_default_instance_;
class StackTrace_StackFrame;
class StackTrace_StackFrameDefaultTypeInternal;
extern StackTrace_StackFrameDefaultTypeInternal _StackTrace_StackFrame_default_instance_;
class StackTrace_StackFrames;
class StackTrace_StackFramesDefaultTypeInternal;
extern StackTrace_StackFramesDefaultTypeInternal _StackTrace_StackFrames_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class TruncatableString;
class TruncatableStringDefaultTypeInternal;
extern TruncatableStringDefaultTypeInternal _TruncatableString_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> ::opencensus::proto::trace::v1::AttributeValue* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::AttributeValue>(Arena*);
template<> ::opencensus::proto::trace::v1::Module* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Module>(Arena*);
template<> ::opencensus::proto::trace::v1::Span* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_Attributes* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Attributes>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Attributes_AttributeMapEntry_DoNotUse>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_Link* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Link>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_Links* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Links>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_TimeEvent* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_TimeEvent>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_TimeEvent_Annotation>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_TimeEvents* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_TimeEvents>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_Tracestate* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Tracestate>(Arena*);
template<> ::opencensus::proto::trace::v1::Span_Tracestate_Entry* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Tracestate_Entry>(Arena*);
template<> ::opencensus::proto::trace::v1::StackTrace* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::StackTrace>(Arena*);
template<> ::opencensus::proto::trace::v1::StackTrace_StackFrame* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::StackTrace_StackFrame>(Arena*);
template<> ::opencensus::proto::trace::v1::StackTrace_StackFrames* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::StackTrace_StackFrames>(Arena*);
template<> ::opencensus::proto::trace::v1::Status* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::Status>(Arena*);
template<> ::opencensus::proto::trace::v1::TruncatableString* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {

enum Span_TimeEvent_MessageEvent_Type {
  Span_TimeEvent_MessageEvent_Type_TYPE_UNSPECIFIED = 0,
  Span_TimeEvent_MessageEvent_Type_SENT = 1,
  Span_TimeEvent_MessageEvent_Type_RECEIVED = 2,
  Span_TimeEvent_MessageEvent_Type_Span_TimeEvent_MessageEvent_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Span_TimeEvent_MessageEvent_Type_Span_TimeEvent_MessageEvent_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Span_TimeEvent_MessageEvent_Type_IsValid(int value);
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent_Type_Type_MIN = Span_TimeEvent_MessageEvent_Type_TYPE_UNSPECIFIED;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent_Type_Type_MAX = Span_TimeEvent_MessageEvent_Type_RECEIVED;
const int Span_TimeEvent_MessageEvent_Type_Type_ARRAYSIZE = Span_TimeEvent_MessageEvent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Span_TimeEvent_MessageEvent_Type_descriptor();
inline const ::std::string& Span_TimeEvent_MessageEvent_Type_Name(Span_TimeEvent_MessageEvent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Span_TimeEvent_MessageEvent_Type_descriptor(), value);
}
inline bool Span_TimeEvent_MessageEvent_Type_Parse(
    const ::std::string& name, Span_TimeEvent_MessageEvent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Span_TimeEvent_MessageEvent_Type>(
    Span_TimeEvent_MessageEvent_Type_descriptor(), name, value);
}
enum Span_Link_Type {
  Span_Link_Type_TYPE_UNSPECIFIED = 0,
  Span_Link_Type_CHILD_LINKED_SPAN = 1,
  Span_Link_Type_PARENT_LINKED_SPAN = 2,
  Span_Link_Type_Span_Link_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Span_Link_Type_Span_Link_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Span_Link_Type_IsValid(int value);
const Span_Link_Type Span_Link_Type_Type_MIN = Span_Link_Type_TYPE_UNSPECIFIED;
const Span_Link_Type Span_Link_Type_Type_MAX = Span_Link_Type_PARENT_LINKED_SPAN;
const int Span_Link_Type_Type_ARRAYSIZE = Span_Link_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Span_Link_Type_descriptor();
inline const ::std::string& Span_Link_Type_Name(Span_Link_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Span_Link_Type_descriptor(), value);
}
inline bool Span_Link_Type_Parse(
    const ::std::string& name, Span_Link_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Span_Link_Type>(
    Span_Link_Type_descriptor(), name, value);
}
enum Span_SpanKind {
  Span_SpanKind_SPAN_KIND_UNSPECIFIED = 0,
  Span_SpanKind_SERVER = 1,
  Span_SpanKind_CLIENT = 2,
  Span_SpanKind_Span_SpanKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Span_SpanKind_Span_SpanKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Span_SpanKind_IsValid(int value);
const Span_SpanKind Span_SpanKind_SpanKind_MIN = Span_SpanKind_SPAN_KIND_UNSPECIFIED;
const Span_SpanKind Span_SpanKind_SpanKind_MAX = Span_SpanKind_CLIENT;
const int Span_SpanKind_SpanKind_ARRAYSIZE = Span_SpanKind_SpanKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Span_SpanKind_descriptor();
inline const ::std::string& Span_SpanKind_Name(Span_SpanKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Span_SpanKind_descriptor(), value);
}
inline bool Span_SpanKind_Parse(
    const ::std::string& name, Span_SpanKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Span_SpanKind>(
    Span_SpanKind_descriptor(), name, value);
}
// ===================================================================

class Span_Tracestate_Entry :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.Tracestate.Entry) */ {
 public:
  Span_Tracestate_Entry();
  virtual ~Span_Tracestate_Entry();

  Span_Tracestate_Entry(const Span_Tracestate_Entry& from);

  inline Span_Tracestate_Entry& operator=(const Span_Tracestate_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_Tracestate_Entry(Span_Tracestate_Entry&& from) noexcept
    : Span_Tracestate_Entry() {
    *this = ::std::move(from);
  }

  inline Span_Tracestate_Entry& operator=(Span_Tracestate_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_Tracestate_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_Tracestate_Entry* internal_default_instance() {
    return reinterpret_cast<const Span_Tracestate_Entry*>(
               &_Span_Tracestate_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Span_Tracestate_Entry* other);
  friend void swap(Span_Tracestate_Entry& a, Span_Tracestate_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_Tracestate_Entry* New() const final {
    return CreateMaybeMessage<Span_Tracestate_Entry>(nullptr);
  }

  Span_Tracestate_Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_Tracestate_Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_Tracestate_Entry& from);
  void MergeFrom(const Span_Tracestate_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Tracestate_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Tracestate.Entry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Tracestate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.Tracestate) */ {
 public:
  Span_Tracestate();
  virtual ~Span_Tracestate();

  Span_Tracestate(const Span_Tracestate& from);

  inline Span_Tracestate& operator=(const Span_Tracestate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_Tracestate(Span_Tracestate&& from) noexcept
    : Span_Tracestate() {
    *this = ::std::move(from);
  }

  inline Span_Tracestate& operator=(Span_Tracestate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_Tracestate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_Tracestate* internal_default_instance() {
    return reinterpret_cast<const Span_Tracestate*>(
               &_Span_Tracestate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Span_Tracestate* other);
  friend void swap(Span_Tracestate& a, Span_Tracestate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_Tracestate* New() const final {
    return CreateMaybeMessage<Span_Tracestate>(nullptr);
  }

  Span_Tracestate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_Tracestate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_Tracestate& from);
  void MergeFrom(const Span_Tracestate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Tracestate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Span_Tracestate_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::opencensus::proto::trace::v1::Span_Tracestate_Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Tracestate_Entry >*
      mutable_entries();
  const ::opencensus::proto::trace::v1::Span_Tracestate_Entry& entries(int index) const;
  ::opencensus::proto::trace::v1::Span_Tracestate_Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Tracestate_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Tracestate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Tracestate_Entry > entries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Attributes_AttributeMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Span_Attributes_AttributeMapEntry_DoNotUse, 
    ::std::string, ::opencensus::proto::trace::v1::AttributeValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Span_Attributes_AttributeMapEntry_DoNotUse, 
    ::std::string, ::opencensus::proto::trace::v1::AttributeValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Span_Attributes_AttributeMapEntry_DoNotUse();
  Span_Attributes_AttributeMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Span_Attributes_AttributeMapEntry_DoNotUse& other);
  static const Span_Attributes_AttributeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Span_Attributes_AttributeMapEntry_DoNotUse*>(&_Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Span_Attributes :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.Attributes) */ {
 public:
  Span_Attributes();
  virtual ~Span_Attributes();

  Span_Attributes(const Span_Attributes& from);

  inline Span_Attributes& operator=(const Span_Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_Attributes(Span_Attributes&& from) noexcept
    : Span_Attributes() {
    *this = ::std::move(from);
  }

  inline Span_Attributes& operator=(Span_Attributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_Attributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_Attributes* internal_default_instance() {
    return reinterpret_cast<const Span_Attributes*>(
               &_Span_Attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Span_Attributes* other);
  friend void swap(Span_Attributes& a, Span_Attributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_Attributes* New() const final {
    return CreateMaybeMessage<Span_Attributes>(nullptr);
  }

  Span_Attributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_Attributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_Attributes& from);
  void MergeFrom(const Span_Attributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Attributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1;
  int attribute_map_size() const;
  void clear_attribute_map();
  static const int kAttributeMapFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >&
      attribute_map() const;
  ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >*
      mutable_attribute_map();

  // int32 dropped_attributes_count = 2;
  void clear_dropped_attributes_count();
  static const int kDroppedAttributesCountFieldNumber = 2;
  ::google::protobuf::int32 dropped_attributes_count() const;
  void set_dropped_attributes_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Attributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Span_Attributes_AttributeMapEntry_DoNotUse,
      ::std::string, ::opencensus::proto::trace::v1::AttributeValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attribute_map_;
  ::google::protobuf::int32 dropped_attributes_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvent_Annotation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.TimeEvent.Annotation) */ {
 public:
  Span_TimeEvent_Annotation();
  virtual ~Span_TimeEvent_Annotation();

  Span_TimeEvent_Annotation(const Span_TimeEvent_Annotation& from);

  inline Span_TimeEvent_Annotation& operator=(const Span_TimeEvent_Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_TimeEvent_Annotation(Span_TimeEvent_Annotation&& from) noexcept
    : Span_TimeEvent_Annotation() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvent_Annotation& operator=(Span_TimeEvent_Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_TimeEvent_Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_TimeEvent_Annotation* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvent_Annotation*>(
               &_Span_TimeEvent_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Span_TimeEvent_Annotation* other);
  friend void swap(Span_TimeEvent_Annotation& a, Span_TimeEvent_Annotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvent_Annotation* New() const final {
    return CreateMaybeMessage<Span_TimeEvent_Annotation>(nullptr);
  }

  Span_TimeEvent_Annotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvent_Annotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_TimeEvent_Annotation& from);
  void MergeFrom(const Span_TimeEvent_Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvent_Annotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .opencensus.proto.trace.v1.TruncatableString description = 1;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::opencensus::proto::trace::v1::TruncatableString& description() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_description();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_description();
  void set_allocated_description(::opencensus::proto::trace::v1::TruncatableString* description);

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 2;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  const ::opencensus::proto::trace::v1::Span_Attributes& attributes() const;
  ::opencensus::proto::trace::v1::Span_Attributes* release_attributes();
  ::opencensus::proto::trace::v1::Span_Attributes* mutable_attributes();
  void set_allocated_attributes(::opencensus::proto::trace::v1::Span_Attributes* attributes);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::opencensus::proto::trace::v1::TruncatableString* description_;
  ::opencensus::proto::trace::v1::Span_Attributes* attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvent_MessageEvent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent) */ {
 public:
  Span_TimeEvent_MessageEvent();
  virtual ~Span_TimeEvent_MessageEvent();

  Span_TimeEvent_MessageEvent(const Span_TimeEvent_MessageEvent& from);

  inline Span_TimeEvent_MessageEvent& operator=(const Span_TimeEvent_MessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_TimeEvent_MessageEvent(Span_TimeEvent_MessageEvent&& from) noexcept
    : Span_TimeEvent_MessageEvent() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvent_MessageEvent& operator=(Span_TimeEvent_MessageEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_TimeEvent_MessageEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_TimeEvent_MessageEvent* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvent_MessageEvent*>(
               &_Span_TimeEvent_MessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Span_TimeEvent_MessageEvent* other);
  friend void swap(Span_TimeEvent_MessageEvent& a, Span_TimeEvent_MessageEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvent_MessageEvent* New() const final {
    return CreateMaybeMessage<Span_TimeEvent_MessageEvent>(nullptr);
  }

  Span_TimeEvent_MessageEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvent_MessageEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_TimeEvent_MessageEvent& from);
  void MergeFrom(const Span_TimeEvent_MessageEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvent_MessageEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Span_TimeEvent_MessageEvent_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Span_TimeEvent_MessageEvent_Type_TYPE_UNSPECIFIED;
  static const Type SENT =
    Span_TimeEvent_MessageEvent_Type_SENT;
  static const Type RECEIVED =
    Span_TimeEvent_MessageEvent_Type_RECEIVED;
  static inline bool Type_IsValid(int value) {
    return Span_TimeEvent_MessageEvent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Span_TimeEvent_MessageEvent_Type_Type_MIN;
  static const Type Type_MAX =
    Span_TimeEvent_MessageEvent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Span_TimeEvent_MessageEvent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Span_TimeEvent_MessageEvent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Span_TimeEvent_MessageEvent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Span_TimeEvent_MessageEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 uncompressed_size = 3;
  void clear_uncompressed_size();
  static const int kUncompressedSizeFieldNumber = 3;
  ::google::protobuf::uint64 uncompressed_size() const;
  void set_uncompressed_size(::google::protobuf::uint64 value);

  // uint64 compressed_size = 4;
  void clear_compressed_size();
  static const int kCompressedSizeFieldNumber = 4;
  ::google::protobuf::uint64 compressed_size() const;
  void set_compressed_size(::google::protobuf::uint64 value);

  // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type type() const;
  void set_type(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 uncompressed_size_;
  ::google::protobuf::uint64 compressed_size_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.TimeEvent) */ {
 public:
  Span_TimeEvent();
  virtual ~Span_TimeEvent();

  Span_TimeEvent(const Span_TimeEvent& from);

  inline Span_TimeEvent& operator=(const Span_TimeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_TimeEvent(Span_TimeEvent&& from) noexcept
    : Span_TimeEvent() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvent& operator=(Span_TimeEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_TimeEvent& default_instance();

  enum ValueCase {
    kAnnotation = 2,
    kMessageEvent = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_TimeEvent* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvent*>(
               &_Span_TimeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Span_TimeEvent* other);
  friend void swap(Span_TimeEvent& a, Span_TimeEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvent* New() const final {
    return CreateMaybeMessage<Span_TimeEvent>(nullptr);
  }

  Span_TimeEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_TimeEvent& from);
  void MergeFrom(const Span_TimeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Span_TimeEvent_Annotation Annotation;
  typedef Span_TimeEvent_MessageEvent MessageEvent;

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;
  bool has_annotation() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 2;
  const ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation& annotation() const;
  ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* release_annotation();
  ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* mutable_annotation();
  void set_allocated_annotation(::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* annotation);

  // .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;
  bool has_message_event() const;
  void clear_message_event();
  static const int kMessageEventFieldNumber = 3;
  const ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent& message_event() const;
  ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* release_message_event();
  ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* mutable_message_event();
  void set_allocated_message_event(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* message_event);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvent)
 private:
  class HasBitSetters;
  void set_has_annotation();
  void set_has_message_event();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* time_;
  union ValueUnion {
    ValueUnion() {}
    ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* annotation_;
    ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* message_event_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_TimeEvents :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.TimeEvents) */ {
 public:
  Span_TimeEvents();
  virtual ~Span_TimeEvents();

  Span_TimeEvents(const Span_TimeEvents& from);

  inline Span_TimeEvents& operator=(const Span_TimeEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_TimeEvents(Span_TimeEvents&& from) noexcept
    : Span_TimeEvents() {
    *this = ::std::move(from);
  }

  inline Span_TimeEvents& operator=(Span_TimeEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_TimeEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_TimeEvents* internal_default_instance() {
    return reinterpret_cast<const Span_TimeEvents*>(
               &_Span_TimeEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Span_TimeEvents* other);
  friend void swap(Span_TimeEvents& a, Span_TimeEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_TimeEvents* New() const final {
    return CreateMaybeMessage<Span_TimeEvents>(nullptr);
  }

  Span_TimeEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_TimeEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_TimeEvents& from);
  void MergeFrom(const Span_TimeEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_TimeEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;
  int time_event_size() const;
  void clear_time_event();
  static const int kTimeEventFieldNumber = 1;
  ::opencensus::proto::trace::v1::Span_TimeEvent* mutable_time_event(int index);
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_TimeEvent >*
      mutable_time_event();
  const ::opencensus::proto::trace::v1::Span_TimeEvent& time_event(int index) const;
  ::opencensus::proto::trace::v1::Span_TimeEvent* add_time_event();
  const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_TimeEvent >&
      time_event() const;

  // int32 dropped_annotations_count = 2;
  void clear_dropped_annotations_count();
  static const int kDroppedAnnotationsCountFieldNumber = 2;
  ::google::protobuf::int32 dropped_annotations_count() const;
  void set_dropped_annotations_count(::google::protobuf::int32 value);

  // int32 dropped_message_events_count = 3;
  void clear_dropped_message_events_count();
  static const int kDroppedMessageEventsCountFieldNumber = 3;
  ::google::protobuf::int32 dropped_message_events_count() const;
  void set_dropped_message_events_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvents)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_TimeEvent > time_event_;
  ::google::protobuf::int32 dropped_annotations_count_;
  ::google::protobuf::int32 dropped_message_events_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Link :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.Link) */ {
 public:
  Span_Link();
  virtual ~Span_Link();

  Span_Link(const Span_Link& from);

  inline Span_Link& operator=(const Span_Link& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_Link(Span_Link&& from) noexcept
    : Span_Link() {
    *this = ::std::move(from);
  }

  inline Span_Link& operator=(Span_Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_Link* internal_default_instance() {
    return reinterpret_cast<const Span_Link*>(
               &_Span_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Span_Link* other);
  friend void swap(Span_Link& a, Span_Link& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_Link* New() const final {
    return CreateMaybeMessage<Span_Link>(nullptr);
  }

  Span_Link* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_Link>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_Link& from);
  void MergeFrom(const Span_Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Span_Link_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Span_Link_Type_TYPE_UNSPECIFIED;
  static const Type CHILD_LINKED_SPAN =
    Span_Link_Type_CHILD_LINKED_SPAN;
  static const Type PARENT_LINKED_SPAN =
    Span_Link_Type_PARENT_LINKED_SPAN;
  static inline bool Type_IsValid(int value) {
    return Span_Link_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Span_Link_Type_Type_MIN;
  static const Type Type_MAX =
    Span_Link_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Span_Link_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Span_Link_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Span_Link_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Span_Link_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes trace_id = 1;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  const ::std::string& trace_id() const;
  void set_trace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_id(::std::string&& value);
  #endif
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  ::std::string* mutable_trace_id();
  ::std::string* release_trace_id();
  void set_allocated_trace_id(::std::string* trace_id);

  // bytes span_id = 2;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  const ::std::string& span_id() const;
  void set_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_span_id(::std::string&& value);
  #endif
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  ::std::string* mutable_span_id();
  ::std::string* release_span_id();
  void set_allocated_span_id(::std::string* span_id);

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 4;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  const ::opencensus::proto::trace::v1::Span_Attributes& attributes() const;
  ::opencensus::proto::trace::v1::Span_Attributes* release_attributes();
  ::opencensus::proto::trace::v1::Span_Attributes* mutable_attributes();
  void set_allocated_attributes(::opencensus::proto::trace::v1::Span_Attributes* attributes);

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;
  bool has_tracestate() const;
  void clear_tracestate();
  static const int kTracestateFieldNumber = 5;
  const ::opencensus::proto::trace::v1::Span_Tracestate& tracestate() const;
  ::opencensus::proto::trace::v1::Span_Tracestate* release_tracestate();
  ::opencensus::proto::trace::v1::Span_Tracestate* mutable_tracestate();
  void set_allocated_tracestate(::opencensus::proto::trace::v1::Span_Tracestate* tracestate);

  // .opencensus.proto.trace.v1.Span.Link.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::opencensus::proto::trace::v1::Span_Link_Type type() const;
  void set_type(::opencensus::proto::trace::v1::Span_Link_Type value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Link)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trace_id_;
  ::google::protobuf::internal::ArenaStringPtr span_id_;
  ::opencensus::proto::trace::v1::Span_Attributes* attributes_;
  ::opencensus::proto::trace::v1::Span_Tracestate* tracestate_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Links :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span.Links) */ {
 public:
  Span_Links();
  virtual ~Span_Links();

  Span_Links(const Span_Links& from);

  inline Span_Links& operator=(const Span_Links& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span_Links(Span_Links&& from) noexcept
    : Span_Links() {
    *this = ::std::move(from);
  }

  inline Span_Links& operator=(Span_Links&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span_Links& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span_Links* internal_default_instance() {
    return reinterpret_cast<const Span_Links*>(
               &_Span_Links_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Span_Links* other);
  friend void swap(Span_Links& a, Span_Links& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span_Links* New() const final {
    return CreateMaybeMessage<Span_Links>(nullptr);
  }

  Span_Links* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span_Links>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span_Links& from);
  void MergeFrom(const Span_Links& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Links* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opencensus.proto.trace.v1.Span.Link link = 1;
  int link_size() const;
  void clear_link();
  static const int kLinkFieldNumber = 1;
  ::opencensus::proto::trace::v1::Span_Link* mutable_link(int index);
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Link >*
      mutable_link();
  const ::opencensus::proto::trace::v1::Span_Link& link(int index) const;
  ::opencensus::proto::trace::v1::Span_Link* add_link();
  const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Link >&
      link() const;

  // int32 dropped_links_count = 2;
  void clear_dropped_links_count();
  static const int kDroppedLinksCountFieldNumber = 2;
  ::google::protobuf::int32 dropped_links_count() const;
  void set_dropped_links_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Links)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Link > link_;
  ::google::protobuf::int32 dropped_links_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Span) */ {
 public:
  Span();
  virtual ~Span();

  Span(const Span& from);

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(Span&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Span* other);
  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span* New() const final {
    return CreateMaybeMessage<Span>(nullptr);
  }

  Span* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Span_Tracestate Tracestate;
  typedef Span_Attributes Attributes;
  typedef Span_TimeEvent TimeEvent;
  typedef Span_TimeEvents TimeEvents;
  typedef Span_Link Link;
  typedef Span_Links Links;

  typedef Span_SpanKind SpanKind;
  static const SpanKind SPAN_KIND_UNSPECIFIED =
    Span_SpanKind_SPAN_KIND_UNSPECIFIED;
  static const SpanKind SERVER =
    Span_SpanKind_SERVER;
  static const SpanKind CLIENT =
    Span_SpanKind_CLIENT;
  static inline bool SpanKind_IsValid(int value) {
    return Span_SpanKind_IsValid(value);
  }
  static const SpanKind SpanKind_MIN =
    Span_SpanKind_SpanKind_MIN;
  static const SpanKind SpanKind_MAX =
    Span_SpanKind_SpanKind_MAX;
  static const int SpanKind_ARRAYSIZE =
    Span_SpanKind_SpanKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpanKind_descriptor() {
    return Span_SpanKind_descriptor();
  }
  static inline const ::std::string& SpanKind_Name(SpanKind value) {
    return Span_SpanKind_Name(value);
  }
  static inline bool SpanKind_Parse(const ::std::string& name,
      SpanKind* value) {
    return Span_SpanKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes trace_id = 1;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  const ::std::string& trace_id() const;
  void set_trace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_id(::std::string&& value);
  #endif
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  ::std::string* mutable_trace_id();
  ::std::string* release_trace_id();
  void set_allocated_trace_id(::std::string* trace_id);

  // bytes span_id = 2;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  const ::std::string& span_id() const;
  void set_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_span_id(::std::string&& value);
  #endif
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  ::std::string* mutable_span_id();
  ::std::string* release_span_id();
  void set_allocated_span_id(::std::string* span_id);

  // bytes parent_span_id = 3;
  void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 3;
  const ::std::string& parent_span_id() const;
  void set_parent_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_span_id(::std::string&& value);
  #endif
  void set_parent_span_id(const char* value);
  void set_parent_span_id(const void* value, size_t size);
  ::std::string* mutable_parent_span_id();
  ::std::string* release_parent_span_id();
  void set_allocated_parent_span_id(::std::string* parent_span_id);

  // .opencensus.proto.trace.v1.TruncatableString name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::opencensus::proto::trace::v1::TruncatableString& name() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_name();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_name();
  void set_allocated_name(::opencensus::proto::trace::v1::TruncatableString* name);

  // .google.protobuf.Timestamp start_time = 5;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 6;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // .opencensus.proto.trace.v1.Span.Attributes attributes = 7;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 7;
  const ::opencensus::proto::trace::v1::Span_Attributes& attributes() const;
  ::opencensus::proto::trace::v1::Span_Attributes* release_attributes();
  ::opencensus::proto::trace::v1::Span_Attributes* mutable_attributes();
  void set_allocated_attributes(::opencensus::proto::trace::v1::Span_Attributes* attributes);

  // .opencensus.proto.trace.v1.StackTrace stack_trace = 8;
  bool has_stack_trace() const;
  void clear_stack_trace();
  static const int kStackTraceFieldNumber = 8;
  const ::opencensus::proto::trace::v1::StackTrace& stack_trace() const;
  ::opencensus::proto::trace::v1::StackTrace* release_stack_trace();
  ::opencensus::proto::trace::v1::StackTrace* mutable_stack_trace();
  void set_allocated_stack_trace(::opencensus::proto::trace::v1::StackTrace* stack_trace);

  // .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;
  bool has_time_events() const;
  void clear_time_events();
  static const int kTimeEventsFieldNumber = 9;
  const ::opencensus::proto::trace::v1::Span_TimeEvents& time_events() const;
  ::opencensus::proto::trace::v1::Span_TimeEvents* release_time_events();
  ::opencensus::proto::trace::v1::Span_TimeEvents* mutable_time_events();
  void set_allocated_time_events(::opencensus::proto::trace::v1::Span_TimeEvents* time_events);

  // .opencensus.proto.trace.v1.Span.Links links = 10;
  bool has_links() const;
  void clear_links();
  static const int kLinksFieldNumber = 10;
  const ::opencensus::proto::trace::v1::Span_Links& links() const;
  ::opencensus::proto::trace::v1::Span_Links* release_links();
  ::opencensus::proto::trace::v1::Span_Links* mutable_links();
  void set_allocated_links(::opencensus::proto::trace::v1::Span_Links* links);

  // .opencensus.proto.trace.v1.Status status = 11;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 11;
  const ::opencensus::proto::trace::v1::Status& status() const;
  ::opencensus::proto::trace::v1::Status* release_status();
  ::opencensus::proto::trace::v1::Status* mutable_status();
  void set_allocated_status(::opencensus::proto::trace::v1::Status* status);

  // .google.protobuf.BoolValue same_process_as_parent_span = 12;
  bool has_same_process_as_parent_span() const;
  void clear_same_process_as_parent_span();
  static const int kSameProcessAsParentSpanFieldNumber = 12;
  const ::google::protobuf::BoolValue& same_process_as_parent_span() const;
  ::google::protobuf::BoolValue* release_same_process_as_parent_span();
  ::google::protobuf::BoolValue* mutable_same_process_as_parent_span();
  void set_allocated_same_process_as_parent_span(::google::protobuf::BoolValue* same_process_as_parent_span);

  // .google.protobuf.UInt32Value child_span_count = 13;
  bool has_child_span_count() const;
  void clear_child_span_count();
  static const int kChildSpanCountFieldNumber = 13;
  const ::google::protobuf::UInt32Value& child_span_count() const;
  ::google::protobuf::UInt32Value* release_child_span_count();
  ::google::protobuf::UInt32Value* mutable_child_span_count();
  void set_allocated_child_span_count(::google::protobuf::UInt32Value* child_span_count);

  // .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;
  bool has_tracestate() const;
  void clear_tracestate();
  static const int kTracestateFieldNumber = 15;
  const ::opencensus::proto::trace::v1::Span_Tracestate& tracestate() const;
  ::opencensus::proto::trace::v1::Span_Tracestate* release_tracestate();
  ::opencensus::proto::trace::v1::Span_Tracestate* mutable_tracestate();
  void set_allocated_tracestate(::opencensus::proto::trace::v1::Span_Tracestate* tracestate);

  // .opencensus.proto.resource.v1.Resource resource = 16;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 16;
  const ::opencensus::proto::resource::v1::Resource& resource() const;
  ::opencensus::proto::resource::v1::Resource* release_resource();
  ::opencensus::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opencensus::proto::resource::v1::Resource* resource);

  // .opencensus.proto.trace.v1.Span.SpanKind kind = 14;
  void clear_kind();
  static const int kKindFieldNumber = 14;
  ::opencensus::proto::trace::v1::Span_SpanKind kind() const;
  void set_kind(::opencensus::proto::trace::v1::Span_SpanKind value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trace_id_;
  ::google::protobuf::internal::ArenaStringPtr span_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_span_id_;
  ::opencensus::proto::trace::v1::TruncatableString* name_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  ::opencensus::proto::trace::v1::Span_Attributes* attributes_;
  ::opencensus::proto::trace::v1::StackTrace* stack_trace_;
  ::opencensus::proto::trace::v1::Span_TimeEvents* time_events_;
  ::opencensus::proto::trace::v1::Span_Links* links_;
  ::opencensus::proto::trace::v1::Status* status_;
  ::google::protobuf::BoolValue* same_process_as_parent_span_;
  ::google::protobuf::UInt32Value* child_span_count_;
  ::opencensus::proto::trace::v1::Span_Tracestate* tracestate_;
  ::opencensus::proto::resource::v1::Resource* resource_;
  int kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Status :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Status)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class AttributeValue :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.AttributeValue) */ {
 public:
  AttributeValue();
  virtual ~AttributeValue();

  AttributeValue(const AttributeValue& from);

  inline AttributeValue& operator=(const AttributeValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttributeValue(AttributeValue&& from) noexcept
    : AttributeValue() {
    *this = ::std::move(from);
  }

  inline AttributeValue& operator=(AttributeValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AttributeValue& default_instance();

  enum ValueCase {
    kStringValue = 1,
    kIntValue = 2,
    kBoolValue = 3,
    kDoubleValue = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeValue* internal_default_instance() {
    return reinterpret_cast<const AttributeValue*>(
               &_AttributeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AttributeValue* other);
  friend void swap(AttributeValue& a, AttributeValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttributeValue* New() const final {
    return CreateMaybeMessage<AttributeValue>(nullptr);
  }

  AttributeValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttributeValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttributeValue& from);
  void MergeFrom(const AttributeValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .opencensus.proto.trace.v1.TruncatableString string_value = 1;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 1;
  const ::opencensus::proto::trace::v1::TruncatableString& string_value() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_string_value();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_string_value();
  void set_allocated_string_value(::opencensus::proto::trace::v1::TruncatableString* string_value);

  // int64 int_value = 2;
  private:
  bool has_int_value() const;
  public:
  void clear_int_value();
  static const int kIntValueFieldNumber = 2;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // bool bool_value = 3;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 3;
  bool bool_value() const;
  void set_bool_value(bool value);

  // double double_value = 4;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  double double_value() const;
  void set_double_value(double value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.AttributeValue)
 private:
  class HasBitSetters;
  void set_has_string_value();
  void set_has_int_value();
  void set_has_bool_value();
  void set_has_double_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::opencensus::proto::trace::v1::TruncatableString* string_value_;
    ::google::protobuf::int64 int_value_;
    bool bool_value_;
    double double_value_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class StackTrace_StackFrame :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.StackTrace.StackFrame) */ {
 public:
  StackTrace_StackFrame();
  virtual ~StackTrace_StackFrame();

  StackTrace_StackFrame(const StackTrace_StackFrame& from);

  inline StackTrace_StackFrame& operator=(const StackTrace_StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StackTrace_StackFrame(StackTrace_StackFrame&& from) noexcept
    : StackTrace_StackFrame() {
    *this = ::std::move(from);
  }

  inline StackTrace_StackFrame& operator=(StackTrace_StackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StackTrace_StackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackTrace_StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackTrace_StackFrame*>(
               &_StackTrace_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(StackTrace_StackFrame* other);
  friend void swap(StackTrace_StackFrame& a, StackTrace_StackFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StackTrace_StackFrame* New() const final {
    return CreateMaybeMessage<StackTrace_StackFrame>(nullptr);
  }

  StackTrace_StackFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StackTrace_StackFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StackTrace_StackFrame& from);
  void MergeFrom(const StackTrace_StackFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTrace_StackFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .opencensus.proto.trace.v1.TruncatableString function_name = 1;
  bool has_function_name() const;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 1;
  const ::opencensus::proto::trace::v1::TruncatableString& function_name() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_function_name();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_function_name();
  void set_allocated_function_name(::opencensus::proto::trace::v1::TruncatableString* function_name);

  // .opencensus.proto.trace.v1.TruncatableString original_function_name = 2;
  bool has_original_function_name() const;
  void clear_original_function_name();
  static const int kOriginalFunctionNameFieldNumber = 2;
  const ::opencensus::proto::trace::v1::TruncatableString& original_function_name() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_original_function_name();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_original_function_name();
  void set_allocated_original_function_name(::opencensus::proto::trace::v1::TruncatableString* original_function_name);

  // .opencensus.proto.trace.v1.TruncatableString file_name = 3;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::opencensus::proto::trace::v1::TruncatableString& file_name() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_file_name();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_file_name();
  void set_allocated_file_name(::opencensus::proto::trace::v1::TruncatableString* file_name);

  // .opencensus.proto.trace.v1.Module load_module = 6;
  bool has_load_module() const;
  void clear_load_module();
  static const int kLoadModuleFieldNumber = 6;
  const ::opencensus::proto::trace::v1::Module& load_module() const;
  ::opencensus::proto::trace::v1::Module* release_load_module();
  ::opencensus::proto::trace::v1::Module* mutable_load_module();
  void set_allocated_load_module(::opencensus::proto::trace::v1::Module* load_module);

  // .opencensus.proto.trace.v1.TruncatableString source_version = 7;
  bool has_source_version() const;
  void clear_source_version();
  static const int kSourceVersionFieldNumber = 7;
  const ::opencensus::proto::trace::v1::TruncatableString& source_version() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_source_version();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_source_version();
  void set_allocated_source_version(::opencensus::proto::trace::v1::TruncatableString* source_version);

  // int64 line_number = 4;
  void clear_line_number();
  static const int kLineNumberFieldNumber = 4;
  ::google::protobuf::int64 line_number() const;
  void set_line_number(::google::protobuf::int64 value);

  // int64 column_number = 5;
  void clear_column_number();
  static const int kColumnNumberFieldNumber = 5;
  ::google::protobuf::int64 column_number() const;
  void set_column_number(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.StackTrace.StackFrame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::opencensus::proto::trace::v1::TruncatableString* function_name_;
  ::opencensus::proto::trace::v1::TruncatableString* original_function_name_;
  ::opencensus::proto::trace::v1::TruncatableString* file_name_;
  ::opencensus::proto::trace::v1::Module* load_module_;
  ::opencensus::proto::trace::v1::TruncatableString* source_version_;
  ::google::protobuf::int64 line_number_;
  ::google::protobuf::int64 column_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class StackTrace_StackFrames :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.StackTrace.StackFrames) */ {
 public:
  StackTrace_StackFrames();
  virtual ~StackTrace_StackFrames();

  StackTrace_StackFrames(const StackTrace_StackFrames& from);

  inline StackTrace_StackFrames& operator=(const StackTrace_StackFrames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StackTrace_StackFrames(StackTrace_StackFrames&& from) noexcept
    : StackTrace_StackFrames() {
    *this = ::std::move(from);
  }

  inline StackTrace_StackFrames& operator=(StackTrace_StackFrames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StackTrace_StackFrames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackTrace_StackFrames* internal_default_instance() {
    return reinterpret_cast<const StackTrace_StackFrames*>(
               &_StackTrace_StackFrames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(StackTrace_StackFrames* other);
  friend void swap(StackTrace_StackFrames& a, StackTrace_StackFrames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StackTrace_StackFrames* New() const final {
    return CreateMaybeMessage<StackTrace_StackFrames>(nullptr);
  }

  StackTrace_StackFrames* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StackTrace_StackFrames>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StackTrace_StackFrames& from);
  void MergeFrom(const StackTrace_StackFrames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTrace_StackFrames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;
  int frame_size() const;
  void clear_frame();
  static const int kFrameFieldNumber = 1;
  ::opencensus::proto::trace::v1::StackTrace_StackFrame* mutable_frame(int index);
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::StackTrace_StackFrame >*
      mutable_frame();
  const ::opencensus::proto::trace::v1::StackTrace_StackFrame& frame(int index) const;
  ::opencensus::proto::trace::v1::StackTrace_StackFrame* add_frame();
  const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::StackTrace_StackFrame >&
      frame() const;

  // int32 dropped_frames_count = 2;
  void clear_dropped_frames_count();
  static const int kDroppedFramesCountFieldNumber = 2;
  ::google::protobuf::int32 dropped_frames_count() const;
  void set_dropped_frames_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.StackTrace.StackFrames)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::StackTrace_StackFrame > frame_;
  ::google::protobuf::int32 dropped_frames_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class StackTrace :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.StackTrace) */ {
 public:
  StackTrace();
  virtual ~StackTrace();

  StackTrace(const StackTrace& from);

  inline StackTrace& operator=(const StackTrace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StackTrace(StackTrace&& from) noexcept
    : StackTrace() {
    *this = ::std::move(from);
  }

  inline StackTrace& operator=(StackTrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StackTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackTrace* internal_default_instance() {
    return reinterpret_cast<const StackTrace*>(
               &_StackTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(StackTrace* other);
  friend void swap(StackTrace& a, StackTrace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StackTrace* New() const final {
    return CreateMaybeMessage<StackTrace>(nullptr);
  }

  StackTrace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StackTrace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StackTrace& from);
  void MergeFrom(const StackTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTrace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StackTrace_StackFrame StackFrame;
  typedef StackTrace_StackFrames StackFrames;

  // accessors -------------------------------------------------------

  // .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;
  bool has_stack_frames() const;
  void clear_stack_frames();
  static const int kStackFramesFieldNumber = 1;
  const ::opencensus::proto::trace::v1::StackTrace_StackFrames& stack_frames() const;
  ::opencensus::proto::trace::v1::StackTrace_StackFrames* release_stack_frames();
  ::opencensus::proto::trace::v1::StackTrace_StackFrames* mutable_stack_frames();
  void set_allocated_stack_frames(::opencensus::proto::trace::v1::StackTrace_StackFrames* stack_frames);

  // uint64 stack_trace_hash_id = 2;
  void clear_stack_trace_hash_id();
  static const int kStackTraceHashIdFieldNumber = 2;
  ::google::protobuf::uint64 stack_trace_hash_id() const;
  void set_stack_trace_hash_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.StackTrace)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::opencensus::proto::trace::v1::StackTrace_StackFrames* stack_frames_;
  ::google::protobuf::uint64 stack_trace_hash_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Module :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.Module) */ {
 public:
  Module();
  virtual ~Module();

  Module(const Module& from);

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(Module&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Module& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Module* other);
  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Module* New() const final {
    return CreateMaybeMessage<Module>(nullptr);
  }

  Module* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Module& from);
  void MergeFrom(const Module& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .opencensus.proto.trace.v1.TruncatableString module = 1;
  bool has_module() const;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::opencensus::proto::trace::v1::TruncatableString& module() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_module();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_module();
  void set_allocated_module(::opencensus::proto::trace::v1::TruncatableString* module);

  // .opencensus.proto.trace.v1.TruncatableString build_id = 2;
  bool has_build_id() const;
  void clear_build_id();
  static const int kBuildIdFieldNumber = 2;
  const ::opencensus::proto::trace::v1::TruncatableString& build_id() const;
  ::opencensus::proto::trace::v1::TruncatableString* release_build_id();
  ::opencensus::proto::trace::v1::TruncatableString* mutable_build_id();
  void set_allocated_build_id(::opencensus::proto::trace::v1::TruncatableString* build_id);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Module)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::opencensus::proto::trace::v1::TruncatableString* module_;
  ::opencensus::proto::trace::v1::TruncatableString* build_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class TruncatableString :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.TruncatableString) */ {
 public:
  TruncatableString();
  virtual ~TruncatableString();

  TruncatableString(const TruncatableString& from);

  inline TruncatableString& operator=(const TruncatableString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TruncatableString(TruncatableString&& from) noexcept
    : TruncatableString() {
    *this = ::std::move(from);
  }

  inline TruncatableString& operator=(TruncatableString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TruncatableString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncatableString* internal_default_instance() {
    return reinterpret_cast<const TruncatableString*>(
               &_TruncatableString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TruncatableString* other);
  friend void swap(TruncatableString& a, TruncatableString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TruncatableString* New() const final {
    return CreateMaybeMessage<TruncatableString>(nullptr);
  }

  TruncatableString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TruncatableString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TruncatableString& from);
  void MergeFrom(const TruncatableString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncatableString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // int32 truncated_byte_count = 2;
  void clear_truncated_byte_count();
  static const int kTruncatedByteCountFieldNumber = 2;
  ::google::protobuf::int32 truncated_byte_count() const;
  void set_truncated_byte_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.TruncatableString)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 truncated_byte_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Span_Tracestate_Entry

// string key = 1;
inline void Span_Tracestate_Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span_Tracestate_Entry::key() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
  return key_.GetNoArena();
}
inline void Span_Tracestate_Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
}
#if LANG_CXX11
inline void Span_Tracestate_Entry::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
}
#endif
inline void Span_Tracestate_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
}
inline void Span_Tracestate_Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
}
inline ::std::string* Span_Tracestate_Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span_Tracestate_Entry::release_key() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span_Tracestate_Entry::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.Tracestate.Entry.key)
}

// string value = 2;
inline void Span_Tracestate_Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span_Tracestate_Entry::value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
  return value_.GetNoArena();
}
inline void Span_Tracestate_Entry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
}
#if LANG_CXX11
inline void Span_Tracestate_Entry::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
}
#endif
inline void Span_Tracestate_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
}
inline void Span_Tracestate_Entry::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
}
inline ::std::string* Span_Tracestate_Entry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span_Tracestate_Entry::release_value() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span_Tracestate_Entry::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.Tracestate.Entry.value)
}

// -------------------------------------------------------------------

// Span_Tracestate

// repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;
inline int Span_Tracestate::entries_size() const {
  return entries_.size();
}
inline void Span_Tracestate::clear_entries() {
  entries_.Clear();
}
inline ::opencensus::proto::trace::v1::Span_Tracestate_Entry* Span_Tracestate::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Tracestate.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Tracestate_Entry >*
Span_Tracestate::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.trace.v1.Span.Tracestate.entries)
  return &entries_;
}
inline const ::opencensus::proto::trace::v1::Span_Tracestate_Entry& Span_Tracestate::entries(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Tracestate.entries)
  return entries_.Get(index);
}
inline ::opencensus::proto::trace::v1::Span_Tracestate_Entry* Span_Tracestate::add_entries() {
  // @@protoc_insertion_point(field_add:opencensus.proto.trace.v1.Span.Tracestate.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Tracestate_Entry >&
Span_Tracestate::entries() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.trace.v1.Span.Tracestate.entries)
  return entries_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Span_Attributes

// map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1;
inline int Span_Attributes::attribute_map_size() const {
  return attribute_map_.size();
}
inline void Span_Attributes::clear_attribute_map() {
  attribute_map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >&
Span_Attributes::attribute_map() const {
  // @@protoc_insertion_point(field_map:opencensus.proto.trace.v1.Span.Attributes.attribute_map)
  return attribute_map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::opencensus::proto::trace::v1::AttributeValue >*
Span_Attributes::mutable_attribute_map() {
  // @@protoc_insertion_point(field_mutable_map:opencensus.proto.trace.v1.Span.Attributes.attribute_map)
  return attribute_map_.MutableMap();
}

// int32 dropped_attributes_count = 2;
inline void Span_Attributes::clear_dropped_attributes_count() {
  dropped_attributes_count_ = 0;
}
inline ::google::protobuf::int32 Span_Attributes::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Attributes.dropped_attributes_count)
  return dropped_attributes_count_;
}
inline void Span_Attributes::set_dropped_attributes_count(::google::protobuf::int32 value) {
  
  dropped_attributes_count_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.Attributes.dropped_attributes_count)
}

// -------------------------------------------------------------------

// Span_TimeEvent_Annotation

// .opencensus.proto.trace.v1.TruncatableString description = 1;
inline bool Span_TimeEvent_Annotation::has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline void Span_TimeEvent_Annotation::clear_description() {
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& Span_TimeEvent_Annotation::description() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = description_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.description)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* Span_TimeEvent_Annotation::release_description() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.description)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* Span_TimeEvent_Annotation::mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.description)
  return description_;
}
inline void Span_TimeEvent_Annotation::set_allocated_description(::opencensus::proto::trace::v1::TruncatableString* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.description)
}

// .opencensus.proto.trace.v1.Span.Attributes attributes = 2;
inline bool Span_TimeEvent_Annotation::has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline void Span_TimeEvent_Annotation::clear_attributes() {
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Span_Attributes& Span_TimeEvent_Annotation::attributes() const {
  const ::opencensus::proto::trace::v1::Span_Attributes* p = attributes_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Span_Attributes*>(
      &::opencensus::proto::trace::v1::_Span_Attributes_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_Attributes* Span_TimeEvent_Annotation::release_attributes() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.attributes)
  
  ::opencensus::proto::trace::v1::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Span_Attributes* Span_TimeEvent_Annotation::mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Attributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.attributes)
  return attributes_;
}
inline void Span_TimeEvent_Annotation::set_allocated_attributes(::opencensus::proto::trace::v1::Span_Attributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.TimeEvent.Annotation.attributes)
}

// -------------------------------------------------------------------

// Span_TimeEvent_MessageEvent

// .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;
inline void Span_TimeEvent_MessageEvent::clear_type() {
  type_ = 0;
}
inline ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::type() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.type)
  return static_cast< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type >(type_);
}
inline void Span_TimeEvent_MessageEvent::set_type(::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.type)
}

// uint64 id = 2;
inline void Span_TimeEvent_MessageEvent::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Span_TimeEvent_MessageEvent::id() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.id)
  return id_;
}
inline void Span_TimeEvent_MessageEvent::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.id)
}

// uint64 uncompressed_size = 3;
inline void Span_TimeEvent_MessageEvent::clear_uncompressed_size() {
  uncompressed_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Span_TimeEvent_MessageEvent::uncompressed_size() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.uncompressed_size)
  return uncompressed_size_;
}
inline void Span_TimeEvent_MessageEvent::set_uncompressed_size(::google::protobuf::uint64 value) {
  
  uncompressed_size_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.uncompressed_size)
}

// uint64 compressed_size = 4;
inline void Span_TimeEvent_MessageEvent::clear_compressed_size() {
  compressed_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Span_TimeEvent_MessageEvent::compressed_size() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.compressed_size)
  return compressed_size_;
}
inline void Span_TimeEvent_MessageEvent::set_compressed_size(::google::protobuf::uint64 value) {
  
  compressed_size_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.compressed_size)
}

// -------------------------------------------------------------------

// Span_TimeEvent

// .google.protobuf.Timestamp time = 1;
inline bool Span_TimeEvent::has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Span_TimeEvent::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Span_TimeEvent::release_time() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.TimeEvent.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Span_TimeEvent::mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.TimeEvent.time)
  return time_;
}
inline void Span_TimeEvent::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.TimeEvent.time)
}

// .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;
inline bool Span_TimeEvent::has_annotation() const {
  return value_case() == kAnnotation;
}
inline void Span_TimeEvent::set_has_annotation() {
  _oneof_case_[0] = kAnnotation;
}
inline void Span_TimeEvent::clear_annotation() {
  if (has_annotation()) {
    delete value_.annotation_;
    clear_has_value();
  }
}
inline ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* Span_TimeEvent::release_annotation() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.TimeEvent.annotation)
  if (has_annotation()) {
    clear_has_value();
      ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* temp = value_.annotation_;
    value_.annotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation& Span_TimeEvent::annotation() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.annotation)
  return has_annotation()
      ? *value_.annotation_
      : *reinterpret_cast< ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation*>(&::opencensus::proto::trace::v1::_Span_TimeEvent_Annotation_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation* Span_TimeEvent::mutable_annotation() {
  if (!has_annotation()) {
    clear_value();
    set_has_annotation();
    value_.annotation_ = CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_TimeEvent_Annotation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.TimeEvent.annotation)
  return value_.annotation_;
}

// .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;
inline bool Span_TimeEvent::has_message_event() const {
  return value_case() == kMessageEvent;
}
inline void Span_TimeEvent::set_has_message_event() {
  _oneof_case_[0] = kMessageEvent;
}
inline void Span_TimeEvent::clear_message_event() {
  if (has_message_event()) {
    delete value_.message_event_;
    clear_has_value();
  }
}
inline ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* Span_TimeEvent::release_message_event() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.TimeEvent.message_event)
  if (has_message_event()) {
    clear_has_value();
      ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* temp = value_.message_event_;
    value_.message_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent& Span_TimeEvent::message_event() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvent.message_event)
  return has_message_event()
      ? *value_.message_event_
      : *reinterpret_cast< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent*>(&::opencensus::proto::trace::v1::_Span_TimeEvent_MessageEvent_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent* Span_TimeEvent::mutable_message_event() {
  if (!has_message_event()) {
    clear_value();
    set_has_message_event();
    value_.message_event_ = CreateMaybeMessage< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.TimeEvent.message_event)
  return value_.message_event_;
}

inline bool Span_TimeEvent::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Span_TimeEvent::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Span_TimeEvent::ValueCase Span_TimeEvent::value_case() const {
  return Span_TimeEvent::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Span_TimeEvents

// repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;
inline int Span_TimeEvents::time_event_size() const {
  return time_event_.size();
}
inline void Span_TimeEvents::clear_time_event() {
  time_event_.Clear();
}
inline ::opencensus::proto::trace::v1::Span_TimeEvent* Span_TimeEvents::mutable_time_event(int index) {
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.TimeEvents.time_event)
  return time_event_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_TimeEvent >*
Span_TimeEvents::mutable_time_event() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.trace.v1.Span.TimeEvents.time_event)
  return &time_event_;
}
inline const ::opencensus::proto::trace::v1::Span_TimeEvent& Span_TimeEvents::time_event(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvents.time_event)
  return time_event_.Get(index);
}
inline ::opencensus::proto::trace::v1::Span_TimeEvent* Span_TimeEvents::add_time_event() {
  // @@protoc_insertion_point(field_add:opencensus.proto.trace.v1.Span.TimeEvents.time_event)
  return time_event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_TimeEvent >&
Span_TimeEvents::time_event() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.trace.v1.Span.TimeEvents.time_event)
  return time_event_;
}

// int32 dropped_annotations_count = 2;
inline void Span_TimeEvents::clear_dropped_annotations_count() {
  dropped_annotations_count_ = 0;
}
inline ::google::protobuf::int32 Span_TimeEvents::dropped_annotations_count() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvents.dropped_annotations_count)
  return dropped_annotations_count_;
}
inline void Span_TimeEvents::set_dropped_annotations_count(::google::protobuf::int32 value) {
  
  dropped_annotations_count_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.TimeEvents.dropped_annotations_count)
}

// int32 dropped_message_events_count = 3;
inline void Span_TimeEvents::clear_dropped_message_events_count() {
  dropped_message_events_count_ = 0;
}
inline ::google::protobuf::int32 Span_TimeEvents::dropped_message_events_count() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.TimeEvents.dropped_message_events_count)
  return dropped_message_events_count_;
}
inline void Span_TimeEvents::set_dropped_message_events_count(::google::protobuf::int32 value) {
  
  dropped_message_events_count_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.TimeEvents.dropped_message_events_count)
}

// -------------------------------------------------------------------

// Span_Link

// bytes trace_id = 1;
inline void Span_Link::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span_Link::trace_id() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Link.trace_id)
  return trace_id_.GetNoArena();
}
inline void Span_Link::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.Link.trace_id)
}
#if LANG_CXX11
inline void Span_Link::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Span.Link.trace_id)
}
#endif
inline void Span_Link::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Span.Link.trace_id)
}
inline void Span_Link::set_trace_id(const void* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Span.Link.trace_id)
}
inline ::std::string* Span_Link::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Link.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span_Link::release_trace_id() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.Link.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span_Link::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.Link.trace_id)
}

// bytes span_id = 2;
inline void Span_Link::clear_span_id() {
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span_Link::span_id() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Link.span_id)
  return span_id_.GetNoArena();
}
inline void Span_Link::set_span_id(const ::std::string& value) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.Link.span_id)
}
#if LANG_CXX11
inline void Span_Link::set_span_id(::std::string&& value) {
  
  span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Span.Link.span_id)
}
#endif
inline void Span_Link::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Span.Link.span_id)
}
inline void Span_Link::set_span_id(const void* value, size_t size) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Span.Link.span_id)
}
inline ::std::string* Span_Link::mutable_span_id() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Link.span_id)
  return span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span_Link::release_span_id() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.Link.span_id)
  
  return span_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span_Link::set_allocated_span_id(::std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_id);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.Link.span_id)
}

// .opencensus.proto.trace.v1.Span.Link.Type type = 3;
inline void Span_Link::clear_type() {
  type_ = 0;
}
inline ::opencensus::proto::trace::v1::Span_Link_Type Span_Link::type() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Link.type)
  return static_cast< ::opencensus::proto::trace::v1::Span_Link_Type >(type_);
}
inline void Span_Link::set_type(::opencensus::proto::trace::v1::Span_Link_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.Link.type)
}

// .opencensus.proto.trace.v1.Span.Attributes attributes = 4;
inline bool Span_Link::has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline void Span_Link::clear_attributes() {
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Span_Attributes& Span_Link::attributes() const {
  const ::opencensus::proto::trace::v1::Span_Attributes* p = attributes_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Link.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Span_Attributes*>(
      &::opencensus::proto::trace::v1::_Span_Attributes_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_Attributes* Span_Link::release_attributes() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.Link.attributes)
  
  ::opencensus::proto::trace::v1::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Span_Attributes* Span_Link::mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Attributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Link.attributes)
  return attributes_;
}
inline void Span_Link::set_allocated_attributes(::opencensus::proto::trace::v1::Span_Attributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.Link.attributes)
}

// .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;
inline bool Span_Link::has_tracestate() const {
  return this != internal_default_instance() && tracestate_ != nullptr;
}
inline void Span_Link::clear_tracestate() {
  if (GetArenaNoVirtual() == nullptr && tracestate_ != nullptr) {
    delete tracestate_;
  }
  tracestate_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Span_Tracestate& Span_Link::tracestate() const {
  const ::opencensus::proto::trace::v1::Span_Tracestate* p = tracestate_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Link.tracestate)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Span_Tracestate*>(
      &::opencensus::proto::trace::v1::_Span_Tracestate_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_Tracestate* Span_Link::release_tracestate() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.Link.tracestate)
  
  ::opencensus::proto::trace::v1::Span_Tracestate* temp = tracestate_;
  tracestate_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Span_Tracestate* Span_Link::mutable_tracestate() {
  
  if (tracestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Tracestate>(GetArenaNoVirtual());
    tracestate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Link.tracestate)
  return tracestate_;
}
inline void Span_Link::set_allocated_tracestate(::opencensus::proto::trace::v1::Span_Tracestate* tracestate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tracestate_;
  }
  if (tracestate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracestate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tracestate, submessage_arena);
    }
    
  } else {
    
  }
  tracestate_ = tracestate;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.Link.tracestate)
}

// -------------------------------------------------------------------

// Span_Links

// repeated .opencensus.proto.trace.v1.Span.Link link = 1;
inline int Span_Links::link_size() const {
  return link_.size();
}
inline void Span_Links::clear_link() {
  link_.Clear();
}
inline ::opencensus::proto::trace::v1::Span_Link* Span_Links::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.Links.link)
  return link_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Link >*
Span_Links::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.trace.v1.Span.Links.link)
  return &link_;
}
inline const ::opencensus::proto::trace::v1::Span_Link& Span_Links::link(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Links.link)
  return link_.Get(index);
}
inline ::opencensus::proto::trace::v1::Span_Link* Span_Links::add_link() {
  // @@protoc_insertion_point(field_add:opencensus.proto.trace.v1.Span.Links.link)
  return link_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::Span_Link >&
Span_Links::link() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.trace.v1.Span.Links.link)
  return link_;
}

// int32 dropped_links_count = 2;
inline void Span_Links::clear_dropped_links_count() {
  dropped_links_count_ = 0;
}
inline ::google::protobuf::int32 Span_Links::dropped_links_count() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.Links.dropped_links_count)
  return dropped_links_count_;
}
inline void Span_Links::set_dropped_links_count(::google::protobuf::int32 value) {
  
  dropped_links_count_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.Links.dropped_links_count)
}

// -------------------------------------------------------------------

// Span

// bytes trace_id = 1;
inline void Span::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::trace_id() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.trace_id)
  return trace_id_.GetNoArena();
}
inline void Span::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.trace_id)
}
#if LANG_CXX11
inline void Span::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Span.trace_id)
}
#endif
inline void Span::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Span.trace_id)
}
inline void Span::set_trace_id(const void* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Span.trace_id)
}
inline ::std::string* Span::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_trace_id() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.trace_id)
}

// bytes span_id = 2;
inline void Span::clear_span_id() {
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::span_id() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.span_id)
  return span_id_.GetNoArena();
}
inline void Span::set_span_id(const ::std::string& value) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.span_id)
}
#if LANG_CXX11
inline void Span::set_span_id(::std::string&& value) {
  
  span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Span.span_id)
}
#endif
inline void Span::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Span.span_id)
}
inline void Span::set_span_id(const void* value, size_t size) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Span.span_id)
}
inline ::std::string* Span::mutable_span_id() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.span_id)
  return span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_span_id() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.span_id)
  
  return span_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_span_id(::std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_id);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.span_id)
}

// .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;
inline bool Span::has_tracestate() const {
  return this != internal_default_instance() && tracestate_ != nullptr;
}
inline void Span::clear_tracestate() {
  if (GetArenaNoVirtual() == nullptr && tracestate_ != nullptr) {
    delete tracestate_;
  }
  tracestate_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Span_Tracestate& Span::tracestate() const {
  const ::opencensus::proto::trace::v1::Span_Tracestate* p = tracestate_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.tracestate)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Span_Tracestate*>(
      &::opencensus::proto::trace::v1::_Span_Tracestate_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_Tracestate* Span::release_tracestate() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.tracestate)
  
  ::opencensus::proto::trace::v1::Span_Tracestate* temp = tracestate_;
  tracestate_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Span_Tracestate* Span::mutable_tracestate() {
  
  if (tracestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Tracestate>(GetArenaNoVirtual());
    tracestate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.tracestate)
  return tracestate_;
}
inline void Span::set_allocated_tracestate(::opencensus::proto::trace::v1::Span_Tracestate* tracestate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tracestate_;
  }
  if (tracestate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracestate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tracestate, submessage_arena);
    }
    
  } else {
    
  }
  tracestate_ = tracestate;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.tracestate)
}

// bytes parent_span_id = 3;
inline void Span::clear_parent_span_id() {
  parent_span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::parent_span_id() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.parent_span_id)
  return parent_span_id_.GetNoArena();
}
inline void Span::set_parent_span_id(const ::std::string& value) {
  
  parent_span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.parent_span_id)
}
#if LANG_CXX11
inline void Span::set_parent_span_id(::std::string&& value) {
  
  parent_span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Span.parent_span_id)
}
#endif
inline void Span::set_parent_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Span.parent_span_id)
}
inline void Span::set_parent_span_id(const void* value, size_t size) {
  
  parent_span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Span.parent_span_id)
}
inline ::std::string* Span::mutable_parent_span_id() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.parent_span_id)
  return parent_span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_parent_span_id() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.parent_span_id)
  
  return parent_span_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_parent_span_id(::std::string* parent_span_id) {
  if (parent_span_id != nullptr) {
    
  } else {
    
  }
  parent_span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_span_id);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.parent_span_id)
}

// .opencensus.proto.trace.v1.TruncatableString name = 4;
inline bool Span::has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline void Span::clear_name() {
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& Span::name() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = name_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.name)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* Span::release_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.name)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* Span::mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.name)
  return name_;
}
inline void Span::set_allocated_name(::opencensus::proto::trace::v1::TruncatableString* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.name)
}

// .opencensus.proto.trace.v1.Span.SpanKind kind = 14;
inline void Span::clear_kind() {
  kind_ = 0;
}
inline ::opencensus::proto::trace::v1::Span_SpanKind Span::kind() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.kind)
  return static_cast< ::opencensus::proto::trace::v1::Span_SpanKind >(kind_);
}
inline void Span::set_kind(::opencensus::proto::trace::v1::Span_SpanKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Span.kind)
}

// .google.protobuf.Timestamp start_time = 5;
inline bool Span::has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Span::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.start_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Span::release_start_time() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Span::mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.start_time)
  return start_time_;
}
inline void Span::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.start_time)
}

// .google.protobuf.Timestamp end_time = 6;
inline bool Span::has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Span::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.end_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Span::release_end_time() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Span::mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.end_time)
  return end_time_;
}
inline void Span::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.end_time)
}

// .opencensus.proto.trace.v1.Span.Attributes attributes = 7;
inline bool Span::has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline void Span::clear_attributes() {
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Span_Attributes& Span::attributes() const {
  const ::opencensus::proto::trace::v1::Span_Attributes* p = attributes_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Span_Attributes*>(
      &::opencensus::proto::trace::v1::_Span_Attributes_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_Attributes* Span::release_attributes() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.attributes)
  
  ::opencensus::proto::trace::v1::Span_Attributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Span_Attributes* Span::mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Attributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.attributes)
  return attributes_;
}
inline void Span::set_allocated_attributes(::opencensus::proto::trace::v1::Span_Attributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.attributes)
}

// .opencensus.proto.trace.v1.StackTrace stack_trace = 8;
inline bool Span::has_stack_trace() const {
  return this != internal_default_instance() && stack_trace_ != nullptr;
}
inline void Span::clear_stack_trace() {
  if (GetArenaNoVirtual() == nullptr && stack_trace_ != nullptr) {
    delete stack_trace_;
  }
  stack_trace_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::StackTrace& Span::stack_trace() const {
  const ::opencensus::proto::trace::v1::StackTrace* p = stack_trace_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.stack_trace)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::StackTrace*>(
      &::opencensus::proto::trace::v1::_StackTrace_default_instance_);
}
inline ::opencensus::proto::trace::v1::StackTrace* Span::release_stack_trace() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.stack_trace)
  
  ::opencensus::proto::trace::v1::StackTrace* temp = stack_trace_;
  stack_trace_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::StackTrace* Span::mutable_stack_trace() {
  
  if (stack_trace_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::StackTrace>(GetArenaNoVirtual());
    stack_trace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.stack_trace)
  return stack_trace_;
}
inline void Span::set_allocated_stack_trace(::opencensus::proto::trace::v1::StackTrace* stack_trace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stack_trace_;
  }
  if (stack_trace) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stack_trace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stack_trace, submessage_arena);
    }
    
  } else {
    
  }
  stack_trace_ = stack_trace;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.stack_trace)
}

// .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;
inline bool Span::has_time_events() const {
  return this != internal_default_instance() && time_events_ != nullptr;
}
inline void Span::clear_time_events() {
  if (GetArenaNoVirtual() == nullptr && time_events_ != nullptr) {
    delete time_events_;
  }
  time_events_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Span_TimeEvents& Span::time_events() const {
  const ::opencensus::proto::trace::v1::Span_TimeEvents* p = time_events_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.time_events)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Span_TimeEvents*>(
      &::opencensus::proto::trace::v1::_Span_TimeEvents_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_TimeEvents* Span::release_time_events() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.time_events)
  
  ::opencensus::proto::trace::v1::Span_TimeEvents* temp = time_events_;
  time_events_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Span_TimeEvents* Span::mutable_time_events() {
  
  if (time_events_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Span_TimeEvents>(GetArenaNoVirtual());
    time_events_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.time_events)
  return time_events_;
}
inline void Span::set_allocated_time_events(::opencensus::proto::trace::v1::Span_TimeEvents* time_events) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_events_;
  }
  if (time_events) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_events = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_events, submessage_arena);
    }
    
  } else {
    
  }
  time_events_ = time_events;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.time_events)
}

// .opencensus.proto.trace.v1.Span.Links links = 10;
inline bool Span::has_links() const {
  return this != internal_default_instance() && links_ != nullptr;
}
inline void Span::clear_links() {
  if (GetArenaNoVirtual() == nullptr && links_ != nullptr) {
    delete links_;
  }
  links_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Span_Links& Span::links() const {
  const ::opencensus::proto::trace::v1::Span_Links* p = links_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.links)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Span_Links*>(
      &::opencensus::proto::trace::v1::_Span_Links_default_instance_);
}
inline ::opencensus::proto::trace::v1::Span_Links* Span::release_links() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.links)
  
  ::opencensus::proto::trace::v1::Span_Links* temp = links_;
  links_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Span_Links* Span::mutable_links() {
  
  if (links_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Span_Links>(GetArenaNoVirtual());
    links_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.links)
  return links_;
}
inline void Span::set_allocated_links(::opencensus::proto::trace::v1::Span_Links* links) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete links_;
  }
  if (links) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      links = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, links, submessage_arena);
    }
    
  } else {
    
  }
  links_ = links;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.links)
}

// .opencensus.proto.trace.v1.Status status = 11;
inline bool Span::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void Span::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Status& Span::status() const {
  const ::opencensus::proto::trace::v1::Status* p = status_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Status*>(
      &::opencensus::proto::trace::v1::_Status_default_instance_);
}
inline ::opencensus::proto::trace::v1::Status* Span::release_status() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.status)
  
  ::opencensus::proto::trace::v1::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Status* Span::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.status)
  return status_;
}
inline void Span::set_allocated_status(::opencensus::proto::trace::v1::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.status)
}

// .opencensus.proto.resource.v1.Resource resource = 16;
inline bool Span::has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline const ::opencensus::proto::resource::v1::Resource& Span::resource() const {
  const ::opencensus::proto::resource::v1::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.resource)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::resource::v1::Resource*>(
      &::opencensus::proto::resource::v1::_Resource_default_instance_);
}
inline ::opencensus::proto::resource::v1::Resource* Span::release_resource() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.resource)
  
  ::opencensus::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::opencensus::proto::resource::v1::Resource* Span::mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::resource::v1::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.resource)
  return resource_;
}
inline void Span::set_allocated_resource(::opencensus::proto::resource::v1::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_);
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.resource)
}

// .google.protobuf.BoolValue same_process_as_parent_span = 12;
inline bool Span::has_same_process_as_parent_span() const {
  return this != internal_default_instance() && same_process_as_parent_span_ != nullptr;
}
inline const ::google::protobuf::BoolValue& Span::same_process_as_parent_span() const {
  const ::google::protobuf::BoolValue* p = same_process_as_parent_span_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.same_process_as_parent_span)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* Span::release_same_process_as_parent_span() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.same_process_as_parent_span)
  
  ::google::protobuf::BoolValue* temp = same_process_as_parent_span_;
  same_process_as_parent_span_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* Span::mutable_same_process_as_parent_span() {
  
  if (same_process_as_parent_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    same_process_as_parent_span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.same_process_as_parent_span)
  return same_process_as_parent_span_;
}
inline void Span::set_allocated_same_process_as_parent_span(::google::protobuf::BoolValue* same_process_as_parent_span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(same_process_as_parent_span_);
  }
  if (same_process_as_parent_span) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(same_process_as_parent_span)->GetArena();
    if (message_arena != submessage_arena) {
      same_process_as_parent_span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, same_process_as_parent_span, submessage_arena);
    }
    
  } else {
    
  }
  same_process_as_parent_span_ = same_process_as_parent_span;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.same_process_as_parent_span)
}

// .google.protobuf.UInt32Value child_span_count = 13;
inline bool Span::has_child_span_count() const {
  return this != internal_default_instance() && child_span_count_ != nullptr;
}
inline const ::google::protobuf::UInt32Value& Span::child_span_count() const {
  const ::google::protobuf::UInt32Value* p = child_span_count_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Span.child_span_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* Span::release_child_span_count() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Span.child_span_count)
  
  ::google::protobuf::UInt32Value* temp = child_span_count_;
  child_span_count_ = nullptr;
  return temp;
}
inline ::google::protobuf::UInt32Value* Span::mutable_child_span_count() {
  
  if (child_span_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::UInt32Value>(GetArenaNoVirtual());
    child_span_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Span.child_span_count)
  return child_span_count_;
}
inline void Span::set_allocated_child_span_count(::google::protobuf::UInt32Value* child_span_count) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(child_span_count_);
  }
  if (child_span_count) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(child_span_count)->GetArena();
    if (message_arena != submessage_arena) {
      child_span_count = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, child_span_count, submessage_arena);
    }
    
  } else {
    
  }
  child_span_count_ = child_span_count;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Span.child_span_count)
}

// -------------------------------------------------------------------

// Status

// int32 code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Status.code)
  return code_;
}
inline void Status::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Status.code)
}

// string message = 2;
inline void Status::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Status.message)
  return message_.GetNoArena();
}
inline void Status::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.Status.message)
}
#if LANG_CXX11
inline void Status::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.Status.message)
}
#endif
inline void Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.Status.message)
}
inline void Status::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.Status.message)
}
inline ::std::string* Status::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Status.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Status.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Status.message)
}

// -------------------------------------------------------------------

// AttributeValue

// .opencensus.proto.trace.v1.TruncatableString string_value = 1;
inline bool AttributeValue::has_string_value() const {
  return value_case() == kStringValue;
}
inline void AttributeValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void AttributeValue::clear_string_value() {
  if (has_string_value()) {
    delete value_.string_value_;
    clear_has_value();
  }
}
inline ::opencensus::proto::trace::v1::TruncatableString* AttributeValue::release_string_value() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.AttributeValue.string_value)
  if (has_string_value()) {
    clear_has_value();
      ::opencensus::proto::trace::v1::TruncatableString* temp = value_.string_value_;
    value_.string_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::trace::v1::TruncatableString& AttributeValue::string_value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.AttributeValue.string_value)
  return has_string_value()
      ? *value_.string_value_
      : *reinterpret_cast< ::opencensus::proto::trace::v1::TruncatableString*>(&::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* AttributeValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_ = CreateMaybeMessage< ::opencensus::proto::trace::v1::TruncatableString >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.AttributeValue.string_value)
  return value_.string_value_;
}

// int64 int_value = 2;
inline bool AttributeValue::has_int_value() const {
  return value_case() == kIntValue;
}
inline void AttributeValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void AttributeValue::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 AttributeValue::int_value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.AttributeValue.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void AttributeValue::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.AttributeValue.int_value)
}

// bool bool_value = 3;
inline bool AttributeValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void AttributeValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void AttributeValue::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool AttributeValue::bool_value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.AttributeValue.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void AttributeValue::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.AttributeValue.bool_value)
}

// double double_value = 4;
inline bool AttributeValue::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void AttributeValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void AttributeValue::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double AttributeValue::double_value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.AttributeValue.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void AttributeValue::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.AttributeValue.double_value)
}

inline bool AttributeValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttributeValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline AttributeValue::ValueCase AttributeValue::value_case() const {
  return AttributeValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StackTrace_StackFrame

// .opencensus.proto.trace.v1.TruncatableString function_name = 1;
inline bool StackTrace_StackFrame::has_function_name() const {
  return this != internal_default_instance() && function_name_ != nullptr;
}
inline void StackTrace_StackFrame::clear_function_name() {
  if (GetArenaNoVirtual() == nullptr && function_name_ != nullptr) {
    delete function_name_;
  }
  function_name_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& StackTrace_StackFrame::function_name() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = function_name_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrame.function_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::release_function_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.StackTrace.StackFrame.function_name)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = function_name_;
  function_name_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::mutable_function_name() {
  
  if (function_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    function_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.StackTrace.StackFrame.function_name)
  return function_name_;
}
inline void StackTrace_StackFrame::set_allocated_function_name(::opencensus::proto::trace::v1::TruncatableString* function_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete function_name_;
  }
  if (function_name) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      function_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_name, submessage_arena);
    }
    
  } else {
    
  }
  function_name_ = function_name;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.StackTrace.StackFrame.function_name)
}

// .opencensus.proto.trace.v1.TruncatableString original_function_name = 2;
inline bool StackTrace_StackFrame::has_original_function_name() const {
  return this != internal_default_instance() && original_function_name_ != nullptr;
}
inline void StackTrace_StackFrame::clear_original_function_name() {
  if (GetArenaNoVirtual() == nullptr && original_function_name_ != nullptr) {
    delete original_function_name_;
  }
  original_function_name_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& StackTrace_StackFrame::original_function_name() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = original_function_name_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrame.original_function_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::release_original_function_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.StackTrace.StackFrame.original_function_name)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = original_function_name_;
  original_function_name_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::mutable_original_function_name() {
  
  if (original_function_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    original_function_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.StackTrace.StackFrame.original_function_name)
  return original_function_name_;
}
inline void StackTrace_StackFrame::set_allocated_original_function_name(::opencensus::proto::trace::v1::TruncatableString* original_function_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete original_function_name_;
  }
  if (original_function_name) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      original_function_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, original_function_name, submessage_arena);
    }
    
  } else {
    
  }
  original_function_name_ = original_function_name;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.StackTrace.StackFrame.original_function_name)
}

// .opencensus.proto.trace.v1.TruncatableString file_name = 3;
inline bool StackTrace_StackFrame::has_file_name() const {
  return this != internal_default_instance() && file_name_ != nullptr;
}
inline void StackTrace_StackFrame::clear_file_name() {
  if (GetArenaNoVirtual() == nullptr && file_name_ != nullptr) {
    delete file_name_;
  }
  file_name_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& StackTrace_StackFrame::file_name() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = file_name_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrame.file_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::release_file_name() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.StackTrace.StackFrame.file_name)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = file_name_;
  file_name_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::mutable_file_name() {
  
  if (file_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    file_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.StackTrace.StackFrame.file_name)
  return file_name_;
}
inline void StackTrace_StackFrame::set_allocated_file_name(::opencensus::proto::trace::v1::TruncatableString* file_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_name_;
  }
  if (file_name) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_name, submessage_arena);
    }
    
  } else {
    
  }
  file_name_ = file_name;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.StackTrace.StackFrame.file_name)
}

// int64 line_number = 4;
inline void StackTrace_StackFrame::clear_line_number() {
  line_number_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StackTrace_StackFrame::line_number() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrame.line_number)
  return line_number_;
}
inline void StackTrace_StackFrame::set_line_number(::google::protobuf::int64 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.StackTrace.StackFrame.line_number)
}

// int64 column_number = 5;
inline void StackTrace_StackFrame::clear_column_number() {
  column_number_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StackTrace_StackFrame::column_number() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrame.column_number)
  return column_number_;
}
inline void StackTrace_StackFrame::set_column_number(::google::protobuf::int64 value) {
  
  column_number_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.StackTrace.StackFrame.column_number)
}

// .opencensus.proto.trace.v1.Module load_module = 6;
inline bool StackTrace_StackFrame::has_load_module() const {
  return this != internal_default_instance() && load_module_ != nullptr;
}
inline void StackTrace_StackFrame::clear_load_module() {
  if (GetArenaNoVirtual() == nullptr && load_module_ != nullptr) {
    delete load_module_;
  }
  load_module_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::Module& StackTrace_StackFrame::load_module() const {
  const ::opencensus::proto::trace::v1::Module* p = load_module_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrame.load_module)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::Module*>(
      &::opencensus::proto::trace::v1::_Module_default_instance_);
}
inline ::opencensus::proto::trace::v1::Module* StackTrace_StackFrame::release_load_module() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.StackTrace.StackFrame.load_module)
  
  ::opencensus::proto::trace::v1::Module* temp = load_module_;
  load_module_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::Module* StackTrace_StackFrame::mutable_load_module() {
  
  if (load_module_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::Module>(GetArenaNoVirtual());
    load_module_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.StackTrace.StackFrame.load_module)
  return load_module_;
}
inline void StackTrace_StackFrame::set_allocated_load_module(::opencensus::proto::trace::v1::Module* load_module) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete load_module_;
  }
  if (load_module) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      load_module = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, load_module, submessage_arena);
    }
    
  } else {
    
  }
  load_module_ = load_module;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.StackTrace.StackFrame.load_module)
}

// .opencensus.proto.trace.v1.TruncatableString source_version = 7;
inline bool StackTrace_StackFrame::has_source_version() const {
  return this != internal_default_instance() && source_version_ != nullptr;
}
inline void StackTrace_StackFrame::clear_source_version() {
  if (GetArenaNoVirtual() == nullptr && source_version_ != nullptr) {
    delete source_version_;
  }
  source_version_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& StackTrace_StackFrame::source_version() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = source_version_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrame.source_version)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::release_source_version() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.StackTrace.StackFrame.source_version)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = source_version_;
  source_version_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* StackTrace_StackFrame::mutable_source_version() {
  
  if (source_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    source_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.StackTrace.StackFrame.source_version)
  return source_version_;
}
inline void StackTrace_StackFrame::set_allocated_source_version(::opencensus::proto::trace::v1::TruncatableString* source_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_version_;
  }
  if (source_version) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_version, submessage_arena);
    }
    
  } else {
    
  }
  source_version_ = source_version;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.StackTrace.StackFrame.source_version)
}

// -------------------------------------------------------------------

// StackTrace_StackFrames

// repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;
inline int StackTrace_StackFrames::frame_size() const {
  return frame_.size();
}
inline void StackTrace_StackFrames::clear_frame() {
  frame_.Clear();
}
inline ::opencensus::proto::trace::v1::StackTrace_StackFrame* StackTrace_StackFrames::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.StackTrace.StackFrames.frame)
  return frame_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::StackTrace_StackFrame >*
StackTrace_StackFrames::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:opencensus.proto.trace.v1.StackTrace.StackFrames.frame)
  return &frame_;
}
inline const ::opencensus::proto::trace::v1::StackTrace_StackFrame& StackTrace_StackFrames::frame(int index) const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrames.frame)
  return frame_.Get(index);
}
inline ::opencensus::proto::trace::v1::StackTrace_StackFrame* StackTrace_StackFrames::add_frame() {
  // @@protoc_insertion_point(field_add:opencensus.proto.trace.v1.StackTrace.StackFrames.frame)
  return frame_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opencensus::proto::trace::v1::StackTrace_StackFrame >&
StackTrace_StackFrames::frame() const {
  // @@protoc_insertion_point(field_list:opencensus.proto.trace.v1.StackTrace.StackFrames.frame)
  return frame_;
}

// int32 dropped_frames_count = 2;
inline void StackTrace_StackFrames::clear_dropped_frames_count() {
  dropped_frames_count_ = 0;
}
inline ::google::protobuf::int32 StackTrace_StackFrames::dropped_frames_count() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.StackFrames.dropped_frames_count)
  return dropped_frames_count_;
}
inline void StackTrace_StackFrames::set_dropped_frames_count(::google::protobuf::int32 value) {
  
  dropped_frames_count_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.StackTrace.StackFrames.dropped_frames_count)
}

// -------------------------------------------------------------------

// StackTrace

// .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;
inline bool StackTrace::has_stack_frames() const {
  return this != internal_default_instance() && stack_frames_ != nullptr;
}
inline void StackTrace::clear_stack_frames() {
  if (GetArenaNoVirtual() == nullptr && stack_frames_ != nullptr) {
    delete stack_frames_;
  }
  stack_frames_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::StackTrace_StackFrames& StackTrace::stack_frames() const {
  const ::opencensus::proto::trace::v1::StackTrace_StackFrames* p = stack_frames_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.stack_frames)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::StackTrace_StackFrames*>(
      &::opencensus::proto::trace::v1::_StackTrace_StackFrames_default_instance_);
}
inline ::opencensus::proto::trace::v1::StackTrace_StackFrames* StackTrace::release_stack_frames() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.StackTrace.stack_frames)
  
  ::opencensus::proto::trace::v1::StackTrace_StackFrames* temp = stack_frames_;
  stack_frames_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::StackTrace_StackFrames* StackTrace::mutable_stack_frames() {
  
  if (stack_frames_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::StackTrace_StackFrames>(GetArenaNoVirtual());
    stack_frames_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.StackTrace.stack_frames)
  return stack_frames_;
}
inline void StackTrace::set_allocated_stack_frames(::opencensus::proto::trace::v1::StackTrace_StackFrames* stack_frames) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stack_frames_;
  }
  if (stack_frames) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stack_frames = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stack_frames, submessage_arena);
    }
    
  } else {
    
  }
  stack_frames_ = stack_frames;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.StackTrace.stack_frames)
}

// uint64 stack_trace_hash_id = 2;
inline void StackTrace::clear_stack_trace_hash_id() {
  stack_trace_hash_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StackTrace::stack_trace_hash_id() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.StackTrace.stack_trace_hash_id)
  return stack_trace_hash_id_;
}
inline void StackTrace::set_stack_trace_hash_id(::google::protobuf::uint64 value) {
  
  stack_trace_hash_id_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.StackTrace.stack_trace_hash_id)
}

// -------------------------------------------------------------------

// Module

// .opencensus.proto.trace.v1.TruncatableString module = 1;
inline bool Module::has_module() const {
  return this != internal_default_instance() && module_ != nullptr;
}
inline void Module::clear_module() {
  if (GetArenaNoVirtual() == nullptr && module_ != nullptr) {
    delete module_;
  }
  module_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& Module::module() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = module_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Module.module)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* Module::release_module() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Module.module)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = module_;
  module_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* Module::mutable_module() {
  
  if (module_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    module_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Module.module)
  return module_;
}
inline void Module::set_allocated_module(::opencensus::proto::trace::v1::TruncatableString* module) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete module_;
  }
  if (module) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      module = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, module, submessage_arena);
    }
    
  } else {
    
  }
  module_ = module;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Module.module)
}

// .opencensus.proto.trace.v1.TruncatableString build_id = 2;
inline bool Module::has_build_id() const {
  return this != internal_default_instance() && build_id_ != nullptr;
}
inline void Module::clear_build_id() {
  if (GetArenaNoVirtual() == nullptr && build_id_ != nullptr) {
    delete build_id_;
  }
  build_id_ = nullptr;
}
inline const ::opencensus::proto::trace::v1::TruncatableString& Module::build_id() const {
  const ::opencensus::proto::trace::v1::TruncatableString* p = build_id_;
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.Module.build_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::opencensus::proto::trace::v1::TruncatableString*>(
      &::opencensus::proto::trace::v1::_TruncatableString_default_instance_);
}
inline ::opencensus::proto::trace::v1::TruncatableString* Module::release_build_id() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.Module.build_id)
  
  ::opencensus::proto::trace::v1::TruncatableString* temp = build_id_;
  build_id_ = nullptr;
  return temp;
}
inline ::opencensus::proto::trace::v1::TruncatableString* Module::mutable_build_id() {
  
  if (build_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencensus::proto::trace::v1::TruncatableString>(GetArenaNoVirtual());
    build_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.Module.build_id)
  return build_id_;
}
inline void Module::set_allocated_build_id(::opencensus::proto::trace::v1::TruncatableString* build_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete build_id_;
  }
  if (build_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      build_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, build_id, submessage_arena);
    }
    
  } else {
    
  }
  build_id_ = build_id;
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.Module.build_id)
}

// -------------------------------------------------------------------

// TruncatableString

// string value = 1;
inline void TruncatableString::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TruncatableString::value() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TruncatableString.value)
  return value_.GetNoArena();
}
inline void TruncatableString::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.TruncatableString.value)
}
#if LANG_CXX11
inline void TruncatableString::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencensus.proto.trace.v1.TruncatableString.value)
}
#endif
inline void TruncatableString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencensus.proto.trace.v1.TruncatableString.value)
}
inline void TruncatableString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencensus.proto.trace.v1.TruncatableString.value)
}
inline ::std::string* TruncatableString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.TruncatableString.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TruncatableString::release_value() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.TruncatableString.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TruncatableString::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.TruncatableString.value)
}

// int32 truncated_byte_count = 2;
inline void TruncatableString::clear_truncated_byte_count() {
  truncated_byte_count_ = 0;
}
inline ::google::protobuf::int32 TruncatableString::truncated_byte_count() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TruncatableString.truncated_byte_count)
  return truncated_byte_count_;
}
inline void TruncatableString::set_truncated_byte_count(::google::protobuf::int32 value) {
  
  truncated_byte_count_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.TruncatableString.truncated_byte_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type>() {
  return ::opencensus::proto::trace::v1::Span_TimeEvent_MessageEvent_Type_descriptor();
}
template <> struct is_proto_enum< ::opencensus::proto::trace::v1::Span_Link_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opencensus::proto::trace::v1::Span_Link_Type>() {
  return ::opencensus::proto::trace::v1::Span_Link_Type_descriptor();
}
template <> struct is_proto_enum< ::opencensus::proto::trace::v1::Span_SpanKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opencensus::proto::trace::v1::Span_SpanKind>() {
  return ::opencensus::proto::trace::v1::Span_SpanKind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_opencensus_2fproto_2ftrace_2fv1_2ftrace_2eproto
