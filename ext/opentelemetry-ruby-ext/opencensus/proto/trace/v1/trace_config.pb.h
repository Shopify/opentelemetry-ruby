// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace_config.proto

#ifndef PROTOBUF_INCLUDED_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto
#define PROTOBUF_INCLUDED_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto();
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {
class ConstantSampler;
class ConstantSamplerDefaultTypeInternal;
extern ConstantSamplerDefaultTypeInternal _ConstantSampler_default_instance_;
class ProbabilitySampler;
class ProbabilitySamplerDefaultTypeInternal;
extern ProbabilitySamplerDefaultTypeInternal _ProbabilitySampler_default_instance_;
class RateLimitingSampler;
class RateLimitingSamplerDefaultTypeInternal;
extern RateLimitingSamplerDefaultTypeInternal _RateLimitingSampler_default_instance_;
class TraceConfig;
class TraceConfigDefaultTypeInternal;
extern TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> ::opencensus::proto::trace::v1::ConstantSampler* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::ConstantSampler>(Arena*);
template<> ::opencensus::proto::trace::v1::ProbabilitySampler* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::ProbabilitySampler>(Arena*);
template<> ::opencensus::proto::trace::v1::RateLimitingSampler* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::RateLimitingSampler>(Arena*);
template<> ::opencensus::proto::trace::v1::TraceConfig* Arena::CreateMaybeMessage<::opencensus::proto::trace::v1::TraceConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {

enum ConstantSampler_ConstantDecision {
  ConstantSampler_ConstantDecision_ALWAYS_OFF = 0,
  ConstantSampler_ConstantDecision_ALWAYS_ON = 1,
  ConstantSampler_ConstantDecision_ALWAYS_PARENT = 2,
  ConstantSampler_ConstantDecision_ConstantSampler_ConstantDecision_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ConstantSampler_ConstantDecision_ConstantSampler_ConstantDecision_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ConstantSampler_ConstantDecision_IsValid(int value);
const ConstantSampler_ConstantDecision ConstantSampler_ConstantDecision_ConstantDecision_MIN = ConstantSampler_ConstantDecision_ALWAYS_OFF;
const ConstantSampler_ConstantDecision ConstantSampler_ConstantDecision_ConstantDecision_MAX = ConstantSampler_ConstantDecision_ALWAYS_PARENT;
const int ConstantSampler_ConstantDecision_ConstantDecision_ARRAYSIZE = ConstantSampler_ConstantDecision_ConstantDecision_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConstantSampler_ConstantDecision_descriptor();
inline const ::std::string& ConstantSampler_ConstantDecision_Name(ConstantSampler_ConstantDecision value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConstantSampler_ConstantDecision_descriptor(), value);
}
inline bool ConstantSampler_ConstantDecision_Parse(
    const ::std::string& name, ConstantSampler_ConstantDecision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConstantSampler_ConstantDecision>(
    ConstantSampler_ConstantDecision_descriptor(), name, value);
}
// ===================================================================

class TraceConfig :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.TraceConfig) */ {
 public:
  TraceConfig();
  virtual ~TraceConfig();

  TraceConfig(const TraceConfig& from);

  inline TraceConfig& operator=(const TraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TraceConfig(TraceConfig&& from) noexcept
    : TraceConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig& operator=(TraceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TraceConfig& default_instance();

  enum SamplerCase {
    kProbabilitySampler = 1,
    kConstantSampler = 2,
    kRateLimitingSampler = 3,
    SAMPLER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig*>(
               &_TraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TraceConfig* other);
  friend void swap(TraceConfig& a, TraceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TraceConfig* New() const final {
    return CreateMaybeMessage<TraceConfig>(nullptr);
  }

  TraceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TraceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TraceConfig& from);
  void MergeFrom(const TraceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 max_number_of_attributes = 4;
  void clear_max_number_of_attributes();
  static const int kMaxNumberOfAttributesFieldNumber = 4;
  ::google::protobuf::int64 max_number_of_attributes() const;
  void set_max_number_of_attributes(::google::protobuf::int64 value);

  // int64 max_number_of_annotations = 5;
  void clear_max_number_of_annotations();
  static const int kMaxNumberOfAnnotationsFieldNumber = 5;
  ::google::protobuf::int64 max_number_of_annotations() const;
  void set_max_number_of_annotations(::google::protobuf::int64 value);

  // int64 max_number_of_message_events = 6;
  void clear_max_number_of_message_events();
  static const int kMaxNumberOfMessageEventsFieldNumber = 6;
  ::google::protobuf::int64 max_number_of_message_events() const;
  void set_max_number_of_message_events(::google::protobuf::int64 value);

  // int64 max_number_of_links = 7;
  void clear_max_number_of_links();
  static const int kMaxNumberOfLinksFieldNumber = 7;
  ::google::protobuf::int64 max_number_of_links() const;
  void set_max_number_of_links(::google::protobuf::int64 value);

  // .opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;
  bool has_probability_sampler() const;
  void clear_probability_sampler();
  static const int kProbabilitySamplerFieldNumber = 1;
  const ::opencensus::proto::trace::v1::ProbabilitySampler& probability_sampler() const;
  ::opencensus::proto::trace::v1::ProbabilitySampler* release_probability_sampler();
  ::opencensus::proto::trace::v1::ProbabilitySampler* mutable_probability_sampler();
  void set_allocated_probability_sampler(::opencensus::proto::trace::v1::ProbabilitySampler* probability_sampler);

  // .opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;
  bool has_constant_sampler() const;
  void clear_constant_sampler();
  static const int kConstantSamplerFieldNumber = 2;
  const ::opencensus::proto::trace::v1::ConstantSampler& constant_sampler() const;
  ::opencensus::proto::trace::v1::ConstantSampler* release_constant_sampler();
  ::opencensus::proto::trace::v1::ConstantSampler* mutable_constant_sampler();
  void set_allocated_constant_sampler(::opencensus::proto::trace::v1::ConstantSampler* constant_sampler);

  // .opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
  bool has_rate_limiting_sampler() const;
  void clear_rate_limiting_sampler();
  static const int kRateLimitingSamplerFieldNumber = 3;
  const ::opencensus::proto::trace::v1::RateLimitingSampler& rate_limiting_sampler() const;
  ::opencensus::proto::trace::v1::RateLimitingSampler* release_rate_limiting_sampler();
  ::opencensus::proto::trace::v1::RateLimitingSampler* mutable_rate_limiting_sampler();
  void set_allocated_rate_limiting_sampler(::opencensus::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler);

  void clear_sampler();
  SamplerCase sampler_case() const;
  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.TraceConfig)
 private:
  class HasBitSetters;
  void set_has_probability_sampler();
  void set_has_constant_sampler();
  void set_has_rate_limiting_sampler();

  inline bool has_sampler() const;
  inline void clear_has_sampler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 max_number_of_attributes_;
  ::google::protobuf::int64 max_number_of_annotations_;
  ::google::protobuf::int64 max_number_of_message_events_;
  ::google::protobuf::int64 max_number_of_links_;
  union SamplerUnion {
    SamplerUnion() {}
    ::opencensus::proto::trace::v1::ProbabilitySampler* probability_sampler_;
    ::opencensus::proto::trace::v1::ConstantSampler* constant_sampler_;
    ::opencensus::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler_;
  } sampler_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ProbabilitySampler :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.ProbabilitySampler) */ {
 public:
  ProbabilitySampler();
  virtual ~ProbabilitySampler();

  ProbabilitySampler(const ProbabilitySampler& from);

  inline ProbabilitySampler& operator=(const ProbabilitySampler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProbabilitySampler(ProbabilitySampler&& from) noexcept
    : ProbabilitySampler() {
    *this = ::std::move(from);
  }

  inline ProbabilitySampler& operator=(ProbabilitySampler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProbabilitySampler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProbabilitySampler* internal_default_instance() {
    return reinterpret_cast<const ProbabilitySampler*>(
               &_ProbabilitySampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProbabilitySampler* other);
  friend void swap(ProbabilitySampler& a, ProbabilitySampler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProbabilitySampler* New() const final {
    return CreateMaybeMessage<ProbabilitySampler>(nullptr);
  }

  ProbabilitySampler* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProbabilitySampler>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProbabilitySampler& from);
  void MergeFrom(const ProbabilitySampler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbabilitySampler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double samplingProbability = 1;
  void clear_samplingprobability();
  static const int kSamplingProbabilityFieldNumber = 1;
  double samplingprobability() const;
  void set_samplingprobability(double value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.ProbabilitySampler)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double samplingprobability_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConstantSampler :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.ConstantSampler) */ {
 public:
  ConstantSampler();
  virtual ~ConstantSampler();

  ConstantSampler(const ConstantSampler& from);

  inline ConstantSampler& operator=(const ConstantSampler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConstantSampler(ConstantSampler&& from) noexcept
    : ConstantSampler() {
    *this = ::std::move(from);
  }

  inline ConstantSampler& operator=(ConstantSampler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConstantSampler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstantSampler* internal_default_instance() {
    return reinterpret_cast<const ConstantSampler*>(
               &_ConstantSampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConstantSampler* other);
  friend void swap(ConstantSampler& a, ConstantSampler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConstantSampler* New() const final {
    return CreateMaybeMessage<ConstantSampler>(nullptr);
  }

  ConstantSampler* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConstantSampler>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConstantSampler& from);
  void MergeFrom(const ConstantSampler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstantSampler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConstantSampler_ConstantDecision ConstantDecision;
  static const ConstantDecision ALWAYS_OFF =
    ConstantSampler_ConstantDecision_ALWAYS_OFF;
  static const ConstantDecision ALWAYS_ON =
    ConstantSampler_ConstantDecision_ALWAYS_ON;
  static const ConstantDecision ALWAYS_PARENT =
    ConstantSampler_ConstantDecision_ALWAYS_PARENT;
  static inline bool ConstantDecision_IsValid(int value) {
    return ConstantSampler_ConstantDecision_IsValid(value);
  }
  static const ConstantDecision ConstantDecision_MIN =
    ConstantSampler_ConstantDecision_ConstantDecision_MIN;
  static const ConstantDecision ConstantDecision_MAX =
    ConstantSampler_ConstantDecision_ConstantDecision_MAX;
  static const int ConstantDecision_ARRAYSIZE =
    ConstantSampler_ConstantDecision_ConstantDecision_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConstantDecision_descriptor() {
    return ConstantSampler_ConstantDecision_descriptor();
  }
  static inline const ::std::string& ConstantDecision_Name(ConstantDecision value) {
    return ConstantSampler_ConstantDecision_Name(value);
  }
  static inline bool ConstantDecision_Parse(const ::std::string& name,
      ConstantDecision* value) {
    return ConstantSampler_ConstantDecision_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
  void clear_decision();
  static const int kDecisionFieldNumber = 1;
  ::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision decision() const;
  void set_decision(::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.ConstantSampler)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int decision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RateLimitingSampler :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencensus.proto.trace.v1.RateLimitingSampler) */ {
 public:
  RateLimitingSampler();
  virtual ~RateLimitingSampler();

  RateLimitingSampler(const RateLimitingSampler& from);

  inline RateLimitingSampler& operator=(const RateLimitingSampler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RateLimitingSampler(RateLimitingSampler&& from) noexcept
    : RateLimitingSampler() {
    *this = ::std::move(from);
  }

  inline RateLimitingSampler& operator=(RateLimitingSampler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RateLimitingSampler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateLimitingSampler* internal_default_instance() {
    return reinterpret_cast<const RateLimitingSampler*>(
               &_RateLimitingSampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RateLimitingSampler* other);
  friend void swap(RateLimitingSampler& a, RateLimitingSampler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RateLimitingSampler* New() const final {
    return CreateMaybeMessage<RateLimitingSampler>(nullptr);
  }

  RateLimitingSampler* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RateLimitingSampler>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RateLimitingSampler& from);
  void MergeFrom(const RateLimitingSampler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimitingSampler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 qps = 1;
  void clear_qps();
  static const int kQpsFieldNumber = 1;
  ::google::protobuf::int64 qps() const;
  void set_qps(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.RateLimitingSampler)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 qps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceConfig

// .opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;
inline bool TraceConfig::has_probability_sampler() const {
  return sampler_case() == kProbabilitySampler;
}
inline void TraceConfig::set_has_probability_sampler() {
  _oneof_case_[0] = kProbabilitySampler;
}
inline void TraceConfig::clear_probability_sampler() {
  if (has_probability_sampler()) {
    delete sampler_.probability_sampler_;
    clear_has_sampler();
  }
}
inline ::opencensus::proto::trace::v1::ProbabilitySampler* TraceConfig::release_probability_sampler() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.TraceConfig.probability_sampler)
  if (has_probability_sampler()) {
    clear_has_sampler();
      ::opencensus::proto::trace::v1::ProbabilitySampler* temp = sampler_.probability_sampler_;
    sampler_.probability_sampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::trace::v1::ProbabilitySampler& TraceConfig::probability_sampler() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TraceConfig.probability_sampler)
  return has_probability_sampler()
      ? *sampler_.probability_sampler_
      : *reinterpret_cast< ::opencensus::proto::trace::v1::ProbabilitySampler*>(&::opencensus::proto::trace::v1::_ProbabilitySampler_default_instance_);
}
inline ::opencensus::proto::trace::v1::ProbabilitySampler* TraceConfig::mutable_probability_sampler() {
  if (!has_probability_sampler()) {
    clear_sampler();
    set_has_probability_sampler();
    sampler_.probability_sampler_ = CreateMaybeMessage< ::opencensus::proto::trace::v1::ProbabilitySampler >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.TraceConfig.probability_sampler)
  return sampler_.probability_sampler_;
}

// .opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;
inline bool TraceConfig::has_constant_sampler() const {
  return sampler_case() == kConstantSampler;
}
inline void TraceConfig::set_has_constant_sampler() {
  _oneof_case_[0] = kConstantSampler;
}
inline void TraceConfig::clear_constant_sampler() {
  if (has_constant_sampler()) {
    delete sampler_.constant_sampler_;
    clear_has_sampler();
  }
}
inline ::opencensus::proto::trace::v1::ConstantSampler* TraceConfig::release_constant_sampler() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.TraceConfig.constant_sampler)
  if (has_constant_sampler()) {
    clear_has_sampler();
      ::opencensus::proto::trace::v1::ConstantSampler* temp = sampler_.constant_sampler_;
    sampler_.constant_sampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::trace::v1::ConstantSampler& TraceConfig::constant_sampler() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TraceConfig.constant_sampler)
  return has_constant_sampler()
      ? *sampler_.constant_sampler_
      : *reinterpret_cast< ::opencensus::proto::trace::v1::ConstantSampler*>(&::opencensus::proto::trace::v1::_ConstantSampler_default_instance_);
}
inline ::opencensus::proto::trace::v1::ConstantSampler* TraceConfig::mutable_constant_sampler() {
  if (!has_constant_sampler()) {
    clear_sampler();
    set_has_constant_sampler();
    sampler_.constant_sampler_ = CreateMaybeMessage< ::opencensus::proto::trace::v1::ConstantSampler >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.TraceConfig.constant_sampler)
  return sampler_.constant_sampler_;
}

// .opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
inline bool TraceConfig::has_rate_limiting_sampler() const {
  return sampler_case() == kRateLimitingSampler;
}
inline void TraceConfig::set_has_rate_limiting_sampler() {
  _oneof_case_[0] = kRateLimitingSampler;
}
inline void TraceConfig::clear_rate_limiting_sampler() {
  if (has_rate_limiting_sampler()) {
    delete sampler_.rate_limiting_sampler_;
    clear_has_sampler();
  }
}
inline ::opencensus::proto::trace::v1::RateLimitingSampler* TraceConfig::release_rate_limiting_sampler() {
  // @@protoc_insertion_point(field_release:opencensus.proto.trace.v1.TraceConfig.rate_limiting_sampler)
  if (has_rate_limiting_sampler()) {
    clear_has_sampler();
      ::opencensus::proto::trace::v1::RateLimitingSampler* temp = sampler_.rate_limiting_sampler_;
    sampler_.rate_limiting_sampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencensus::proto::trace::v1::RateLimitingSampler& TraceConfig::rate_limiting_sampler() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TraceConfig.rate_limiting_sampler)
  return has_rate_limiting_sampler()
      ? *sampler_.rate_limiting_sampler_
      : *reinterpret_cast< ::opencensus::proto::trace::v1::RateLimitingSampler*>(&::opencensus::proto::trace::v1::_RateLimitingSampler_default_instance_);
}
inline ::opencensus::proto::trace::v1::RateLimitingSampler* TraceConfig::mutable_rate_limiting_sampler() {
  if (!has_rate_limiting_sampler()) {
    clear_sampler();
    set_has_rate_limiting_sampler();
    sampler_.rate_limiting_sampler_ = CreateMaybeMessage< ::opencensus::proto::trace::v1::RateLimitingSampler >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:opencensus.proto.trace.v1.TraceConfig.rate_limiting_sampler)
  return sampler_.rate_limiting_sampler_;
}

// int64 max_number_of_attributes = 4;
inline void TraceConfig::clear_max_number_of_attributes() {
  max_number_of_attributes_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TraceConfig::max_number_of_attributes() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TraceConfig.max_number_of_attributes)
  return max_number_of_attributes_;
}
inline void TraceConfig::set_max_number_of_attributes(::google::protobuf::int64 value) {
  
  max_number_of_attributes_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.TraceConfig.max_number_of_attributes)
}

// int64 max_number_of_annotations = 5;
inline void TraceConfig::clear_max_number_of_annotations() {
  max_number_of_annotations_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TraceConfig::max_number_of_annotations() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TraceConfig.max_number_of_annotations)
  return max_number_of_annotations_;
}
inline void TraceConfig::set_max_number_of_annotations(::google::protobuf::int64 value) {
  
  max_number_of_annotations_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.TraceConfig.max_number_of_annotations)
}

// int64 max_number_of_message_events = 6;
inline void TraceConfig::clear_max_number_of_message_events() {
  max_number_of_message_events_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TraceConfig::max_number_of_message_events() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TraceConfig.max_number_of_message_events)
  return max_number_of_message_events_;
}
inline void TraceConfig::set_max_number_of_message_events(::google::protobuf::int64 value) {
  
  max_number_of_message_events_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.TraceConfig.max_number_of_message_events)
}

// int64 max_number_of_links = 7;
inline void TraceConfig::clear_max_number_of_links() {
  max_number_of_links_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TraceConfig::max_number_of_links() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.TraceConfig.max_number_of_links)
  return max_number_of_links_;
}
inline void TraceConfig::set_max_number_of_links(::google::protobuf::int64 value) {
  
  max_number_of_links_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.TraceConfig.max_number_of_links)
}

inline bool TraceConfig::has_sampler() const {
  return sampler_case() != SAMPLER_NOT_SET;
}
inline void TraceConfig::clear_has_sampler() {
  _oneof_case_[0] = SAMPLER_NOT_SET;
}
inline TraceConfig::SamplerCase TraceConfig::sampler_case() const {
  return TraceConfig::SamplerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProbabilitySampler

// double samplingProbability = 1;
inline void ProbabilitySampler::clear_samplingprobability() {
  samplingprobability_ = 0;
}
inline double ProbabilitySampler::samplingprobability() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.ProbabilitySampler.samplingProbability)
  return samplingprobability_;
}
inline void ProbabilitySampler::set_samplingprobability(double value) {
  
  samplingprobability_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.ProbabilitySampler.samplingProbability)
}

// -------------------------------------------------------------------

// ConstantSampler

// .opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
inline void ConstantSampler::clear_decision() {
  decision_ = 0;
}
inline ::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision ConstantSampler::decision() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.ConstantSampler.decision)
  return static_cast< ::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision >(decision_);
}
inline void ConstantSampler::set_decision(::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision value) {
  
  decision_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.ConstantSampler.decision)
}

// -------------------------------------------------------------------

// RateLimitingSampler

// int64 qps = 1;
inline void RateLimitingSampler::clear_qps() {
  qps_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 RateLimitingSampler::qps() const {
  // @@protoc_insertion_point(field_get:opencensus.proto.trace.v1.RateLimitingSampler.qps)
  return qps_;
}
inline void RateLimitingSampler::set_qps(::google::protobuf::int64 value) {
  
  qps_ = value;
  // @@protoc_insertion_point(field_set:opencensus.proto.trace.v1.RateLimitingSampler.qps)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision>() {
  return ::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto
