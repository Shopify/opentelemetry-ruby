// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace_config.proto

#include "opencensus/proto/trace/v1/trace_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConstantSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProbabilitySampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RateLimitingSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {
class TraceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceConfig> _instance;
  const ::opencensus::proto::trace::v1::ProbabilitySampler* probability_sampler_;
  const ::opencensus::proto::trace::v1::ConstantSampler* constant_sampler_;
  const ::opencensus::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler_;
} _TraceConfig_default_instance_;
class ProbabilitySamplerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProbabilitySampler> _instance;
} _ProbabilitySampler_default_instance_;
class ConstantSamplerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstantSampler> _instance;
} _ConstantSampler_default_instance_;
class RateLimitingSamplerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RateLimitingSampler> _instance;
} _RateLimitingSampler_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus
static void InitDefaultsTraceConfig_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_TraceConfig_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::TraceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::TraceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TraceConfig_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTraceConfig_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto}, {
      &scc_info_ProbabilitySampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base,
      &scc_info_ConstantSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base,
      &scc_info_RateLimitingSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base,}};

static void InitDefaultsProbabilitySampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_ProbabilitySampler_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::ProbabilitySampler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::ProbabilitySampler::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProbabilitySampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProbabilitySampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto}, {}};

static void InitDefaultsConstantSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_ConstantSampler_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::ConstantSampler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::ConstantSampler::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConstantSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConstantSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto}, {}};

static void InitDefaultsRateLimitingSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opencensus::proto::trace::v1::_RateLimitingSampler_default_instance_;
    new (ptr) ::opencensus::proto::trace::v1::RateLimitingSampler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opencensus::proto::trace::v1::RateLimitingSampler::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RateLimitingSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRateLimitingSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto}, {}};

void InitDefaults_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TraceConfig_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProbabilitySampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConstantSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RateLimitingSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TraceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TraceConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::opencensus::proto::trace::v1::TraceConfigDefaultTypeInternal, probability_sampler_),
  offsetof(::opencensus::proto::trace::v1::TraceConfigDefaultTypeInternal, constant_sampler_),
  offsetof(::opencensus::proto::trace::v1::TraceConfigDefaultTypeInternal, rate_limiting_sampler_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TraceConfig, max_number_of_attributes_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TraceConfig, max_number_of_annotations_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TraceConfig, max_number_of_message_events_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TraceConfig, max_number_of_links_),
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::TraceConfig, sampler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::ProbabilitySampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::ProbabilitySampler, samplingprobability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::ConstantSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::ConstantSampler, decision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::RateLimitingSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opencensus::proto::trace::v1::RateLimitingSampler, qps_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opencensus::proto::trace::v1::TraceConfig)},
  { 13, -1, sizeof(::opencensus::proto::trace::v1::ProbabilitySampler)},
  { 19, -1, sizeof(::opencensus::proto::trace::v1::ConstantSampler)},
  { 25, -1, sizeof(::opencensus::proto::trace::v1::RateLimitingSampler)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_TraceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_ProbabilitySampler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_ConstantSampler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::opencensus::proto::trace::v1::_RateLimitingSampler_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto = {
  {}, AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, "opencensus/proto/trace/v1/trace_config.proto", schemas,
  file_default_instances, TableStruct_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto::offsets,
  file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, 4, file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, file_level_service_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto,
};

const char descriptor_table_protodef_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[] =
  "\n,opencensus/proto/trace/v1/trace_config"
  ".proto\022\031opencensus.proto.trace.v1\"\207\003\n\013Tr"
  "aceConfig\022L\n\023probability_sampler\030\001 \001(\0132-"
  ".opencensus.proto.trace.v1.ProbabilitySa"
  "mplerH\000\022F\n\020constant_sampler\030\002 \001(\0132*.open"
  "census.proto.trace.v1.ConstantSamplerH\000\022"
  "O\n\025rate_limiting_sampler\030\003 \001(\0132..opencen"
  "sus.proto.trace.v1.RateLimitingSamplerH\000"
  "\022 \n\030max_number_of_attributes\030\004 \001(\003\022!\n\031ma"
  "x_number_of_annotations\030\005 \001(\003\022$\n\034max_num"
  "ber_of_message_events\030\006 \001(\003\022\033\n\023max_numbe"
  "r_of_links\030\007 \001(\003B\t\n\007sampler\"1\n\022Probabili"
  "tySampler\022\033\n\023samplingProbability\030\001 \001(\001\"\246"
  "\001\n\017ConstantSampler\022M\n\010decision\030\001 \001(\0162;.o"
  "pencensus.proto.trace.v1.ConstantSampler"
  ".ConstantDecision\"D\n\020ConstantDecision\022\016\n"
  "\nALWAYS_OFF\020\000\022\r\n\tALWAYS_ON\020\001\022\021\n\rALWAYS_P"
  "ARENT\020\002\"\"\n\023RateLimitingSampler\022\013\n\003qps\030\001 "
  "\001(\003B\222\001\n\034io.opencensus.proto.trace.v1B\020Tr"
  "aceConfigProtoP\001ZBgithub.com/census-inst"
  "rumentation/opencensus-proto/gen-go/trac"
  "e/v1\352\002\031OpenCensus.Proto.Trace.V1b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto = {
  false, InitDefaults_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, 
  descriptor_table_protodef_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto,
  "opencensus/proto/trace/v1/trace_config.proto", &assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, 880,
};

void AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto = []() { AddDescriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto(); return true; }();
namespace opencensus {
namespace proto {
namespace trace {
namespace v1 {
const ::google::protobuf::EnumDescriptor* ConstantSampler_ConstantDecision_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[0];
}
bool ConstantSampler_ConstantDecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConstantSampler_ConstantDecision ConstantSampler::ALWAYS_OFF;
const ConstantSampler_ConstantDecision ConstantSampler::ALWAYS_ON;
const ConstantSampler_ConstantDecision ConstantSampler::ALWAYS_PARENT;
const ConstantSampler_ConstantDecision ConstantSampler::ConstantDecision_MIN;
const ConstantSampler_ConstantDecision ConstantSampler::ConstantDecision_MAX;
const int ConstantSampler::ConstantDecision_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TraceConfig::InitAsDefaultInstance() {
  ::opencensus::proto::trace::v1::_TraceConfig_default_instance_.probability_sampler_ = const_cast< ::opencensus::proto::trace::v1::ProbabilitySampler*>(
      ::opencensus::proto::trace::v1::ProbabilitySampler::internal_default_instance());
  ::opencensus::proto::trace::v1::_TraceConfig_default_instance_.constant_sampler_ = const_cast< ::opencensus::proto::trace::v1::ConstantSampler*>(
      ::opencensus::proto::trace::v1::ConstantSampler::internal_default_instance());
  ::opencensus::proto::trace::v1::_TraceConfig_default_instance_.rate_limiting_sampler_ = const_cast< ::opencensus::proto::trace::v1::RateLimitingSampler*>(
      ::opencensus::proto::trace::v1::RateLimitingSampler::internal_default_instance());
}
class TraceConfig::HasBitSetters {
 public:
  static const ::opencensus::proto::trace::v1::ProbabilitySampler& probability_sampler(const TraceConfig* msg);
  static const ::opencensus::proto::trace::v1::ConstantSampler& constant_sampler(const TraceConfig* msg);
  static const ::opencensus::proto::trace::v1::RateLimitingSampler& rate_limiting_sampler(const TraceConfig* msg);
};

const ::opencensus::proto::trace::v1::ProbabilitySampler&
TraceConfig::HasBitSetters::probability_sampler(const TraceConfig* msg) {
  return *msg->sampler_.probability_sampler_;
}
const ::opencensus::proto::trace::v1::ConstantSampler&
TraceConfig::HasBitSetters::constant_sampler(const TraceConfig* msg) {
  return *msg->sampler_.constant_sampler_;
}
const ::opencensus::proto::trace::v1::RateLimitingSampler&
TraceConfig::HasBitSetters::rate_limiting_sampler(const TraceConfig* msg) {
  return *msg->sampler_.rate_limiting_sampler_;
}
void TraceConfig::set_allocated_probability_sampler(::opencensus::proto::trace::v1::ProbabilitySampler* probability_sampler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sampler();
  if (probability_sampler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probability_sampler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, probability_sampler, submessage_arena);
    }
    set_has_probability_sampler();
    sampler_.probability_sampler_ = probability_sampler;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.TraceConfig.probability_sampler)
}
void TraceConfig::set_allocated_constant_sampler(::opencensus::proto::trace::v1::ConstantSampler* constant_sampler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sampler();
  if (constant_sampler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      constant_sampler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constant_sampler, submessage_arena);
    }
    set_has_constant_sampler();
    sampler_.constant_sampler_ = constant_sampler;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.TraceConfig.constant_sampler)
}
void TraceConfig::set_allocated_rate_limiting_sampler(::opencensus::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_sampler();
  if (rate_limiting_sampler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rate_limiting_sampler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate_limiting_sampler, submessage_arena);
    }
    set_has_rate_limiting_sampler();
    sampler_.rate_limiting_sampler_ = rate_limiting_sampler;
  }
  // @@protoc_insertion_point(field_set_allocated:opencensus.proto.trace.v1.TraceConfig.rate_limiting_sampler)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceConfig::kProbabilitySamplerFieldNumber;
const int TraceConfig::kConstantSamplerFieldNumber;
const int TraceConfig::kRateLimitingSamplerFieldNumber;
const int TraceConfig::kMaxNumberOfAttributesFieldNumber;
const int TraceConfig::kMaxNumberOfAnnotationsFieldNumber;
const int TraceConfig::kMaxNumberOfMessageEventsFieldNumber;
const int TraceConfig::kMaxNumberOfLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceConfig::TraceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_number_of_attributes_, &from.max_number_of_attributes_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_links_) -
    reinterpret_cast<char*>(&max_number_of_attributes_)) + sizeof(max_number_of_links_));
  clear_has_sampler();
  switch (from.sampler_case()) {
    case kProbabilitySampler: {
      mutable_probability_sampler()->::opencensus::proto::trace::v1::ProbabilitySampler::MergeFrom(from.probability_sampler());
      break;
    }
    case kConstantSampler: {
      mutable_constant_sampler()->::opencensus::proto::trace::v1::ConstantSampler::MergeFrom(from.constant_sampler());
      break;
    }
    case kRateLimitingSampler: {
      mutable_rate_limiting_sampler()->::opencensus::proto::trace::v1::RateLimitingSampler::MergeFrom(from.rate_limiting_sampler());
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.TraceConfig)
}

void TraceConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TraceConfig_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  ::memset(&max_number_of_attributes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_links_) -
      reinterpret_cast<char*>(&max_number_of_attributes_)) + sizeof(max_number_of_links_));
  clear_has_sampler();
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.TraceConfig)
  SharedDtor();
}

void TraceConfig::SharedDtor() {
  if (has_sampler()) {
    clear_sampler();
  }
}

void TraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig& TraceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TraceConfig_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig::clear_sampler() {
// @@protoc_insertion_point(one_of_clear_start:opencensus.proto.trace.v1.TraceConfig)
  switch (sampler_case()) {
    case kProbabilitySampler: {
      delete sampler_.probability_sampler_;
      break;
    }
    case kConstantSampler: {
      delete sampler_.constant_sampler_;
      break;
    }
    case kRateLimitingSampler: {
      delete sampler_.rate_limiting_sampler_;
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SAMPLER_NOT_SET;
}


void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.TraceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_number_of_attributes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_links_) -
      reinterpret_cast<char*>(&max_number_of_attributes_)) + sizeof(max_number_of_links_));
  clear_sampler();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TraceConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::ProbabilitySampler::_InternalParse;
        object = msg->mutable_probability_sampler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::ConstantSampler::_InternalParse;
        object = msg->mutable_constant_sampler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::opencensus::proto::trace::v1::RateLimitingSampler::_InternalParse;
        object = msg->mutable_rate_limiting_sampler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 max_number_of_attributes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_number_of_attributes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_number_of_annotations = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_max_number_of_annotations(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_number_of_message_events = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_max_number_of_message_events(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_number_of_links = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_max_number_of_links(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.TraceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_probability_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constant_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rate_limiting_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_number_of_attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_attributes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_number_of_annotations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_annotations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_number_of_message_events = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_message_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_number_of_links = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_links_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.TraceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.TraceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.TraceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;
  if (has_probability_sampler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::probability_sampler(this), output);
  }

  // .opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;
  if (has_constant_sampler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::constant_sampler(this), output);
  }

  // .opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
  if (has_rate_limiting_sampler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::rate_limiting_sampler(this), output);
  }

  // int64 max_number_of_attributes = 4;
  if (this->max_number_of_attributes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_number_of_attributes(), output);
  }

  // int64 max_number_of_annotations = 5;
  if (this->max_number_of_annotations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_number_of_annotations(), output);
  }

  // int64 max_number_of_message_events = 6;
  if (this->max_number_of_message_events() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->max_number_of_message_events(), output);
  }

  // int64 max_number_of_links = 7;
  if (this->max_number_of_links() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->max_number_of_links(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.TraceConfig)
}

::google::protobuf::uint8* TraceConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.TraceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;
  if (has_probability_sampler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::probability_sampler(this), target);
  }

  // .opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;
  if (has_constant_sampler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::constant_sampler(this), target);
  }

  // .opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
  if (has_rate_limiting_sampler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::rate_limiting_sampler(this), target);
  }

  // int64 max_number_of_attributes = 4;
  if (this->max_number_of_attributes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_number_of_attributes(), target);
  }

  // int64 max_number_of_annotations = 5;
  if (this->max_number_of_annotations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_number_of_annotations(), target);
  }

  // int64 max_number_of_message_events = 6;
  if (this->max_number_of_message_events() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->max_number_of_message_events(), target);
  }

  // int64 max_number_of_links = 7;
  if (this->max_number_of_links() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->max_number_of_links(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.TraceConfig)
  return target;
}

size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.TraceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_number_of_attributes = 4;
  if (this->max_number_of_attributes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_number_of_attributes());
  }

  // int64 max_number_of_annotations = 5;
  if (this->max_number_of_annotations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_number_of_annotations());
  }

  // int64 max_number_of_message_events = 6;
  if (this->max_number_of_message_events() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_number_of_message_events());
  }

  // int64 max_number_of_links = 7;
  if (this->max_number_of_links() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_number_of_links());
  }

  switch (sampler_case()) {
    // .opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;
    case kProbabilitySampler: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sampler_.probability_sampler_);
      break;
    }
    // .opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;
    case kConstantSampler: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sampler_.constant_sampler_);
      break;
    }
    // .opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
    case kRateLimitingSampler: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sampler_.rate_limiting_sampler_);
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceConfig* source =
      ::google::protobuf::DynamicCastToGenerated<TraceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.TraceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.TraceConfig)
    MergeFrom(*source);
  }
}

void TraceConfig::MergeFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_number_of_attributes() != 0) {
    set_max_number_of_attributes(from.max_number_of_attributes());
  }
  if (from.max_number_of_annotations() != 0) {
    set_max_number_of_annotations(from.max_number_of_annotations());
  }
  if (from.max_number_of_message_events() != 0) {
    set_max_number_of_message_events(from.max_number_of_message_events());
  }
  if (from.max_number_of_links() != 0) {
    set_max_number_of_links(from.max_number_of_links());
  }
  switch (from.sampler_case()) {
    case kProbabilitySampler: {
      mutable_probability_sampler()->::opencensus::proto::trace::v1::ProbabilitySampler::MergeFrom(from.probability_sampler());
      break;
    }
    case kConstantSampler: {
      mutable_constant_sampler()->::opencensus::proto::trace::v1::ConstantSampler::MergeFrom(from.constant_sampler());
      break;
    }
    case kRateLimitingSampler: {
      mutable_rate_limiting_sampler()->::opencensus::proto::trace::v1::RateLimitingSampler::MergeFrom(from.rate_limiting_sampler());
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
}

void TraceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::Swap(TraceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_number_of_attributes_, other->max_number_of_attributes_);
  swap(max_number_of_annotations_, other->max_number_of_annotations_);
  swap(max_number_of_message_events_, other->max_number_of_message_events_);
  swap(max_number_of_links_, other->max_number_of_links_);
  swap(sampler_, other->sampler_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TraceConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProbabilitySampler::InitAsDefaultInstance() {
}
class ProbabilitySampler::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbabilitySampler::kSamplingProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbabilitySampler::ProbabilitySampler()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.ProbabilitySampler)
}
ProbabilitySampler::ProbabilitySampler(const ProbabilitySampler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  samplingprobability_ = from.samplingprobability_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.ProbabilitySampler)
}

void ProbabilitySampler::SharedCtor() {
  samplingprobability_ = 0;
}

ProbabilitySampler::~ProbabilitySampler() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.ProbabilitySampler)
  SharedDtor();
}

void ProbabilitySampler::SharedDtor() {
}

void ProbabilitySampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbabilitySampler& ProbabilitySampler::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProbabilitySampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ProbabilitySampler::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.ProbabilitySampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samplingprobability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProbabilitySampler::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProbabilitySampler*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double samplingProbability = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_samplingprobability(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProbabilitySampler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.ProbabilitySampler)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double samplingProbability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samplingprobability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.ProbabilitySampler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.ProbabilitySampler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProbabilitySampler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.ProbabilitySampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double samplingProbability = 1;
  if (this->samplingprobability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->samplingprobability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.ProbabilitySampler)
}

::google::protobuf::uint8* ProbabilitySampler::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.ProbabilitySampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double samplingProbability = 1;
  if (this->samplingprobability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->samplingprobability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.ProbabilitySampler)
  return target;
}

size_t ProbabilitySampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.ProbabilitySampler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double samplingProbability = 1;
  if (this->samplingprobability() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbabilitySampler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.ProbabilitySampler)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbabilitySampler* source =
      ::google::protobuf::DynamicCastToGenerated<ProbabilitySampler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.ProbabilitySampler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.ProbabilitySampler)
    MergeFrom(*source);
  }
}

void ProbabilitySampler::MergeFrom(const ProbabilitySampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.ProbabilitySampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.samplingprobability() != 0) {
    set_samplingprobability(from.samplingprobability());
  }
}

void ProbabilitySampler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.ProbabilitySampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbabilitySampler::CopyFrom(const ProbabilitySampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.ProbabilitySampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbabilitySampler::IsInitialized() const {
  return true;
}

void ProbabilitySampler::Swap(ProbabilitySampler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbabilitySampler::InternalSwap(ProbabilitySampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(samplingprobability_, other->samplingprobability_);
}

::google::protobuf::Metadata ProbabilitySampler::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConstantSampler::InitAsDefaultInstance() {
}
class ConstantSampler::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstantSampler::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstantSampler::ConstantSampler()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.ConstantSampler)
}
ConstantSampler::ConstantSampler(const ConstantSampler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  decision_ = from.decision_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.ConstantSampler)
}

void ConstantSampler::SharedCtor() {
  decision_ = 0;
}

ConstantSampler::~ConstantSampler() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.ConstantSampler)
  SharedDtor();
}

void ConstantSampler::SharedDtor() {
}

void ConstantSampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantSampler& ConstantSampler::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConstantSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ConstantSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.ConstantSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decision_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConstantSampler::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConstantSampler*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_decision(static_cast<::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConstantSampler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.ConstantSampler)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_decision(static_cast< ::opencensus::proto::trace::v1::ConstantSampler_ConstantDecision >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.ConstantSampler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.ConstantSampler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConstantSampler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.ConstantSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
  if (this->decision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->decision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.ConstantSampler)
}

::google::protobuf::uint8* ConstantSampler::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.ConstantSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
  if (this->decision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->decision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.ConstantSampler)
  return target;
}

size_t ConstantSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.ConstantSampler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
  if (this->decision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->decision());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantSampler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.ConstantSampler)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantSampler* source =
      ::google::protobuf::DynamicCastToGenerated<ConstantSampler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.ConstantSampler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.ConstantSampler)
    MergeFrom(*source);
  }
}

void ConstantSampler::MergeFrom(const ConstantSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.ConstantSampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.decision() != 0) {
    set_decision(from.decision());
  }
}

void ConstantSampler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.ConstantSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantSampler::CopyFrom(const ConstantSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.ConstantSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantSampler::IsInitialized() const {
  return true;
}

void ConstantSampler::Swap(ConstantSampler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstantSampler::InternalSwap(ConstantSampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(decision_, other->decision_);
}

::google::protobuf::Metadata ConstantSampler::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RateLimitingSampler::InitAsDefaultInstance() {
}
class RateLimitingSampler::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitingSampler::kQpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitingSampler::RateLimitingSampler()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencensus.proto.trace.v1.RateLimitingSampler)
}
RateLimitingSampler::RateLimitingSampler(const RateLimitingSampler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qps_ = from.qps_;
  // @@protoc_insertion_point(copy_constructor:opencensus.proto.trace.v1.RateLimitingSampler)
}

void RateLimitingSampler::SharedCtor() {
  qps_ = PROTOBUF_LONGLONG(0);
}

RateLimitingSampler::~RateLimitingSampler() {
  // @@protoc_insertion_point(destructor:opencensus.proto.trace.v1.RateLimitingSampler)
  SharedDtor();
}

void RateLimitingSampler::SharedDtor() {
}

void RateLimitingSampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RateLimitingSampler& RateLimitingSampler::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RateLimitingSampler_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RateLimitingSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:opencensus.proto.trace.v1.RateLimitingSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qps_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RateLimitingSampler::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RateLimitingSampler*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 qps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_qps(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RateLimitingSampler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencensus.proto.trace.v1.RateLimitingSampler)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 qps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencensus.proto.trace.v1.RateLimitingSampler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencensus.proto.trace.v1.RateLimitingSampler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RateLimitingSampler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencensus.proto.trace.v1.RateLimitingSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 qps = 1;
  if (this->qps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->qps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencensus.proto.trace.v1.RateLimitingSampler)
}

::google::protobuf::uint8* RateLimitingSampler::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencensus.proto.trace.v1.RateLimitingSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 qps = 1;
  if (this->qps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->qps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencensus.proto.trace.v1.RateLimitingSampler)
  return target;
}

size_t RateLimitingSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencensus.proto.trace.v1.RateLimitingSampler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 qps = 1;
  if (this->qps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->qps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateLimitingSampler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencensus.proto.trace.v1.RateLimitingSampler)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitingSampler* source =
      ::google::protobuf::DynamicCastToGenerated<RateLimitingSampler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencensus.proto.trace.v1.RateLimitingSampler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencensus.proto.trace.v1.RateLimitingSampler)
    MergeFrom(*source);
  }
}

void RateLimitingSampler::MergeFrom(const RateLimitingSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencensus.proto.trace.v1.RateLimitingSampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qps() != 0) {
    set_qps(from.qps());
  }
}

void RateLimitingSampler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencensus.proto.trace.v1.RateLimitingSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitingSampler::CopyFrom(const RateLimitingSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencensus.proto.trace.v1.RateLimitingSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitingSampler::IsInitialized() const {
  return true;
}

void RateLimitingSampler::Swap(RateLimitingSampler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitingSampler::InternalSwap(RateLimitingSampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(qps_, other->qps_);
}

::google::protobuf::Metadata RateLimitingSampler::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto);
  return ::file_level_metadata_opencensus_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opencensus
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::TraceConfig* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::TraceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::TraceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::ProbabilitySampler* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::ProbabilitySampler >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::ProbabilitySampler >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::ConstantSampler* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::ConstantSampler >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::ConstantSampler >(arena);
}
template<> PROTOBUF_NOINLINE ::opencensus::proto::trace::v1::RateLimitingSampler* Arena::CreateMaybeMessage< ::opencensus::proto::trace::v1::RateLimitingSampler >(Arena* arena) {
  return Arena::CreateInternal< ::opencensus::proto::trace::v1::RateLimitingSampler >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
